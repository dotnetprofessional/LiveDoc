{"features":[{"type":"Feature","ruleViolations":[],"statistics":{"passCount":65,"failedCount":0,"pendingCount":0,"totalCount":65,"totalRuleViolations":0,"duration":62,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":54,"failedCount":0,"pendingCount":0,"totalCount":54,"totalRuleViolations":0,"duration":48,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of false","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr0lpx0vsg","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":20},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":4},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":2},{"title":"IAppCatalogService is called with the correct appType: 15","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-p4xbsdbpaj","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":2},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["initialAppListLoadOccurred","appType"],["false","15"],["false","1"],["false","4"],["true","15"],["true","1"],["true","4"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":29,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of false","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr0lpx0vsg","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":20},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":4},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":2},{"title":"IAppCatalogService is called with the correct appType: 15","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-p4xbsdbpaj","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":2},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":false,"appType":15},"title":"The user can fetch the app list","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of false","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr0lpx0vsg","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":4},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":0},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IAppCatalogService is called with the correct appType: 1","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-9ctd3q04r","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":false,"appType":1},"title":"The user can fetch the app list","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of false","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr0lpx0vsg","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":2},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":0},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IAppCatalogService is called with the correct appType: 4","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-ajbucuper","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":false,"appType":4},"title":"The user can fetch the app list","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of true","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr2t31jmlc","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":2},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":0},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IAppCatalogService is called with the correct appType: 15","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-p4xbsdbpaj","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":true,"appType":15},"title":"The user can fetch the app list","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of true","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr2t31jmlc","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":6},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":0},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":2},{"title":"IAppCatalogService is called with the correct appType: 1","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-9ctd3q04r","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":true,"appType":1},"title":"The user can fetch the app list","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the store has an initialAppListLoadOccurred value of true","status":"pass","exception":{},"rawTitle":"the store has an initialAppListLoadOccurred value of <initialAppListLoadOccurred>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwlihbg1xc-cn3jfswmg0-lr2t31jmlc","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: scenarioOutlineContext.example.initialAppListLoadOccurred\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n        }","duration":3},{"title":"fetchAppListAsync action is called","status":"pass","exception":{},"rawTitle":"fetchAppListAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwlihbg1xc-cn3jfswmg0-jkkhsvs6m8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.fetchAppListAsync(scenarioOutlineContext.example.appType, false));\r\n        })","duration":0},{"title":"IAppCatalogService.getAppsAsync is called","status":"pass","exception":{},"rawTitle":"IAppCatalogService.getAppsAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwlihbg1xc-cn3jfswmg0-86e8totycb","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IAppCatalogService is called with the correct appType: 4","status":"pass","exception":{},"rawTitle":"IAppCatalogService is called with the correct appType: <appType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-cn3jfswmg0-ajbucuper","code":"() => {\r\n            appCatalogMock.getAppsAsync.calledWith(scenarioOutlineContext.example.appType).should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple actions are called and they have types that match the expected types","status":"pass","exception":{},"rawTitle":"2 simple actions are called and they have types that match the expected types","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-cn3jfswmg0-s1dlr5poaz","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync)];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const payload = actions[1].payload;\r\n            payload.appType.should.be.eql(scenarioOutlineContext.example.appType);\r\n            payload.appList.should.be.eql(appListToReturn);\r\n        }","duration":0},{"title":"trackScenario start should be called once","status":"pass","exception":{},"rawTitle":"trackScenario start should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwlihbg1xc-cn3jfswmg0-falrzvt3zx","code":"() => {\r\n            trackScenario.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario should be called once","status":"pass","exception":{},"rawTitle":"trackScenario should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"mwlihbg1xc-cn3jfswmg0-v9b25spx91","code":"() => {\r\n            trackScenario.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"trackScenario end is called with the correct options","status":"pass","exception":{},"rawTitle":"trackScenario end is called with the correct options","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"mwlihbg1xc-cn3jfswmg0-16cx4fw43wr","code":"() => {\r\n            trackScenario.endScenarioStub.calledWith({ customScenarioData: { appType: Services.AppType[scenarioOutlineContext.example.appType], isInitialAppListLoad: !scenarioOutlineContext.example.initialAppListLoadOccurred } });\r\n        }","duration":0}],"example":{"initialAppListLoadOccurred":true,"appType":4},"title":"The user can fetch the app list","sequence":6,"id":"mwlihbg1xc-cn3jfswmg0"}],"title":"The user can fetch the app list","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a toggle favorite action is dispatched","status":"pass","exception":{},"rawTitle":"a toggle favorite action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwlihbg1xc-lqxegyf9uo-rot9ursidx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {};\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(appCatalogMock);\r\n            app = new Services.AppInfo();\r\n            app.isFavorite = false;\r\n            yield store.dispatch(Actions.toggleAppFavoriteAsync(app));\r\n        })","duration":1},{"title":"the correct action should be called","status":"pass","exception":{},"rawTitle":"the correct action should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwlihbg1xc-lqxegyf9uo-nisj9lydjn","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [`${Actions.updateAppCatalogAppInfo}`];\r\n            actions.length.should.be.eql(1);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":1},{"title":"toggleAppFavoriteAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"toggleAppFavoriteAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwlihbg1xc-lqxegyf9uo-lqxlnbnh40","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            appCatalogMock.toggleAppFavoriteAsync.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"A user can toggle whether an app is favorite","description":"","tags":[],"sequence":2,"id":"mwlihbg1xc-lqxegyf9uo"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an open app details action is dispatched","status":"pass","exception":{},"rawTitle":"an open app details action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwlihbg1xc-a5bth2fbr4-gfdba1sinv","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {};\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            app = new Services.AppInfo();\r\n            store.dispatch(Actions.openAppDetails(app));\r\n        }","duration":1},{"title":"the correct actions should be called","status":"pass","exception":{},"rawTitle":"the correct actions should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwlihbg1xc-a5bth2fbr4-12z6ez6ga5","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [`${Actions.setAppDetailsApp}`, `${react_navigation_1.NavigationActions.NAVIGATE}`];\r\n            actions.length.should.be.eql(2);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the correct payload should exist on the first action","status":"pass","exception":{},"rawTitle":"the correct payload should exist on the first action","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwlihbg1xc-a5bth2fbr4-a6fve9y15x","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].payload.should.be.eql(app);\r\n        }","duration":1}],"title":"Open the app details","description":"","tags":[],"sequence":3,"id":"mwlihbg1xc-a5bth2fbr4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a switch app type and fetch apps action is dispatched","status":"pass","exception":{},"rawTitle":"a switch app type and fetch apps action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwlihbg1xc-ohnzjv4g57-v8ins2d7rf","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AppCatalogState: {\r\n                        initialAppListLoadOccurred: false\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            getAppsAsyncStub = sinon.stub().callsFake(() => Promise.resolve([]));\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue({\r\n                getAppsAsync: getAppsAsyncStub\r\n            });\r\n            trackScenario = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenario.setup();\r\n            appType = Services.AppType.My;\r\n            store.dispatch(Actions.switchAppTypeAndFetchAppListAsync(appType));\r\n        }","duration":8},{"title":"the correct actions should be called","status":"pass","exception":{},"rawTitle":"the correct actions should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwlihbg1xc-ohnzjv4g57-12z6ez6ga5","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [\r\n                `${Actions.switchAppType}`,\r\n                Utilities.pending(Actions.fetchAppListAsync), Utilities.fulfilled(Actions.fetchAppListAsync),\r\n                `${Actions.setSearchActive}`\r\n            ];\r\n            actions.length.should.be.eql(expectedActionsTypes.length);\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the correct payload should exist on the switch app type fulfilled action","status":"pass","exception":{},"rawTitle":"the correct payload should exist on the switch app type fulfilled action","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwlihbg1xc-ohnzjv4g57-16b4rthodog","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].payload.should.be.eql(appType);\r\n        }","duration":0},{"title":"the fetch app list action should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the fetch app list action should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwlihbg1xc-ohnzjv4g57-a56z0ku9fc","code":"() => {\r\n            getAppsAsyncStub.calledWith(appType, false).should.be.eql(true);\r\n        }","duration":2},{"title":"the correct payload should exist on the switch app type fulfilled action","status":"pass","exception":{},"rawTitle":"the correct payload should exist on the switch app type fulfilled action","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwlihbg1xc-ohnzjv4g57-16b4rthodog","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[3].payload.should.be.eql(false);\r\n        }","duration":0}],"title":"Switch app type and fetch apps","description":"","tags":[],"sequence":4,"id":"mwlihbg1xc-ohnzjv4g57"}],"title":"AppCatalog.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/AppCatalogActions.Spec.js","id":"mwlihbg1xc","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app with flow and dependent (excel) connections","status":"pass","exception":{},"rawTitle":"an app with flow and dependent (excel) connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"6r422ogqi5-12lv1cszpzp-a5aihw8mtc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            dependentConnectionRef.dependencies = {\r\n                fileSource: mainConnectionRef.id\r\n            };\r\n            mainConnectionRef.dependents = [\r\n                dependentConnectionRef.id\r\n            ];\r\n            connectionRefs = HashTableUtility.create();\r\n            connectionRefs[mainConnectionRef.id] = mainConnectionRef;\r\n            connectionRefs[dependentConnectionRef.id] = dependentConnectionRef;\r\n            connectionRefs[flowConnection.id] = flowConnection;\r\n            appInfo.connectionReferences = connectionRefs;\r\n            switchEnvironmentStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.switchEnvironment.name);\r\n            applyDisambiguationRules = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.applyDisambiguationRules.name);\r\n        })","duration":5},{"title":"the app details have opened","status":"pass","exception":{},"rawTitle":"the app details have opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"6r422ogqi5-12lv1cszpzp-h1o8vwfquj","code":"() => {\r\n            store.dispatch(Actions.appDetailsOpened(appInfo));\r\n        }","duration":1},{"title":"the environment should switch to the app environment","status":"pass","exception":{},"rawTitle":"the environment should switch to the app environment","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"6r422ogqi5-12lv1cszpzp-cn6mbrgcq8","code":"() => {\r\n            switchEnvironmentStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"connections should be set to auto save","status":"pass","exception":{},"rawTitle":"connections should be set to auto save","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"6r422ogqi5-12lv1cszpzp-lr4mry914w","code":"() => {\r\n            const actions = store.getActions();\r\n            const setAutoSaveAction = actions[0];\r\n            setAutoSaveAction.type.should.be.eql(`${Actions.setConnectionsAutoSave}`);\r\n            setAutoSaveAction.payload.should.be.eql(true);\r\n        }","duration":0},{"title":"connections should not be recommended","status":"pass","exception":{},"rawTitle":"connections should not be recommended","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"6r422ogqi5-12lv1cszpzp-jkpx4wffr4","code":"() => {\r\n            const actions = store.getActions();\r\n            const setDontRecommendAction = actions[1];\r\n            setDontRecommendAction.type.should.be.eql(`${Actions.setConnectionsDontRecommend}`);\r\n            setDontRecommendAction.payload.should.be.eql(true);\r\n        }","duration":2},{"title":"applyDisambiguationRules should be called, filtering out flow/dependent connections","status":"pass","exception":{},"rawTitle":"applyDisambiguationRules should be called, filtering out flow/dependent connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"6r422ogqi5-12lv1cszpzp-a59ld2i8rk","code":"() => {\r\n            applyDisambiguationRules.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"permissions should be updated","status":"pass","exception":{},"rawTitle":"permissions should be updated","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"6r422ogqi5-12lv1cszpzp-jkpx79b000","code":"() => {\r\n            const actions = store.getActions();\r\n            const updatePermissionsAction = actions[2];\r\n            updatePermissionsAction.type.should.be.eql(`${Actions.updatePermissionsWithInitialPermissions}`);\r\n        }","duration":0}],"title":"The app details are opened for a given app","description":"","tags":[],"sequence":1,"id":"6r422ogqi5-12lv1cszpzp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"app details are dismissed","status":"pass","exception":{},"rawTitle":"app details are dismissed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"6r422ogqi5-y5xdt81gxx-jkisgi6tz4","code":"() => {\r\n            store.dispatch(Actions.dismissAppDetails());\r\n        }","duration":2},{"title":"navigate back to the previous view","status":"pass","exception":{},"rawTitle":"navigate back to the previous view","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"6r422ogqi5-y5xdt81gxx-ka4jhckwm8","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(\"Navigation/BACK\");\r\n        }","duration":0}],"title":"The app details are closed","description":"","tags":[],"sequence":2,"id":"6r422ogqi5-y5xdt81gxx"}],"title":"Displaying the app details","description":"Rules:\n* Given an app, the app details are displayed with filtered connection references\n* The app details page can be dismissed","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/AppDetailsActions.Spec.js","id":"6r422ogqi5","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":29,"failedCount":0,"pendingCount":0,"totalCount":29,"totalRuleViolations":1,"duration":44,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user is logged in (cached token) and its a fresh install","status":"pass","exception":{},"rawTitle":"user is logged in (cached token) and its a fresh install","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwsepm2ov4-g3f0gfwctv-14aacblwap1","code":"() => {\r\n            setValueSpy = sinon.spy(Mocks_1.MockSettingsProvider.prototype, Mocks_1.MockSettingsProvider.prototype.setValue.name);\r\n        }","duration":0},{"title":"we update the authentication status of the app","status":"pass","exception":{},"rawTitle":"we update the authentication status of the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwsepm2ov4-g3f0gfwctv-hblcbgps7h","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateAuthenticationStatusAsync());\r\n        })","duration":13},{"title":"we will mark the install as not fresh anymore","status":"pass","exception":{},"rawTitle":"we will mark the install as not fresh anymore","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwsepm2ov4-g3f0gfwctv-rpl95jkzfv","code":"() => {\r\n            setValueSpy.calledOnce.should.be.eql(true, \"setValue should be called once\");\r\n            setValueSpy.calledWith(Config_1.Constants.Settings.Keys.OldInstall, \"true\").should.be.eql(true, \"setValue should be called with OldInstallKey and Value 'true'\");\r\n        }","duration":1},{"title":"sign user out","status":"pass","exception":{},"rawTitle":"sign user out","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwsepm2ov4-g3f0gfwctv-15nguftdc9f","code":"() => {\r\n            logoutSpy.calledOnce.should.be.eql(true, \"user should be logged out\");\r\n        }","duration":0},{"title":"update the Auth state to be un-authenticated","status":"pass","exception":{},"rawTitle":"update the Auth state to be un-authenticated","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwsepm2ov4-g3f0gfwctv-jkqot4fxi8","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(5, \"number of actions called should be eql 5\");\r\n            actions[0].payload.should.be.eql(Shared_1.AuthStateType.NotAuthenticated, \"authentication state should be updated to be NotAuthenticated\");\r\n        }","duration":0}],"title":"Fresh version of the app and AAD is logged in","description":"","tags":[],"sequence":1,"id":"mwsepm2ov4-g3f0gfwctv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":1,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a fresh install of the app","status":"pass","exception":{},"rawTitle":"a fresh install of the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwsepm2ov4-16b3a8831a8-2rujkzn96o","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IPlayerUpgrader);\r\n            const fakeUpgrader = {\r\n                shouldRunAsync: () => __awaiter(this, void 0, void 0, function* () {\r\n                    return false;\r\n                }),\r\n                runUpgraderAsync: () => __awaiter(this, void 0, void 0, function* () {\r\n                })\r\n            };\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IPlayerUpgrader).toConstantValue(fakeUpgrader);\r\n        }","duration":4},{"title":"we update the authentication status of the app","status":"pass","exception":{},"rawTitle":"we update the authentication status of the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwsepm2ov4-16b3a8831a8-hblcbgps7h","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateAuthenticationStatusAsync());\r\n        })","duration":4},{"title":"the user won't be signed in","status":"pass","exception":{},"rawTitle":"the user won't be signed in","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwsepm2ov4-16b3a8831a8-16b2950ftnk","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(5, \"actions after updateAuthenticationStatusAsync should have 5 items\");\r\n            actions[0].payload.should.be.eql(Shared_1.AuthStateType.NotAuthenticated, \"the user should not be logged in\");\r\n        }","duration":0},{"title":"logUserInAsync action is called","status":"pass","exception":{},"rawTitle":"logUserInAsync action is called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The user logins in"}],"type":"When","sequence":4,"id":"mwsepm2ov4-16b3a8831a8-jkmo65bixs","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.logUserInAsync(\"email@microsoft.com\"));\r\n        })","duration":1},{"title":"IAuthenticationService.loginAsync is called","status":"pass","exception":{},"rawTitle":"IAuthenticationService.loginAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwsepm2ov4-16b3a8831a8-x0diyr0v2j","code":"() => {\r\n            loginSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"12 simple actions are called and they have types that match the typeList","status":"pass","exception":{},"rawTitle":"12 simple actions are called and they have types that match the typeList","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwsepm2ov4-16b3a8831a8-cn9qqevwy8","code":"() => {\r\n            const actions = store.getActions();\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            actions.length.should.be.eql(12);\r\n            const expectedActionsTypes = [\r\n                `${Actions.updateAuthenticationStatus}`,\r\n                Utilities.pending(Actions.updateIsAutomationAccountAsync),\r\n                Utilities.fulfilled(Actions.updateIsAutomationAccountAsync),\r\n                Utilities.pending(Actions.updateEnrollmentStatusAsync),\r\n                Utilities.rejected(Actions.updateEnrollmentStatusAsync),\r\n                Utilities.pending(Actions.logUserInCoreAsync),\r\n                Utilities.fulfilled(Actions.logUserInCoreAsync),\r\n                `${Actions.updateAuthenticationStatus}`,\r\n                Utilities.pending(Actions.updateIsAutomationAccountAsync),\r\n                Utilities.fulfilled(Actions.updateIsAutomationAccountAsync),\r\n                Utilities.pending(Actions.updateEnrollmentStatusAsync),\r\n                Utilities.rejected(Actions.updateEnrollmentStatusAsync),\r\n            ];\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":1},{"title":"the updateAuthenticationStatus action has the right payload","status":"pass","exception":{},"rawTitle":"the updateAuthenticationStatus action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwsepm2ov4-16b3a8831a8-itj78uxlx9","code":"() => {\r\n            const actions = store.getActions();\r\n            const secondAction = actions[7];\r\n            secondAction.payload.should.be.eql(Shared_1.AuthStateType.Authenticated, \"second action payload should be AuthStateType.Authenticated\");\r\n        }","duration":0}],"title":"The user logins in","description":"","tags":[],"sequence":2,"id":"mwsepm2ov4-16b3a8831a8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"its not a fresh install","status":"pass","exception":{},"rawTitle":"its not a fresh install","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwsepm2ov4-srac1fsk6z-11l91p4ytc0","code":"() => {\r\n            getValueStub = sinon.stub(Mocks_1.MockSettingsProvider.prototype, Mocks_1.MockSettingsProvider.prototype.getValue.name).callsFake((key) => {\r\n                if (key === Config_1.Constants.Settings.Keys.OldInstall)\r\n                    return \"true\";\r\n            });\r\n        }","duration":2},{"title":"updateAuthenticationStatusAsync action is called","status":"pass","exception":{},"rawTitle":"updateAuthenticationStatusAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwsepm2ov4-srac1fsk6z-143swjmo4id","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateAuthenticationStatus());\r\n        })","duration":0},{"title":"IAuthenticationService.hasIdentity is called","status":"pass","exception":{},"rawTitle":"IAuthenticationService.hasIdentity is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwsepm2ov4-srac1fsk6z-o53nov279p","code":"() => {\r\n            hasIdentitySpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"1 simple actions is called and it has the correct type","status":"pass","exception":{},"rawTitle":"1 simple actions is called and it has the correct type","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwsepm2ov4-srac1fsk6z-144kxrxzd6b","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [`${Actions.updateAuthenticationStatus}`];\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the action has the right payload","status":"pass","exception":{},"rawTitle":"the action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwsepm2ov4-srac1fsk6z-jkqrnwiqe8","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[0];\r\n            action.payload.should.be.eql(Shared_1.AuthStateType.Authenticated);\r\n        }","duration":0}],"title":"The user is logged in and we check Auth status.","description":"","tags":[],"sequence":3,"id":"mwsepm2ov4-srac1fsk6z"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updateAuthenticationStatusAsync action is called","status":"pass","exception":{},"rawTitle":"updateAuthenticationStatusAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwsepm2ov4-mwpq9or0a8-143swjmo4id","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAuthenticationService);\r\n            authService = new Mocks_1.AuthenticationMockService(false);\r\n            hasIdentitySpy = sinon.spy(authService, authService.hasIdentity.name);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAuthenticationService).toConstantValue(authService);\r\n            yield store.dispatch(Actions.updateAuthenticationStatus());\r\n        })","duration":2},{"title":"IAuthenticationService.hasIdentity is called","status":"pass","exception":{},"rawTitle":"IAuthenticationService.hasIdentity is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwsepm2ov4-mwpq9or0a8-o53nov279p","code":"() => {\r\n            hasIdentitySpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"1 simple actions is called and it has the correct type","status":"pass","exception":{},"rawTitle":"1 simple actions is called and it has the correct type","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwsepm2ov4-mwpq9or0a8-144kxrxzd6b","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [`${Actions.updateAuthenticationStatus}`];\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the action has the right payload","status":"pass","exception":{},"rawTitle":"the action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwsepm2ov4-mwpq9or0a8-jkqrnwiqe8","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[0];\r\n            action.payload.should.be.eql(Shared_1.AuthStateType.NotAuthenticated);\r\n        }","duration":0}],"title":"The user is not logged in and we check Auth status.","description":"","tags":[],"sequence":4,"id":"mwsepm2ov4-mwpq9or0a8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is logged in","status":"pass","exception":{},"rawTitle":"the user is logged in","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwsepm2ov4-mwt79f9pvk-16b32bgdog0","code":"() => {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.clear.name);\r\n            removeAuthInfoStub = sinon.stub(Services_1.IntuneProvider.prototype, Services_1.IntuneProvider.prototype.unregisterAccountForMAMAsync.name);\r\n            InversifyConfigs_1.kernel.snapshot();\r\n        }","duration":4},{"title":"attemptToLogOutUserAsync action is called","status":"pass","exception":{},"rawTitle":"attemptToLogOutUserAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwsepm2ov4-mwt79f9pvk-jkso9h88w0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.attemptToLogOutUserAsync(false));\r\n        })","duration":4},{"title":"IAuthenticationService.logoutSpy is called","status":"pass","exception":{},"rawTitle":"IAuthenticationService.logoutSpy is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwsepm2ov4-mwt79f9pvk-jkjl4346sg","code":"() => {\r\n            logoutSpy.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"11 simple actions are called and they have types that match the typeList","status":"pass","exception":{},"rawTitle":"11 simple actions are called and they have types that match the typeList","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwsepm2ov4-mwt79f9pvk-cn9qqevwy8","code":"() => {\r\n            const actions = store.getActions();\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            actions.length.should.be.eql(11);\r\n            const expectedActionsTypes = [\r\n                Utilities.pending(Actions.logUserOutCoreAsync),\r\n                Utilities.fulfilled(Actions.logUserOutCoreAsync),\r\n                `${Actions.updateAuthenticationStatus}`,\r\n                Utilities.pending(Actions.updateIsAutomationAccountAsync),\r\n                `${Actions.unregisterPushNotification}`,\r\n                `${Actions.resetStateAction}`,\r\n                Utilities.pending(Actions.unregisterAccountForMAMAsync),\r\n                Utilities.fulfilled(Actions.updateIsAutomationAccountAsync),\r\n                Utilities.fulfilled(Actions.unregisterAccountForMAMAsync),\r\n                Utilities.pending(Actions.updateEnrollmentStatusAsync),\r\n                Utilities.rejected(Actions.updateEnrollmentStatusAsync),\r\n            ];\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0},{"title":"the updateAuthenticationStatus action has the right payload","status":"pass","exception":{},"rawTitle":"the updateAuthenticationStatus action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwsepm2ov4-mwt79f9pvk-itj78uxlx9","code":"() => {\r\n            const actions = store.getActions();\r\n            const secondAction = actions[2];\r\n            secondAction.payload.should.be.eql(Shared_1.AuthStateType.NotAuthenticated);\r\n        }","duration":0},{"title":"All caches are cleared","status":"pass","exception":{},"rawTitle":"All caches are cleared","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwsepm2ov4-mwt79f9pvk-9y97p9rfrp","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true, \"AsyncStroage.clear should be called\");\r\n        }","duration":1},{"title":"authentication info is cleared","status":"pass","exception":{},"rawTitle":"authentication info is cleared","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"mwsepm2ov4-mwt79f9pvk-xmrqtytpvp","code":"() => {\r\n            removeAuthInfoStub.calledOnce.should.be.eql(true, \"removeAuthInfo should be called.\");\r\n        }","duration":0}],"title":"The user logs out.","description":"","tags":[],"sequence":5,"id":"mwsepm2ov4-mwt79f9pvk"}],"title":"Power Apps authentication.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/AuthenticationsActions.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a user has been authenticated","status":"pass","exception":{},"rawTitle":"a user has been authenticated","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwsepm2ov4-9pbsb4-17qqxly4prh","code":"() => {\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated,\r\n                        canUseAuthenticator: false\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAuthenticationService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.PlayerSettings);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IEnrollmentService);\r\n            authService = new Mocks_1.AuthenticationMockService(true);\r\n            hasIdentitySpy = sinon.spy(authService, authService.hasIdentity.name);\r\n            loginSpy = sinon.spy(authService, authService.loginAsync.name);\r\n            logoutSpy = sinon.spy(authService, authService.logoutAsync.name);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAuthenticationService).toConstantValue(authService);\r\n            mockSettingsProvider = new Mocks_1.MockSettingsProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.PlayerSettings).toConstantValue(mockSettingsProvider);\r\n        }","duration":7}],"title":"","description":"","tags":[],"id":"mwsepm2ov4-9pbsb4"},"id":"mwsepm2ov4","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":3,"duration":263,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the PowerApps client is started"}],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":1,"duration":255,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the PowerApps client is started","status":"pass","exception":{},"rawTitle":"the PowerApps client is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u06sc6t19-2rpczg0q8w-3wbbddljx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            updateNetworkConnectionInfoStub = sinon.stub(Core.Telemetry.Log, \"updateNetworkConnectionInfo\");\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction({\r\n                a11yService: Mocks_1.MockAccessibilityServiceInstance\r\n            }));\r\n        })","duration":254},{"title":"updateNetworkConnectionInfo should be called once","status":"pass","exception":{},"rawTitle":"updateNetworkConnectionInfo should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u06sc6t19-2rpczg0q8w-x15patkoc3","code":"() => {\r\n            updateNetworkConnectionInfoStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"device information is set for logging with PowerAppsClient.Session event","status":"pass","exception":{},"rawTitle":"device information is set for logging with PowerAppsClient.Session event","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u06sc6t19-2rpczg0q8w-90itz4n9a5","code":"() => {\r\n            setDeviceInformationStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"logging is initialized","status":"pass","exception":{},"rawTitle":"logging is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10u06sc6t19-2rpczg0q8w-bq3zv80k4t","code":"() => {\r\n            initializeLoggingStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the runtime is loaded","status":"pass","exception":{},"rawTitle":"the runtime is loaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"10u06sc6t19-2rpczg0q8w-f9tl9sb6rp","code":"() => {\r\n            loadRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the runtime is loaded after logging is initialized","status":"pass","exception":{},"rawTitle":"the runtime is loaded after logging is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"10u06sc6t19-2rpczg0q8w-jkpmknoy74","code":"() => {\r\n            loadRuntimeStub.calledAfter(initializeLoggingStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the Cordova router service is setup","status":"pass","exception":{},"rawTitle":"the Cordova router service is setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"10u06sc6t19-2rpczg0q8w-12lv0r8h5ul","code":"() => {\r\n            cordovaRouterSetupStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"setSessionId action is dispatched","status":"pass","exception":{},"rawTitle":"setSessionId action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"10u06sc6t19-2rpczg0q8w-jkinqrwcg0","code":"() => {\r\n            const actions = store.getActions();\r\n            const setSessionIdType = `${Actions_2.setSessionId}`;\r\n            actions[6].type.should.be.eql(setSessionIdType);\r\n        }","duration":0}],"title":"PowerApps client start up","description":"","tags":[],"sequence":1,"id":"10u06sc6t19-2rpczg0q8w"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"hide the PowerApps client splashscreen"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"hide the PowerApps client splashscreen","status":"pass","exception":{},"rawTitle":"hide the PowerApps client splashscreen","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u06sc6t19-a535lvvihs-163u5l6na9v","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            endAppStartScenarioStub = sinon.stub(Core.Telemetry.Log, \"endAppStartScenario\");\r\n            yield store.dispatch(Actions_1.hideSplashScreen());\r\n        })","duration":5},{"title":"the endAppStartScenario method should be called","status":"pass","exception":{},"rawTitle":"the endAppStartScenario method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u06sc6t19-a535lvvihs-jkmop1ay8w","code":"() => {\r\n            endAppStartScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"PowerApps client load completes","description":"","tags":[],"sequence":2,"id":"10u06sc6t19-a535lvvihs"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"hideSplashScreen action is dispatched"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"hideSplashScreen action is dispatched","status":"pass","exception":{},"rawTitle":"hideSplashScreen action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u06sc6t19-jkns541mlk-itj2c21qub","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            endAppStartScenarioStub = sinon.stub(Core.Telemetry.Log, \"endAppStartScenario\");\r\n            yield store.dispatch(Actions_1.hideSplashScreen());\r\n        })","duration":2},{"title":"the endAppStartScenario method should not be called","status":"pass","exception":{},"rawTitle":"the endAppStartScenario method should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u06sc6t19-jkns541mlk-jkqnpiowu8","code":"() => {\r\n            endAppStartScenarioStub.callCount.should.be.eql(0);\r\n        }","duration":1}],"title":"PowerApps client is already loaded","description":"","tags":[],"sequence":3,"id":"10u06sc6t19-jkns541mlk"}],"title":"PowerApps start up","description":"Rules:\n    * initializes the core environment\n    * initializes logging\n    * loads the run time\n    * sets the session ID\n    * registers listeners for the cordova plugins","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/BootstrapActions.Spec.js","id":"10u06sc6t19","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":173,"failedCount":0,"pendingCount":0,"totalCount":173,"totalRuleViolations":39,"duration":216,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":143,"failedCount":0,"pendingCount":0,"totalCount":143,"totalRuleViolations":0,"duration":192,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-1fjnrixugt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":18},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a5bdl676zk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":3},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appId","appName","capabilities","authResources","missingConnections","alreadyConsentedCapabilities","alreadyConsentedAuthResources","permissionsShown"],["app2","appWithConnections","[]","[]","[[\"id0\",{\"connectionReferenceId\":\"id0\",\"displayName\":\"id0 display name\",\"iconUri\":\"https://dummyimage.com/128x128/00f/fff.png&text=id0\",\"showScopeLink\":false,\"scopeData\":null,\"hasSelectedConnection\":false,\"selectedConnectionDisplayName\":null,\"isSelectedConnectionAuthenticated\":null,\"apiCreatorDisplayName\":null,\"showAddButton\":true,\"showChangeButton\":false,\"availableConnections\":[],\"addConnectionDisplayData\":null,\"sharedConnectionId\":null,\"dataSources\":[],\"isOnPremiseConnection\":false,\"gatewayObjectIdHint\":null,\"id\":\"id0\",\"showDataSets\":false,\"currentUserSelectedDataSet\":null,\"dataSetRefId\":\"\",\"dataSets\":null}]]","[]","[]","true"],["app2c","appWithConnections","[]","[]","[[\"id0\",{\"connectionReferenceId\":\"id0\",\"displayName\":\"id0 display name\",\"iconUri\":\"https://dummyimage.com/128x128/00f/fff.png&text=id0\",\"showScopeLink\":false,\"scopeData\":null,\"hasSelectedConnection\":false,\"selectedConnectionDisplayName\":null,\"isSelectedConnectionAuthenticated\":null,\"apiCreatorDisplayName\":null,\"showAddButton\":true,\"showChangeButton\":false,\"availableConnections\":[],\"addConnectionDisplayData\":null,\"sharedConnectionId\":null,\"dataSources\":[],\"isOnPremiseConnection\":false,\"gatewayObjectIdHint\":null,\"id\":\"id0\",\"showDataSets\":false,\"currentUserSelectedDataSet\":null,\"dataSetRefId\":\"\",\"dataSets\":null}]]","[]","[]","true"],["app1","appWithNoConnectionsAndCapabilities","[]","[]","null","[]","[]","false"],["app3","appWithCapabilities","[\"webcam\", \"location\", \"microphone\"]","[]","null","[]","[]","true"],["app3c","appWithCapabilities","[\"webcam\", \"location\", \"microphone\"]","[]","null","[]","[]","true"],["app4","appWithConsentedCapabilities","[\"webcam\", \"location\", \"microphone\"]","[]","null","[\"webcam\", \"location\", \"microphone\"]","[]","false"],["app5","appWithOneConsentedCapability","[\"webcam\", \"location\", \"microphone\"]","[]","null","[\"webcam\" ]","[]","true"],["app5c","appWithOneConsentedCapability","[\"webcam\", \"location\", \"microphone\"]","[]","null","[\"webcam\" ]","[]","true"],["app6","appWithConnectionsAndCapabilities","[\"webcam\", \"location\", \"microphone\"]","[]","[[\"id0\",{\"connectionReferenceId\":\"id0\",\"displayName\":\"id0 display name\",\"iconUri\":\"https://dummyimage.com/128x128/00f/fff.png&text=id0\",\"showScopeLink\":false,\"scopeData\":null,\"hasSelectedConnection\":false,\"selectedConnectionDisplayName\":null,\"isSelectedConnectionAuthenticated\":null,\"apiCreatorDisplayName\":null,\"showAddButton\":true,\"showChangeButton\":false,\"availableConnections\":[],\"addConnectionDisplayData\":null,\"sharedConnectionId\":null,\"dataSources\":[],\"isOnPremiseConnection\":false,\"gatewayObjectIdHint\":null,\"id\":\"id0\",\"showDataSets\":false,\"currentUserSelectedDataSet\":null,\"dataSetRefId\":\"\",\"dataSets\":null}]]","[]","[]","true"],["app6c","appWithConnectionsAndCapabilities","[\"webcam\", \"location\", \"microphone\"]","[]","[[\"id0\",{\"connectionReferenceId\":\"id0\",\"displayName\":\"id0 display name\",\"iconUri\":\"https://dummyimage.com/128x128/00f/fff.png&text=id0\",\"showScopeLink\":false,\"scopeData\":null,\"hasSelectedConnection\":false,\"selectedConnectionDisplayName\":null,\"isSelectedConnectionAuthenticated\":null,\"apiCreatorDisplayName\":null,\"showAddButton\":true,\"showChangeButton\":false,\"availableConnections\":[],\"addConnectionDisplayData\":null,\"sharedConnectionId\":null,\"dataSources\":[],\"isOnPremiseConnection\":false,\"gatewayObjectIdHint\":null,\"id\":\"id0\",\"showDataSets\":false,\"currentUserSelectedDataSet\":null,\"dataSetRefId\":\"\",\"dataSets\":null}]]","[]","[]","true"],["app7","appWithAuthResources","[]","[{\"name\": \"Power BI\", \"resourceId\": \"powerbi\"}]","null","[]","[]","true"],["app8","appWithAuthResourcesConsented","[]","[{\"name\": \"Power BI\", \"resourceId\": \"powerbi\"}]","null","[]","[\"powerbi\"]","false"],["app9","appWithConnectionsAndCapabilitiesAndAuthResources","[\"webcam\", \"location\", \"microphone\"]","[{\"name\": \"Power BI\", \"resourceId\": \"powerbi\"}]","[[\"id0\",{\"connectionReferenceId\":\"id0\",\"displayName\":\"id0 display name\",\"iconUri\":\"https://dummyimage.com/128x128/00f/fff.png&text=id0\",\"showScopeLink\":false,\"scopeData\":null,\"hasSelectedConnection\":false,\"selectedConnectionDisplayName\":null,\"isSelectedConnectionAuthenticated\":null,\"apiCreatorDisplayName\":null,\"showAddButton\":true,\"showChangeButton\":false,\"availableConnections\":[],\"addConnectionDisplayData\":null,\"sharedConnectionId\":null,\"dataSources\":[],\"isOnPremiseConnection\":false,\"gatewayObjectIdHint\":null,\"id\":\"id0\",\"showDataSets\":false,\"currentUserSelectedDataSet\":null,\"dataSetRefId\":\"\",\"dataSets\":null}]]","[]","[]","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-1fjnrixugt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":18},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a5bdl676zk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":3},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app2","appName":"appWithConnections","capabilities":[],"authResources":[],"missingConnections":[["id0",{"connectionReferenceId":"id0","displayName":"id0 display name","iconUri":"https://dummyimage.com/128x128/00f/fff.png&text=id0","showScopeLink":false,"scopeData":null,"hasSelectedConnection":false,"selectedConnectionDisplayName":null,"isSelectedConnectionAuthenticated":null,"apiCreatorDisplayName":null,"showAddButton":true,"showChangeButton":false,"availableConnections":[],"addConnectionDisplayData":null,"sharedConnectionId":null,"dataSources":[],"isOnPremiseConnection":false,"gatewayObjectIdHint":null,"id":"id0","showDataSets":false,"currentUserSelectedDataSet":null,"dataSetRefId":"","dataSets":null}]],"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":1,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-1fjnrixugt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":7},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnections","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a5bdl676zk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":2},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":2},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app2c","appName":"appWithConnections","capabilities":[],"authResources":[],"missingConnections":[["id0",{"connectionReferenceId":"id0","displayName":"id0 display name","iconUri":"https://dummyimage.com/128x128/00f/fff.png&text=id0","showScopeLink":false,"scopeData":null,"hasSelectedConnection":false,"selectedConnectionDisplayName":null,"isSelectedConnectionAuthenticated":null,"apiCreatorDisplayName":null,"showAddButton":true,"showChangeButton":false,"availableConnections":[],"addConnectionDisplayData":null,"sharedConnectionId":null,"dataSources":[],"isOnPremiseConnection":false,"gatewayObjectIdHint":null,"id":"id0","showDataSets":false,"currentUserSelectedDataSet":null,"dataSetRefId":"","dataSets":null}]],"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":2,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":26,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithNoConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-a5bmr7c280","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithNoConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-c2oh4pga25","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":18},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app1","appName":"appWithNoConnectionsAndCapabilities","capabilities":[],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":false},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":3,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-k3d1c2bxed","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":7},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-vl3cy559sd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":8},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app3","appName":"appWithCapabilities","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":4,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-k3d1c2bxed","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":10},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-vl3cy559sd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":3},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":2},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":1}],"example":{"appId":"app3c","appName":"appWithCapabilities","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":5,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConsentedCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-ggmkt7c8dp","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":15},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConsentedCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a59wezrb0g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":5},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":1},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app4","appName":"appWithConsentedCapabilities","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":["webcam","location","microphone"],"alreadyConsentedAuthResources":[],"permissionsShown":false},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":6,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithOneConsentedCapability","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-ph4g3oklog","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithOneConsentedCapability","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-1126f3gh3ud","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":1},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app5","appName":"appWithOneConsentedCapability","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":["webcam"],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":7,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithOneConsentedCapability","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-ph4g3oklog","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithOneConsentedCapability","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-1126f3gh3ud","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":2},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app5c","appName":"appWithOneConsentedCapability","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":null,"alreadyConsentedCapabilities":["webcam"],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":8,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-4z92dv7iab","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":10},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":1},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-55kb712id","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":7},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app6","appName":"appWithConnectionsAndCapabilities","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":[["id0",{"connectionReferenceId":"id0","displayName":"id0 display name","iconUri":"https://dummyimage.com/128x128/00f/fff.png&text=id0","showScopeLink":false,"scopeData":null,"hasSelectedConnection":false,"selectedConnectionDisplayName":null,"isSelectedConnectionAuthenticated":null,"apiCreatorDisplayName":null,"showAddButton":true,"showChangeButton":false,"availableConnections":[],"addConnectionDisplayData":null,"sharedConnectionId":null,"dataSources":[],"isOnPremiseConnection":false,"gatewayObjectIdHint":null,"id":"id0","showDataSets":false,"currentUserSelectedDataSet":null,"dataSetRefId":"","dataSets":null}]],"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":9,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-4z92dv7iab","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":1},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnectionsAndCapabilities","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-55kb712id","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":2},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app6c","appName":"appWithConnectionsAndCapabilities","capabilities":["webcam","location","microphone"],"authResources":[],"missingConnections":[["id0",{"connectionReferenceId":"id0","displayName":"id0 display name","iconUri":"https://dummyimage.com/128x128/00f/fff.png&text=id0","showScopeLink":false,"scopeData":null,"hasSelectedConnection":false,"selectedConnectionDisplayName":null,"isSelectedConnectionAuthenticated":null,"apiCreatorDisplayName":null,"showAddButton":true,"showChangeButton":false,"availableConnections":[],"addConnectionDisplayData":null,"sharedConnectionId":null,"dataSources":[],"isOnPremiseConnection":false,"gatewayObjectIdHint":null,"id":"id0","showDataSets":false,"currentUserSelectedDataSet":null,"dataSetRefId":"","dataSets":null}]],"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":10,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithAuthResources","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-aatited2o3","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithAuthResources","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a57hiaqpkw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":5},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app7","appName":"appWithAuthResources","capabilities":[],"authResources":[{"name":"Power BI","resourceId":"powerbi"}],"missingConnections":null,"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":11,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithAuthResourcesConsented","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-9y915j8z23","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":11},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if  have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-ctnvb3ge8","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithAuthResourcesConsented","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-tgnw1ytxz7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":6},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app8","appName":"appWithAuthResourcesConsented","capabilities":[],"authResources":[{"name":"Power BI","resourceId":"powerbi"}],"missingConnections":null,"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":["powerbi"],"permissionsShown":false},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":12,"id":"vift6n7gut-asaeby6y3x"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":3,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user checkAppPermissionAndConnectionsAsync action is dispatched for appWithConnectionsAndCapabilitiesAndAuthResources","status":"pass","exception":{},"rawTitle":"user checkAppPermissionAndConnectionsAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-asaeby6y3x-a5aaiapgjk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            // Set up capabilities service to return the already consented capabilities\r\n            capabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedCapabilities));\r\n            authResourcesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedAuthResourcesAsync.name)\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.alreadyConsentedAuthResources));\r\n            checkCapabilitiesSpy = sinon.spy(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.isConsentNeededAsync.name);\r\n            // Set up stubs for setting and clearing consented capabilities\r\n            setConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.setAppConsents.name).returns(Promise.resolve());\r\n            clearConsentedCapabilitiesStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.clearAppConsentsAsync.name).returns(Promise.resolve());\r\n            // Set up stubs for saving the connection information\r\n            saveConnectionsStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.saveConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            // Load Permissions\r\n            if (scenarioOutlineContext.example.missingConnections !== \"null\") {\r\n                // Null is coming as an \"null\" string\r\n                missingAppConnections = new Map(scenarioOutlineContext.example.missingConnections);\r\n            }\r\n            else {\r\n                missingAppConnections = new Map();\r\n            }\r\n            permissionsInput = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                appName: scenarioOutlineContext.example.appName,\r\n                capabilities: scenarioOutlineContext.example.capabilities.toString(),\r\n                authResources: scenarioOutlineContext.example.authResources,\r\n                connections: missingAppConnections\r\n            };\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: scenarioOutlineContext.example.appId,\r\n                        connections: permissionsInput.connections,\r\n                        capabilities: permissionsInput.capabilities,\r\n                        authResources: permissionsInput.authResources,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    },\r\n                    OpenAppTelemetryState: {\r\n                        publishedAppDisambiguationScenarioGuid: scenarioGuid\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.checkAppPermissionAndConnectionsAsync(permissionsInput));\r\n        })","duration":6},{"title":"startScenario is called","status":"pass","exception":{},"rawTitle":"startScenario is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-asaeby6y3x-kle1hrwa79","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.PublishedAppDisambiguation).should.be.eql(scenarioOutlineContext.example.permissionsShown);\r\n        }","duration":0},{"title":"we check to see if webcam,location,microphone have already been consented to","status":"pass","exception":{},"rawTitle":"we check to see if <capabilities> have already been consented to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-asaeby6y3x-12kzl7pdcjn","code":"() => {\r\n            checkCapabilitiesSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"that we are taking the right actions based on those Capabilities and Connections","status":"pass","exception":{},"rawTitle":"that we are taking the right actions based on those Capabilities and Connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-asaeby6y3x-a5a2rf70bk","code":"() => {\r\n            const actions = store.getActions();\r\n            const connectionScreenIsShown = actions[0].type === \"Navigation/NAVIGATE\" && actions[0].routeName === Shared_1.RouteNames.ConnectionsAndCapabilitiesStack;\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            connectionScreenIsShown.should.be.eql(testScenarioScreenIsShown);\r\n        }","duration":0},{"title":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for appWithConnectionsAndCapabilitiesAndAuthResources","status":"pass","exception":{},"rawTitle":"user approvePermissionsAndConnectionsDialogAsync action is dispatched for <appName>","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"When","sequence":5,"id":"vift6n7gut-asaeby6y3x-a54iwicon4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.approvePermissionsAndConnectionsDialogAsync());\r\n        })","duration":2},{"title":"trackScenario called","status":"pass","exception":{},"rawTitle":"trackScenario called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":6,"id":"vift6n7gut-asaeby6y3x-bq3uedrzt7","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we save the connections for the app.","status":"pass","exception":{},"rawTitle":"we save the connections for the app.","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Opening a published app and getting the consent for connections and capabilities"}],"type":"Then","sequence":7,"id":"vift6n7gut-asaeby6y3x-avdt7lnx59","code":"() => {\r\n            saveConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we set consented capabilities.","status":"pass","exception":{},"rawTitle":"we set consented capabilities.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"vift6n7gut-asaeby6y3x-slxoer0m43","code":"() => {\r\n            setConsentedCapabilitiesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const firstAction = actions[2];\r\n                firstAction.type.should.be.eql(`${Actions.updatePublishedAppDisambiguationScenarioGuid}`);\r\n            }\r\n        }","duration":0},{"title":"we are updating the app permission response","status":"pass","exception":{},"rawTitle":"we are updating the app permission response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"vift6n7gut-asaeby6y3x-lqxpojbyyo","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const secondAction = actions[2];\r\n                secondAction.type.should.be.eql(`${Actions.updateAppPermissionsResponse}`);\r\n            }\r\n        }","duration":0},{"title":"navigating back after the approval","status":"pass","exception":{},"rawTitle":"navigating back after the approval","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"vift6n7gut-asaeby6y3x-11l7q17nxjk","code":"() => {\r\n            const testScenarioScreenIsShown = scenarioOutlineContext.example.permissionsShown === \"true\";\r\n            if (testScenarioScreenIsShown) {\r\n                const actions = store.getActions();\r\n                const thirdAction = actions[3];\r\n                thirdAction.type.should.be.eql(\"Navigation/BACK\");\r\n            }\r\n        }","duration":0}],"example":{"appId":"app9","appName":"appWithConnectionsAndCapabilitiesAndAuthResources","capabilities":["webcam","location","microphone"],"authResources":[{"name":"Power BI","resourceId":"powerbi"}],"missingConnections":[["id0",{"connectionReferenceId":"id0","displayName":"id0 display name","iconUri":"https://dummyimage.com/128x128/00f/fff.png&text=id0","showScopeLink":false,"scopeData":null,"hasSelectedConnection":false,"selectedConnectionDisplayName":null,"isSelectedConnectionAuthenticated":null,"apiCreatorDisplayName":null,"showAddButton":true,"showChangeButton":false,"availableConnections":[],"addConnectionDisplayData":null,"sharedConnectionId":null,"dataSources":[],"isOnPremiseConnection":false,"gatewayObjectIdHint":null,"id":"id0","showDataSets":false,"currentUserSelectedDataSet":null,"dataSetRefId":"","dataSets":null}]],"alreadyConsentedCapabilities":[],"alreadyConsentedAuthResources":[],"permissionsShown":true},"title":"Opening a published app and getting the consent for connections and capabilities","sequence":13,"id":"vift6n7gut-asaeby6y3x"}],"title":"Opening a published app and getting the consent for connections and capabilities","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the data for the connection validConnection","status":"pass","exception":{},"rawTitle":"updating the data for the connection <connection>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-qvvz41nkrf-oda565jiib","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"appId\";\r\n            connections = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => {\r\n                connections.forEach((data) => {\r\n                    data.showAddButton = scenarioOutlineContext.example.showAddButton;\r\n                    data.hasSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n                    data.isSelectedConnectionAuthenticated = scenarioOutlineContext.example.isSelectedConnectionAuthenticated;\r\n                });\r\n            });\r\n            yield store.dispatch(Actions.updateConnectionsDisplayDataAsync());\r\n        })","duration":3},{"title":"the data for the connections should be updated from the service","status":"pass","exception":{},"rawTitle":"the data for the connections should be updated from the service","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-qvvz41nkrf-zl3907n4ol","code":"() => {\r\n            connectionServiceStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connections that need to be updated should be sent","status":"pass","exception":{},"rawTitle":"the app id and connections that need to be updated should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-qvvz41nkrf-cna6ealx6o","code":"() => {\r\n            connectionServiceStub.calledWith(appId, connections).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the connection update should dispatch an update connections action.","status":"pass","exception":{},"rawTitle":"the completion of the connection update should dispatch an update connections action.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-qvvz41nkrf-203lq4h2gz","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["connection","showAddButton","hasSelectedConnection","isSelectedConnectionAuthenticated","expectedResponse"],["validConnection","false","true","true","true"],["needToAddConnection","true","false","false","false"],["needToFixConnection","false","true","false","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the data for the connection validConnection","status":"pass","exception":{},"rawTitle":"updating the data for the connection <connection>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-qvvz41nkrf-oda565jiib","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"appId\";\r\n            connections = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => {\r\n                connections.forEach((data) => {\r\n                    data.showAddButton = scenarioOutlineContext.example.showAddButton;\r\n                    data.hasSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n                    data.isSelectedConnectionAuthenticated = scenarioOutlineContext.example.isSelectedConnectionAuthenticated;\r\n                });\r\n            });\r\n            yield store.dispatch(Actions.updateConnectionsDisplayDataAsync());\r\n        })","duration":3},{"title":"the data for the connections should be updated from the service","status":"pass","exception":{},"rawTitle":"the data for the connections should be updated from the service","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-qvvz41nkrf-zl3907n4ol","code":"() => {\r\n            connectionServiceStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connections that need to be updated should be sent","status":"pass","exception":{},"rawTitle":"the app id and connections that need to be updated should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-qvvz41nkrf-cna6ealx6o","code":"() => {\r\n            connectionServiceStub.calledWith(appId, connections).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the connection update should dispatch an update connections action.","status":"pass","exception":{},"rawTitle":"the completion of the connection update should dispatch an update connections action.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-qvvz41nkrf-203lq4h2gz","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"example":{"connection":"validConnection","showAddButton":false,"hasSelectedConnection":true,"isSelectedConnectionAuthenticated":true,"expectedResponse":true},"title":"Updating the permissions screen data","sequence":1,"id":"vift6n7gut-qvvz41nkrf"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the data for the connection needToAddConnection","status":"pass","exception":{},"rawTitle":"updating the data for the connection <connection>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-qvvz41nkrf-ktkpabdmd1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"appId\";\r\n            connections = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => {\r\n                connections.forEach((data) => {\r\n                    data.showAddButton = scenarioOutlineContext.example.showAddButton;\r\n                    data.hasSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n                    data.isSelectedConnectionAuthenticated = scenarioOutlineContext.example.isSelectedConnectionAuthenticated;\r\n                });\r\n            });\r\n            yield store.dispatch(Actions.updateConnectionsDisplayDataAsync());\r\n        })","duration":1},{"title":"the data for the connections should be updated from the service","status":"pass","exception":{},"rawTitle":"the data for the connections should be updated from the service","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-qvvz41nkrf-zl3907n4ol","code":"() => {\r\n            connectionServiceStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connections that need to be updated should be sent","status":"pass","exception":{},"rawTitle":"the app id and connections that need to be updated should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-qvvz41nkrf-cna6ealx6o","code":"() => {\r\n            connectionServiceStub.calledWith(appId, connections).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the connection update should dispatch an update connections action.","status":"pass","exception":{},"rawTitle":"the completion of the connection update should dispatch an update connections action.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-qvvz41nkrf-203lq4h2gz","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"example":{"connection":"needToAddConnection","showAddButton":true,"hasSelectedConnection":false,"isSelectedConnectionAuthenticated":false,"expectedResponse":false},"title":"Updating the permissions screen data","sequence":2,"id":"vift6n7gut-qvvz41nkrf"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the data for the connection needToFixConnection","status":"pass","exception":{},"rawTitle":"updating the data for the connection <connection>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-qvvz41nkrf-toujsmf3yz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"appId\";\r\n            connections = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => {\r\n                connections.forEach((data) => {\r\n                    data.showAddButton = scenarioOutlineContext.example.showAddButton;\r\n                    data.hasSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n                    data.isSelectedConnectionAuthenticated = scenarioOutlineContext.example.isSelectedConnectionAuthenticated;\r\n                });\r\n            });\r\n            yield store.dispatch(Actions.updateConnectionsDisplayDataAsync());\r\n        })","duration":1},{"title":"the data for the connections should be updated from the service","status":"pass","exception":{},"rawTitle":"the data for the connections should be updated from the service","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-qvvz41nkrf-zl3907n4ol","code":"() => {\r\n            connectionServiceStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connections that need to be updated should be sent","status":"pass","exception":{},"rawTitle":"the app id and connections that need to be updated should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-qvvz41nkrf-cna6ealx6o","code":"() => {\r\n            connectionServiceStub.calledWith(appId, connections).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the connection update should dispatch an update connections action.","status":"pass","exception":{},"rawTitle":"the completion of the connection update should dispatch an update connections action.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-qvvz41nkrf-203lq4h2gz","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"example":{"connection":"needToFixConnection","showAddButton":false,"hasSelectedConnection":true,"isSelectedConnectionAuthenticated":false,"expectedResponse":false},"title":"Updating the permissions screen data","sequence":3,"id":"vift6n7gut-qvvz41nkrf"}],"title":"Updating the permissions screen data","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection","status":"pass","exception":{},"rawTitle":"adding a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-aatputd319-16b1eod839c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            addedConnectionId = \"addedConnectionId\";\r\n            addConnectionStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.addConnectionAsync.name).returns(Promise.resolve(addedConnectionId));\r\n            appId = \"appId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            const connections = new Map();\r\n            connections.set(connectionReferenceId, {\r\n                connectionReferenceId: connectionReferenceId,\r\n                iconUri: \"http://iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                showDataSets: false,\r\n                dataSetRefId: \"id\",\r\n                dataSets: [],\r\n                currentUserSelectedDataSet: null,\r\n                availableConnections: [],\r\n                addConnectionDisplayData: {\r\n                    termsOfUseUri: null,\r\n                    hasTermsOfUseUrl: false,\r\n                    hasParameters: false,\r\n                    apiDescription: \"\"\r\n                },\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: \"\"\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => { });\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.tryToAddConnectionAsync(connectionReferenceId));\r\n        })","duration":3},{"title":"the connection is added","status":"pass","exception":{},"rawTitle":"the connection is added","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-aatputd319-10k3b8d6om5","code":"() => {\r\n            addConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"the app id and connection reference id are sent to be added","status":"pass","exception":{},"rawTitle":"the app id and connection reference id are sent to be added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-aatputd319-ghq14embyt","code":"() => {\r\n            addConnectionStub.calledWith(appId, connectionReferenceId).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the add connection should dispatch the right set of FSA","status":"pass","exception":{},"rawTitle":"the completion of the add connection should dispatch the right set of FSA","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-aatputd319-1e6bedvbwg","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"title":"Adding a connection for a connection with no parameters","description":"","tags":[],"sequence":3,"id":"vift6n7gut-aatputd319"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection","status":"pass","exception":{},"rawTitle":"adding a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-lqzzpucg8o-16b1eod839c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            addConnectionStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.addConnectionAsync.name);\r\n            appId = \"appId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            const connections = new Map();\r\n            connections.set(connectionReferenceId, {\r\n                connectionReferenceId: connectionReferenceId,\r\n                iconUri: \"http://iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                availableConnections: [],\r\n                showDataSets: false,\r\n                dataSetRefId: \"id\",\r\n                dataSets: [],\r\n                currentUserSelectedDataSet: null,\r\n                addConnectionDisplayData: {\r\n                    termsOfUseUri: \"http://termsOfUse.com\",\r\n                    hasTermsOfUseUrl: true,\r\n                    hasParameters: false,\r\n                    apiDescription: \"\"\r\n                },\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: \"\"\r\n            });\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            appId: appId\r\n                        }\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.tryToAddConnectionAsync(connectionReferenceId));\r\n        })","duration":2},{"title":"the connection is not added","status":"pass","exception":{},"rawTitle":"the connection is not added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"vift6n7gut-lqzzpucg8o-224zd86yb7","code":"() => {\r\n            addConnectionStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"since the connection has a termsOfUseUri, we try to navigate to AddConnectionScreen","status":"pass","exception":{},"rawTitle":"since the connection has a termsOfUseUri, we try to navigate to AddConnectionScreen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-lqzzpucg8o-16b3qd2tvk0","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(\"Navigation/NAVIGATE\");\r\n            actions[0].routeName.should.be.eql(Shared_1.RouteNames.AddConnection);\r\n        }","duration":0}],"title":"Adding a connection for a connection with a terms of use","description":"","tags":[],"sequence":4,"id":"vift6n7gut-lqzzpucg8o"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection","status":"pass","exception":{},"rawTitle":"adding a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-a55bugqxz4-16b1eod839c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            addConnectionStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.addConnectionAsync.name);\r\n            appId = \"appId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            const connections = new Map();\r\n            connections.set(connectionReferenceId, {\r\n                connectionReferenceId: connectionReferenceId,\r\n                iconUri: \"http://iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                showDataSets: false,\r\n                dataSetRefId: \"id\",\r\n                dataSets: [],\r\n                currentUserSelectedDataSet: null,\r\n                availableConnections: [],\r\n                addConnectionDisplayData: {\r\n                    termsOfUseUri: null,\r\n                    hasTermsOfUseUrl: false,\r\n                    hasParameters: true,\r\n                    apiDescription: \"\",\r\n                    parameters: [{\r\n                            parameterName: \"parameter name\",\r\n                            displayName: \"display name\",\r\n                            isRequired: true,\r\n                            parameterType: AppMagic.ConnectionHub.ParameterType.Integer,\r\n                            allowedValues: null,\r\n                            secureTextEntry: false,\r\n                            isVisible: true\r\n                        },\r\n                        {\r\n                            parameterName: \"parameter name 2\",\r\n                            displayName: \"display name 2\",\r\n                            isRequired: true,\r\n                            parameterType: AppMagic.ConnectionHub.ParameterType.Integer,\r\n                            allowedValues: null,\r\n                            secureTextEntry: false,\r\n                            isVisible: true\r\n                        }]\r\n                },\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: \"\"\r\n            });\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            yield store.dispatch(Actions.tryToAddConnectionAsync(connectionReferenceId));\r\n        })","duration":2},{"title":"the connection is not added","status":"pass","exception":{},"rawTitle":"the connection is not added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"vift6n7gut-a55bugqxz4-224zd86yb7","code":"() => {\r\n            addConnectionStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"since the connection has parameters, we try to navigate to AddConnectionScreen","status":"pass","exception":{},"rawTitle":"since the connection has parameters, we try to navigate to AddConnectionScreen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-a55bugqxz4-16b5tyf4g1s","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(\"Navigation/NAVIGATE\");\r\n            actions[0].routeName.should.be.eql(\"AddConnectionScreen\");\r\n        }","duration":0}],"title":"Adding a connection for a connection with parameters","description":"","tags":[],"sequence":5,"id":"vift6n7gut-a55bugqxz4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fixing a connection","status":"pass","exception":{},"rawTitle":"fixing a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-17voz3p4crn-nwdrx7bwnp","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            fixConnectionStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.fixConnectionAsync.name);\r\n            appId = \"appId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            clientSelectedConnectionId = \"clientSelectedConnectionId\";\r\n            apiId = \"apiId\";\r\n            connections.set(connectionReferenceId, {\r\n                connectionReferenceId: connectionReferenceId,\r\n                clientSelectedConnectionId: clientSelectedConnectionId,\r\n                iconUri: \"http://iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                showDataSets: false,\r\n                dataSetRefId: \"id\",\r\n                dataSets: [],\r\n                currentUserSelectedDataSet: null,\r\n                availableConnections: [],\r\n                addConnectionDisplayData: {\r\n                    termsOfUseUri: null,\r\n                    hasTermsOfUseUrl: false,\r\n                    hasParameters: false,\r\n                    apiDescription: \"\"\r\n                },\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: apiId\r\n            });\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            connectionServiceStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.updateConnectionDisplayDataMapAsync.name)\r\n                .callsFake(() => { });\r\n            yield store.dispatch(Actions.fixConnectionAsync(connectionReferenceId));\r\n        })","duration":2},{"title":"the connection is fixed","status":"pass","exception":{},"rawTitle":"the connection is fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-17voz3p4crn-md8ugyh8fx","code":"() => {\r\n            fixConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connection reference id are sent to be added","status":"pass","exception":{},"rawTitle":"the app id and connection reference id are sent to be added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-17voz3p4crn-ghq14embyt","code":"() => {\r\n            fixConnectionStub.calledWith(appId, clientSelectedConnectionId).should.be.eql(true);\r\n        }","duration":0},{"title":"the completion of the fix connection should dispatch the right set of FSA","status":"pass","exception":{},"rawTitle":"the completion of the fix connection should dispatch the right set of FSA","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-17voz3p4crn-1eaj6r7s9s","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Utilities.pending(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n            actions[1].type.should.be.eql(`${Utilities.fulfilled(Actions.updateConnectionsDisplayDataCoreAsync)}`);\r\n        }","duration":0}],"title":"Fixing a connection","description":"","tags":[],"sequence":6,"id":"vift6n7gut-17voz3p4crn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection and error occurred","status":"pass","exception":{},"rawTitle":"adding a connection and error occurred","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"vift6n7gut-6mq24lcijv-o53mgjlht1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            addedConnectionId = \"addedConnectionId\";\r\n            addConnectionStub = sinon.stub(Services.ConnectionService.prototype, Services.ConnectionService.prototype.addConnectionAsync.name).throws(new Error(\"Error occurred\"));\r\n            appId = \"appId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            const connections = new Map();\r\n            connections.set(connectionReferenceId, {\r\n                connectionReferenceId: connectionReferenceId,\r\n                iconUri: \"http://iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                showDataSets: false,\r\n                dataSetRefId: \"id\",\r\n                dataSets: [],\r\n                currentUserSelectedDataSet: null,\r\n                availableConnections: [],\r\n                addConnectionDisplayData: {\r\n                    termsOfUseUri: null,\r\n                    hasTermsOfUseUrl: false,\r\n                    hasParameters: false,\r\n                    apiDescription: \"\"\r\n                },\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: \"\"\r\n            });\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    ConnectionsAndCapabilitiesState: {\r\n                        appId: appId,\r\n                        connections: connections,\r\n                        dontRecommend: false\r\n                    },\r\n                    PublishedAppHostState: {\r\n                        appInfo: null\r\n                    }\r\n                };\r\n            });\r\n            Adapters_1.EnvironmentAdapter.initializeCoreEnvironment();\r\n            yield store.dispatch(Actions.tryToAddConnectionAsync(connectionReferenceId));\r\n        })","duration":8},{"title":"add connection method is called","status":"pass","exception":{},"rawTitle":"add connection method is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"vift6n7gut-6mq24lcijv-md8ore8lzn","code":"() => {\r\n            addConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app id and connection reference id are sent to be added","status":"pass","exception":{},"rawTitle":"the app id and connection reference id are sent to be added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"vift6n7gut-6mq24lcijv-ghq14embyt","code":"() => {\r\n            addConnectionStub.calledWith(appId, connectionReferenceId).should.be.eql(true);\r\n        }","duration":1},{"title":"open error dialog action should be called","status":"pass","exception":{},"rawTitle":"open error dialog action should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"vift6n7gut-6mq24lcijv-jko52xeb0w","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.openErrorDialog}`);\r\n        }","duration":0}],"title":"An error occured when adding connection","description":"","tags":[],"sequence":7,"id":"vift6n7gut-6mq24lcijv"}],"title":"When the user is opening a published app","description":"Rules:\n* If the user has missing connections or capabilities that aren't consented to, the permissions screen should show up\n* When the permissions screen is approved, the rest of the app will be loaded\n* When the permissions screen is canceled, any previously set capabilities are reset, and the app is exited\n* Updates the connection display data\n* Adds a connection\n* Fix a connection","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/ConnectionsAndCapabilitiesActions.Spec.js","id":"vift6n7gut","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":5,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking whether the debug menu should be enabled","status":"pass","exception":{},"rawTitle":"checking whether the debug menu should be enabled","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-2utrpdj65n-tgo0vxvmid","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            debugMenuEnabledStub = sinon.stub(MockDebugService.prototype, MockDebugService.prototype.isDebugMenuEnabledAsync.name);\r\n            yield store.dispatch(Actions.isDebugMenuAvailableAsync());\r\n        })","duration":3},{"title":"isDebugMenuEnabledAsync should be called once","status":"pass","exception":{},"rawTitle":"isDebugMenuEnabledAsync should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-2utrpdj65n-lqwh600ulc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            debugMenuEnabledStub.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Get whether the debug menu should be enabled","description":"","tags":[],"sequence":1,"id":"a580sb1oow-2utrpdj65n"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"getPackagerProfilesAsync is called"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getPackagerProfilesAsync is called","status":"pass","exception":{},"rawTitle":"getPackagerProfilesAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-tt8dsfao43-v8iv37frqd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.getPackagerProfilesAsync());\r\n        })","duration":2},{"title":"getPackagerProfilesAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"getPackagerProfilesAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-tt8dsfao43-8z95um2ktx","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getPackagerProfilesAsyncStub.calledOnce.should.be.true;\r\n        }","duration":1}],"title":"Get the available packager profiles","description":"","tags":[],"sequence":2,"id":"a580sb1oow-tt8dsfao43"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"setActivePackagerProfile is called"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setActivePackagerProfile is called","status":"pass","exception":{},"rawTitle":"setActivePackagerProfile is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-lqzbkx2j3k-jkrgpczmdc","code":"() => {\r\n            store.dispatch(Actions.setActivePackagerProfile(packagerProfile));\r\n        }","duration":2},{"title":"setActivePackagerProfileStub should be called once","status":"pass","exception":{},"rawTitle":"setActivePackagerProfileStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-lqzbkx2j3k-xt8fcxbatf","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setActivePackagerProfileStub.calledOnce.should.be.true;\r\n        }","duration":1},{"title":"the action has the correct payload","status":"pass","exception":{},"rawTitle":"the action has the correct payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a580sb1oow-lqzbkx2j3k-jklj1r3140","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[actions.length - 1].payload.should.be.eql(packagerProfile);\r\n        }","duration":0}],"title":"Set the active packager profile","description":"","tags":[],"sequence":3,"id":"a580sb1oow-lqzbkx2j3k"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"getEndpointNames is called"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getEndpointNames is called","status":"pass","exception":{},"rawTitle":"getEndpointNames is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-a59epk7bqo-itj8udn3w5","code":"() => {\r\n            store.dispatch(Actions.getEndpointNames());\r\n        }","duration":1},{"title":"getEndpointNamesStub should be called once","status":"pass","exception":{},"rawTitle":"getEndpointNamesStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-a59epk7bqo-13r6s69srf","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getEndpointNamesStub.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Get endpoints","description":"","tags":[],"sequence":4,"id":"a580sb1oow-a59epk7bqo"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"setActiveEndpointAsync is called"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setActiveEndpointAsync is called","status":"pass","exception":{},"rawTitle":"setActiveEndpointAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-cn9c0h8080-fp12ohqanh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.setActiveEndpointAsync(environment));\r\n        })","duration":1},{"title":"setActiveEndpointAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"setActiveEndpointAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-cn9c0h8080-me127pmmxx","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setActiveEndpointAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the action has the correct payload","status":"pass","exception":{},"rawTitle":"the action has the correct payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a580sb1oow-cn9c0h8080-jklj1r3140","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[actions.length - 1].payload.should.be.eql(environment);\r\n        }","duration":1}],"title":"Set the active endpoint","description":"","tags":[],"sequence":5,"id":"a580sb1oow-cn9c0h8080"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"initializeDebugAsync is called"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"initializeDebugAsync is called","status":"pass","exception":{},"rawTitle":"initializeDebugAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a580sb1oow-tj1hgtjqo5-jkriej8yow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.initializeDebugAsync());\r\n        })","duration":1},{"title":"getEndpointNamesStub should be called once","status":"pass","exception":{},"rawTitle":"getEndpointNamesStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a580sb1oow-tj1hgtjqo5-13r6s69srf","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getEndpointNamesStub.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Initialize debug","description":"","tags":[],"sequence":6,"id":"a580sb1oow-tj1hgtjqo5"}],"title":"Debug dialog actions","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/DebugActions.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"debug is disabled","status":"pass","exception":{},"rawTitle":"debug is disabled","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a580sb1oow-9pbsb4-jkpavva2qo","code":"() => {\r\n            const mockDebugService = new MockDebugService();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDebugService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDebugService).toConstantValue(mockDebugService);\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"a580sb1oow-9pbsb4"},"id":"a580sb1oow","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":6,"duration":97,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"handleInitialURI action is called"}],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":1,"duration":40,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"handleInitialURI action is called","status":"pass","exception":{},"rawTitle":"handleInitialURI action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-mwmx4z329s-9y97tzhq65","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.handleInitialURI());\r\n        })","duration":40},{"title":"getInitialUrlAsyncStub is called","status":"pass","exception":{},"rawTitle":"getInitialUrlAsyncStub is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-mwmx4z329s-12by2v5wqvx","code":"() => {\r\n            getInitialUrlAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"7 simple actions are called and they have types that match the typeList","status":"pass","exception":{},"rawTitle":"7 simple actions are called and they have types that match the typeList","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"liinpstuot-mwmx4z329s-cn7ltxb7g8","code":"() => {\r\n            const actions = store.getActions();\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            const expectedActionsTypes = [\r\n                `${Actions.initialUriHandled}`,\r\n                `${Actions.updateOpenAppInProgress}`,\r\n                `${Actions.updateAppOpeningStage}`,\r\n                `${Actions.updateOpenAppScenarioGuid}`,\r\n                `${Actions.updateSplashScreenScenarioGuid}`,\r\n                `${Actions.updatePublishedAppInfo}`,\r\n                `${Actions.navigateToAppHost}`\r\n            ];\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":4,"id":"liinpstuot-mwmx4z329s-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"the updatePublishedAppInfo action has the right payload","status":"pass","exception":{},"rawTitle":"the updatePublishedAppInfo action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"liinpstuot-mwmx4z329s-alu9771ut","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[5];\r\n            action.payload.params.should.be.eql(params);\r\n            const appInfo = action.payload.appInfo;\r\n            appInfo.appId.should.be.eql(appId);\r\n        }","duration":0}],"title":"We handle the case when the user opened the player using a Deep Link.","description":"","tags":[],"sequence":1,"id":"liinpstuot-mwmx4z329s"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"initializeDeepLinkingAsync action is called"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"initializeDeepLinkingAsync action is called","status":"pass","exception":{},"rawTitle":"initializeDeepLinkingAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-n2y6889t31-rot3r2d0qb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.initializeDeepLinkingAsync());\r\n        })","duration":3},{"title":"getInitialUrlAsyncStub NOT is called","status":"pass","exception":{},"rawTitle":"getInitialUrlAsyncStub NOT is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-n2y6889t31-15vnovy25f1","code":"() => {\r\n            getInitialUrlAsyncStub.called.should.be.eql(false);\r\n        }","duration":0},{"title":"0 actions are called","status":"pass","exception":{},"rawTitle":"0 actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"liinpstuot-n2y6889t31-6hs0n2ud99","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"We don't handle the initialUrl when already done.","description":"","tags":[],"sequence":2,"id":"liinpstuot-n2y6889t31"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"handleDeepLinkAsync action is called"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"handleDeepLinkAsync action is called","status":"pass","exception":{},"rawTitle":"handleDeepLinkAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-3ryfojsebn-dhym0aoexn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.handleDeepLinkAsync(`ms-apps://${appId}?${params}`));\r\n        })","duration":4},{"title":"0 actions are called","status":"pass","exception":{},"rawTitle":"0 actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-3ryfojsebn-jkpvmoj5ao","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"We handle the case when a deep link is trying to open an app that is already open.","description":"","tags":[],"sequence":3,"id":"liinpstuot-3ryfojsebn"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"handleDeepLinkAsync action is called"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"handleDeepLinkAsync action is called","status":"pass","exception":{},"rawTitle":"handleDeepLinkAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-93j021y3wl-dhym0aoexn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.handleDeepLinkAsync(`ms-apps://${appId}?${queryParams}`));\r\n        })","duration":4},{"title":"no actions are taken","status":"pass","exception":{},"rawTitle":"no actions are taken","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-93j021y3wl-16b5npzyrq8","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"We handle the case when a deep link is trying to open an app that is already open, and user has set restart query parameter to false.","description":"","tags":[],"sequence":4,"id":"liinpstuot-93j021y3wl"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"handleDeepLinkAsync action is called"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"handleDeepLinkAsync action is called","status":"pass","exception":{},"rawTitle":"handleDeepLinkAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-mwoctelzk0-dhym0aoexn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.handleDeepLinkAsync(`ms-apps://${appId}?${queryParams}`));\r\n        })","duration":21},{"title":"openAppHostAsync is dispatched, which equates to the 6 simple actions","status":"pass","exception":{},"rawTitle":"openAppHostAsync is dispatched, which equates to the 6 simple actions","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-mwoctelzk0-mpt5eyfha3","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(6);\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            const expectedActionsTypes = [\r\n                `${Actions.updateOpenAppInProgress}`,\r\n                `${Actions.updateAppOpeningStage}`,\r\n                `${Actions.updateOpenAppScenarioGuid}`,\r\n                `${Actions.updateSplashScreenScenarioGuid}`,\r\n                `${Actions.updatePublishedAppInfo}`,\r\n                `${Actions.navigateToAppHost}`\r\n            ];\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0},{"title":"updatePublishedAppInfo should be called with a query only including the appId","status":"pass","exception":{},"rawTitle":"updatePublishedAppInfo should be called with a query only including the appId","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"liinpstuot-mwoctelzk0-jkpglfhtog","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[4].payload[\"params\"].should.be.eql(queryParams);\r\n        }","duration":0}],"title":"We handle the case when a deep link is trying to open an app that is already open, and user has set restart query parameter to true.","description":"","tags":[],"sequence":5,"id":"liinpstuot-mwoctelzk0"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"handleDeepLinkAsync action is called"}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"handleDeepLinkAsync action is called","status":"pass","exception":{},"rawTitle":"handleDeepLinkAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"liinpstuot-md8sqhjw1p-dhym0aoexn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.handleDeepLinkAsync(`https://tip1.web.powerapps.com/webplayer/app?appId=${appId}&other=value`));\r\n        })","duration":12},{"title":"openAppHostAsync is dispatched, which equates to the 6 simple actions","status":"pass","exception":{},"rawTitle":"openAppHostAsync is dispatched, which equates to the 6 simple actions","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"liinpstuot-md8sqhjw1p-mpt5eyfha3","code":"() => {\r\n            const actions = store.getActions();\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            const expectedActionsTypes = [\r\n                `${Actions.updateOpenAppInProgress}`,\r\n                `${Actions.updateAppOpeningStage}`,\r\n                `${Actions.updateOpenAppScenarioGuid}`,\r\n                `${Actions.updateSplashScreenScenarioGuid}`,\r\n                `${Actions.updatePublishedAppInfo}`,\r\n                `${Actions.navigateToAppHost}`\r\n            ];\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":3,"id":"liinpstuot-md8sqhjw1p-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"updatePublishedAppInfo should be called with a query only including the appId","status":"pass","exception":{},"rawTitle":"updatePublishedAppInfo should be called with a query only including the appId","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"liinpstuot-md8sqhjw1p-jkpglfhtog","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[4].payload[\"params\"].should.be.eql(`appId=${appId}`);\r\n        }","duration":0}],"title":"We handle the case when a deep link with the webplayer path is clicked","description":"","tags":[],"sequence":6,"id":"liinpstuot-md8sqhjw1p"}],"title":"PowerApps DeepLinking.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/DeepLinksActions.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"liinpstuot-9pbsb4-j3fzkukkqr","code":"() => {\r\n            mockLinkingProvider = new MockLinkingProvider();\r\n            playerResourcesCdnPathStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"playerResourcesCdnPath\", {\r\n                get: function get() {\r\n                    return \"\";\r\n                }\r\n            });\r\n            trackScenarioStub.setup();\r\n            appInfo = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            appInfo.appId = appId;\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ILinkingProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.InstallServiceFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IEnrollmentService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IEnrollmentService).toConstantValue(new Mocks_1.EnrollmentMockService());\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ILinkingProvider).toConstantValue(mockLinkingProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.InstallServiceFactory).toFactory((context) => {\r\n                return (playerResourcesDomain) => {\r\n                    return new Mocks_1.InstallMockService();\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(new Mocks_1.AppCatalogMockService());\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n        }","duration":13}],"title":"","description":"","tags":[],"id":"liinpstuot-9pbsb4"},"id":"liinpstuot","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":31,"failedCount":0,"pendingCount":0,"totalCount":31,"totalRuleViolations":0,"duration":19,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has a plan","status":"pass","exception":{},"rawTitle":"the user has a plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-obl4cfhbdh-oda35jp3er","code":"() => {\r\n            enrollStub = sinon.stub(enrollmentService, enrollmentService.enrollAsync.name).returns(true);\r\n            expiredPlanStub = sinon.stub(enrollmentService, enrollmentService.hasExpiredPremiumPlan.name).returns(false);\r\n        }","duration":4},{"title":"updateEnrollmentStatusAsync action is called","status":"pass","exception":{},"rawTitle":"updateEnrollmentStatusAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-obl4cfhbdh-3au5fryzej","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateEnrollmentStatusAsync());\r\n        })","duration":1},{"title":"IEnrollmentService.enrollAsync is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.enrollAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwplb8gnkg-obl4cfhbdh-jkpznw82kw","code":"() => {\r\n            enrollStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IEnrollmentService.hasExpiredPremiumPlan is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.hasExpiredPremiumPlan is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-obl4cfhbdh-f9tlxlg611","code":"() => {\r\n            expiredPlanStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple action with the correct types are called","status":"pass","exception":{},"rawTitle":"2 simple action with the correct types are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwplb8gnkg-obl4cfhbdh-10k38tm5crp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.updateEnrollmentStatusAsync), Utilities.fulfilled(Actions.updateEnrollmentStatusAsync)];\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwplb8gnkg-obl4cfhbdh-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[1];\r\n            action.payload.should.be.eql(Shared_1.EnrollmentStateType.Enrolled);\r\n        }","duration":1}],"title":"The user attempts to enroll","description":"","tags":[],"sequence":1,"id":"mwplb8gnkg-obl4cfhbdh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an expired plan","status":"pass","exception":{},"rawTitle":"the user has an expired plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-obl4cfhbdh-16b6bwc4t1c","code":"() => {\r\n            enrollStub = sinon.stub(enrollmentService, enrollmentService.enrollAsync.name).returns(false);\r\n            expiredPlanStub = sinon.stub(enrollmentService, enrollmentService.hasExpiredPremiumPlan.name).returns(true);\r\n        }","duration":2},{"title":"updateEnrollmentStatusAsync action is called","status":"pass","exception":{},"rawTitle":"updateEnrollmentStatusAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-obl4cfhbdh-3au5fryzej","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateEnrollmentStatusAsync());\r\n        })","duration":1},{"title":"IEnrollmentService.enrollAsync is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.enrollAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwplb8gnkg-obl4cfhbdh-jkpznw82kw","code":"() => {\r\n            enrollStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"IEnrollmentService.hasExpiredPremiumPlan is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.hasExpiredPremiumPlan is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-obl4cfhbdh-f9tlxlg611","code":"() => {\r\n            expiredPlanStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple action with the correct types are called","status":"pass","exception":{},"rawTitle":"2 simple action with the correct types are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwplb8gnkg-obl4cfhbdh-10k38tm5crp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.updateEnrollmentStatusAsync), Utilities.fulfilled(Actions.updateEnrollmentStatusAsync)];\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":1},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwplb8gnkg-obl4cfhbdh-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[1];\r\n            action.payload.should.be.eql(Shared_1.EnrollmentStateType.PremiumPlanExpired);\r\n        }","duration":0}],"title":"The user attempts to enroll","description":"","tags":[],"sequence":2,"id":"mwplb8gnkg-obl4cfhbdh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has no plan","status":"pass","exception":{},"rawTitle":"the user has no plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-obl4cfhbdh-byamhbxaol","code":"() => {\r\n            enrollStub = sinon.stub(enrollmentService, enrollmentService.enrollAsync.name).returns(false);\r\n            expiredPlanStub = sinon.stub(enrollmentService, enrollmentService.hasExpiredPremiumPlan.name).returns(false);\r\n        }","duration":1},{"title":"updateEnrollmentStatusAsync action is called","status":"pass","exception":{},"rawTitle":"updateEnrollmentStatusAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-obl4cfhbdh-3au5fryzej","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.updateEnrollmentStatusAsync());\r\n        })","duration":1},{"title":"IEnrollmentService.enrollAsync is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.enrollAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwplb8gnkg-obl4cfhbdh-jkpznw82kw","code":"() => {\r\n            enrollStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"IEnrollmentService.hasExpiredPremiumPlan is called","status":"pass","exception":{},"rawTitle":"IEnrollmentService.hasExpiredPremiumPlan is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-obl4cfhbdh-f9tlxlg611","code":"() => {\r\n            expiredPlanStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"2 simple action with the correct types are called","status":"pass","exception":{},"rawTitle":"2 simple action with the correct types are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"mwplb8gnkg-obl4cfhbdh-10k38tm5crp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.updateEnrollmentStatusAsync), Utilities.fulfilled(Actions.updateEnrollmentStatusAsync)];\r\n            Utilities_1.actionsMatchTypesList(actions, expectedActionsTypes).should.be.eql(true);\r\n        }","duration":0},{"title":"the second action has the right payload","status":"pass","exception":{},"rawTitle":"the second action has the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwplb8gnkg-obl4cfhbdh-itj6trsn91","code":"() => {\r\n            const actions = store.getActions();\r\n            const action = actions[1];\r\n            action.payload.should.be.eql(Shared_1.EnrollmentStateType.PlanRequired);\r\n        }","duration":0}],"title":"The user attempts to enroll","description":"","tags":[],"sequence":3,"id":"mwplb8gnkg-obl4cfhbdh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has no plan","status":"pass","exception":{},"rawTitle":"the user has no plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-37efq6414t-byamhbxaol","code":"() => {\r\n            enrollStub = sinon.stub(enrollmentService, enrollmentService.waitForTrialLicenseStatusAsync.name).returns(false);\r\n        }","duration":1},{"title":"checkEnrollmentPlanAsync action is called","status":"pass","exception":{},"rawTitle":"checkEnrollmentPlanAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-37efq6414t-6ejfzxfvhn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.checkEnrollmentPlanAsync());\r\n        })","duration":1},{"title":"runtime checkEnrollmentPlanAsync API is called","status":"pass","exception":{},"rawTitle":"runtime checkEnrollmentPlanAsync API is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwplb8gnkg-37efq6414t-65098bnni5","code":"() => {\r\n            enrollStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the result should be false","status":"pass","exception":{},"rawTitle":"the result should be false","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-37efq6414t-h2gh7krktn","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.checkEnrollmentPlanAsync), Utilities.fulfilled(Actions.checkEnrollmentPlanAsync)];\r\n            const action = actions[1];\r\n            action.payload.should.be.eql(false);\r\n        }","duration":0}],"title":"Check User enrollment status","description":"","tags":[],"sequence":4,"id":"mwplb8gnkg-37efq6414t"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has valid plan","status":"pass","exception":{},"rawTitle":"the user has valid plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-37efq6414t-158kby7kyyz","code":"() => {\r\n            enrollStub = sinon.stub(enrollmentService, enrollmentService.waitForTrialLicenseStatusAsync.name).returns(true);\r\n        }","duration":1},{"title":"checkEnrollmentPlanAsync action is called","status":"pass","exception":{},"rawTitle":"checkEnrollmentPlanAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-37efq6414t-6ejfzxfvhn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.checkEnrollmentPlanAsync());\r\n        })","duration":0},{"title":"runtime checkEnrollmentPlanAsync API is called","status":"pass","exception":{},"rawTitle":"runtime checkEnrollmentPlanAsync API is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwplb8gnkg-37efq6414t-65098bnni5","code":"() => {\r\n            enrollStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the result should be true","status":"pass","exception":{},"rawTitle":"the result should be true","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-37efq6414t-lqwmzt1gu8","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.checkEnrollmentPlanAsync), Utilities.fulfilled(Actions.checkEnrollmentPlanAsync)];\r\n            const action = actions[1];\r\n            action.payload.should.be.eql(true);\r\n        }","duration":0}],"title":"Check User enrollment status","description":"","tags":[],"sequence":5,"id":"mwplb8gnkg-37efq6414t"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has valid plan","status":"pass","exception":{},"rawTitle":"the user has valid plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-16b8pxwx4e8-158kby7kyyz","code":"() => {\r\n            upgradeOrRenewPlanStub = sinon.stub(enrollmentService, enrollmentService.upgradeOrRenewPlanAsync.name);\r\n        }","duration":1},{"title":"upgradeOrRenewPlanAsync action is called","status":"pass","exception":{},"rawTitle":"upgradeOrRenewPlanAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mwplb8gnkg-16b8pxwx4e8-jkr43swadc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.upgradeOrRenewPlanAsync());\r\n        })","duration":1},{"title":"runtime upgradeOrRenewPlanAsync API is called","status":"pass","exception":{},"rawTitle":"runtime upgradeOrRenewPlanAsync API is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwplb8gnkg-16b8pxwx4e8-jz2xwgkvzp","code":"() => {\r\n            upgradeOrRenewPlanStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the actions should happen","status":"pass","exception":{},"rawTitle":"the actions should happen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mwplb8gnkg-16b8pxwx4e8-nwdrwdmlz1","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [Utilities.pending(Actions.checkEnrollmentPlanAsync), Utilities.fulfilled(Actions.checkEnrollmentPlanAsync)];\r\n        }","duration":1}],"title":"User upgrades or renews plan","description":"","tags":[],"sequence":6,"id":"mwplb8gnkg-16b8pxwx4e8"}],"title":"Power Apps Enrollment.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/EnrollmentActions.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwplb8gnkg-9pbsb4-j3fzkukkqr","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IEnrollmentService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IEnrollmentService).toConstantValue(enrollmentService);\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"mwplb8gnkg-9pbsb4"},"id":"mwplb8gnkg","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":67,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":67,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":8},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is XS","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-t8lzf8nb3p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":10},{"title":"the device should be set to the PortraitLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-8n81qvmust","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"tables":[{"name":"App Catalog screen is active","description":"","dataTable":[["Size","Orientation","Active Route"],["XS","PortraitLocked","Home"],["SM","PortraitLocked","Home"],["MD","Unlocked","Home"],["LG","Unlocked","Home"],["XL","Unlocked","Home"]]},{"name":"App Catalog is not active","description":"","dataTable":[["Size","Orientation","Active Route"],["XS","Unlocked","PublishedAppHost"],["XS","Unlocked","PublishedAppHost"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":8},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is XS","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-t8lzf8nb3p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":10},{"title":"the device should be set to the PortraitLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-8n81qvmust","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"XS","Orientation":"PortraitLocked","ActiveRoute":"Home"},"title":"The user opens the player","sequence":1,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":3},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is SM","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-t0sub0vq25","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":4},{"title":"the device should be set to the PortraitLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-8n81qvmust","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"SM","Orientation":"PortraitLocked","ActiveRoute":"Home"},"title":"The user opens the player","sequence":2,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":3},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is MD","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-hscxwe0ip1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":5},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"MD","Orientation":"Unlocked","ActiveRoute":"Home"},"title":"The user opens the player","sequence":3,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":3},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is LG","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-jncvegha5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":4},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"LG","Orientation":"Unlocked","ActiveRoute":"Home"},"title":"The user opens the player","sequence":4,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":2},{"title":"the active screen/route is Home","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-lr0lvkpdio","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is XL","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-qbbdelmzv1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":4},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"XL","Orientation":"Unlocked","ActiveRoute":"Home"},"title":"The user opens the player","sequence":5,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":2},{"title":"the active screen/route is PublishedAppHost","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-pbzuibdzk5","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":0},{"title":"opening the app on a device that is XS","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-t8lzf8nb3p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":7},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"XS","Orientation":"Unlocked","ActiveRoute":"PublishedAppHost"},"title":"The user opens the player","sequence":6,"id":"cn8z2nvlts-tsc8td5g77"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently closed","status":"pass","exception":{},"rawTitle":"the app is currently closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8z2nvlts-tsc8td5g77-itj0us3hjf","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.ISettingsProviderFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.ISettingsProviderFactory).toConstantValue(new MockSettingsProviderFactory_1.MockSettingsProviderFactory());\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IA11yService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IA11yService).toConstantValue(Mocks_2.MockAccessibilityServiceInstance);\r\n            initializeCoreEnvironmentStub = sinon.stub(Adapters_1.EnvironmentAdapter, Adapters_1.EnvironmentAdapter.initializeCoreEnvironment.name);\r\n            initializeLoggingStub = sinon.stub(Adapters_1.LoggingAdapter, Adapters_1.LoggingAdapter.initializeLogging.name);\r\n            setDeviceInformationStub = sinon.stub(Core.Telemetry.Log, \"setDeviceInformation\");\r\n            loadRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"loadAsync\");\r\n            cordovaRouterSetupStub = sinon.stub(Services.CordovaPluginRouterService, Services.CordovaPluginRouterService.setup.name);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: deviceInfoProvider.getDeviceInfoAsync(),\r\n                    NavigationState: { index: 0, routes: [{ key: scenarioOutlineContext.example.ActiveRoute, routeName: scenarioOutlineContext.example.ActiveRoute }] },\r\n                    AuthenticationState: {\r\n                        authState: Shared_1.AuthStateType.Authenticated\r\n                    }\r\n                };\r\n            });\r\n        }","duration":4},{"title":"the active screen/route is PublishedAppHost","status":"pass","exception":{},"rawTitle":"the active screen/route is <Active Route>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"cn8z2nvlts-tsc8td5g77-pbzuibdzk5","code":"() => {\r\n            // No op for informational purposes only\r\n        }","duration":1},{"title":"opening the app on a device that is XS","status":"pass","exception":{},"rawTitle":"opening the app on a device that is <Size>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"cn8z2nvlts-tsc8td5g77-t8lzf8nb3p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set the screen size\r\n            deviceInfoProvider.setScreenInfo(Mocks_2.getScreenInfoByRelativeSize(scenarioOutlineContext.example.Size));\r\n            yield store.dispatch(new Actions_1.BootstrapPlayerAction());\r\n        })","duration":7},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <Orientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"cn8z2nvlts-tsc8td5g77-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.Orientation);\r\n        }","duration":0}],"example":{"Size":"XS","Orientation":"Unlocked","ActiveRoute":"PublishedAppHost"},"title":"The user opens the player","sequence":7,"id":"cn8z2nvlts-tsc8td5g77"}],"title":"The user opens the player","description":"","tags":[]}],"title":"Ensure small devices are locked to portrait while in the App Host","description":"To provide a better user experience devices with small screens need to be restricted to only using portrait mode.\nThe UI doesn't support a good experience while the keyboard is visible and in landscape. This restriction is not\napplied however while inside a published app.\n\nRules:\n    * If a small device (phone) lock orientation to portrait while on the signin screen an other App Host screens.\n    * If not a small device allow rotation\n    * Ensure rules are re-applied when returning to the App Host after closing a published app.\n    * If deep linking to another application then honor the orientation of the new app.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/EnvironmentActions.Spec.js","id":"cn8z2nvlts","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app has the settings Orientation:Landscape with lock orientation set to:true","status":"pass","exception":{},"rawTitle":"an app has the settings Orientation:<Orientation> with lock orientation set to:<LockOrientation>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkq6u9fueo-dhym5hdqar-lqwcc0zmww","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            const isLandscape = scenarioOutlineContext.example.Orientation === \"Landscape\";\r\n            const lockOrientation = scenarioOutlineContext.example.LockOrientation;\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            supportsPortrait: !isLandscape || !lockOrientation,\r\n                            supportsLandscape: isLandscape || !lockOrientation,\r\n                        }\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"opening the app","status":"pass","exception":{},"rawTitle":"opening the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkq6u9fueo-dhym5hdqar-xaafhm14x7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set teh screen size\r\n            // The height is not used in any calcs so it can be anything\r\n            yield store.dispatch(Actions_1.initializeInstalledAppOrientation());\r\n        })","duration":1},{"title":"the device should be set to the LandscapeLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <ExpectedOrientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkq6u9fueo-dhym5hdqar-12k4p6q1oot","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.ExpectedOrientation);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["Orientation","LockOrientation","ExpectedOrientation"],["Landscape","true","LandscapeLocked"],["Landscape","false","Unlocked"],["Portrait","true","PortraitLocked"],["Portrait","false","Unlocked"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app has the settings Orientation:Landscape with lock orientation set to:true","status":"pass","exception":{},"rawTitle":"an app has the settings Orientation:<Orientation> with lock orientation set to:<LockOrientation>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkq6u9fueo-dhym5hdqar-lqwcc0zmww","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            const isLandscape = scenarioOutlineContext.example.Orientation === \"Landscape\";\r\n            const lockOrientation = scenarioOutlineContext.example.LockOrientation;\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            supportsPortrait: !isLandscape || !lockOrientation,\r\n                            supportsLandscape: isLandscape || !lockOrientation,\r\n                        }\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"opening the app","status":"pass","exception":{},"rawTitle":"opening the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkq6u9fueo-dhym5hdqar-xaafhm14x7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set teh screen size\r\n            // The height is not used in any calcs so it can be anything\r\n            yield store.dispatch(Actions_1.initializeInstalledAppOrientation());\r\n        })","duration":1},{"title":"the device should be set to the LandscapeLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <ExpectedOrientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkq6u9fueo-dhym5hdqar-12k4p6q1oot","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.ExpectedOrientation);\r\n        }","duration":1}],"example":{"Orientation":"Landscape","LockOrientation":true,"ExpectedOrientation":"LandscapeLocked"},"title":"The has the following orientation settings defined","sequence":1,"id":"jkq6u9fueo-dhym5hdqar"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app has the settings Orientation:Landscape with lock orientation set to:false","status":"pass","exception":{},"rawTitle":"an app has the settings Orientation:<Orientation> with lock orientation set to:<LockOrientation>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkq6u9fueo-dhym5hdqar-15wfw70utt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            const isLandscape = scenarioOutlineContext.example.Orientation === \"Landscape\";\r\n            const lockOrientation = scenarioOutlineContext.example.LockOrientation;\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            supportsPortrait: !isLandscape || !lockOrientation,\r\n                            supportsLandscape: isLandscape || !lockOrientation,\r\n                        }\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"opening the app","status":"pass","exception":{},"rawTitle":"opening the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkq6u9fueo-dhym5hdqar-xaafhm14x7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set teh screen size\r\n            // The height is not used in any calcs so it can be anything\r\n            yield store.dispatch(Actions_1.initializeInstalledAppOrientation());\r\n        })","duration":0},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <ExpectedOrientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkq6u9fueo-dhym5hdqar-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.ExpectedOrientation);\r\n        }","duration":0}],"example":{"Orientation":"Landscape","LockOrientation":false,"ExpectedOrientation":"Unlocked"},"title":"The has the following orientation settings defined","sequence":2,"id":"jkq6u9fueo-dhym5hdqar"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app has the settings Orientation:Portrait with lock orientation set to:true","status":"pass","exception":{},"rawTitle":"an app has the settings Orientation:<Orientation> with lock orientation set to:<LockOrientation>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkq6u9fueo-dhym5hdqar-lr1iihhckw","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            const isLandscape = scenarioOutlineContext.example.Orientation === \"Landscape\";\r\n            const lockOrientation = scenarioOutlineContext.example.LockOrientation;\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            supportsPortrait: !isLandscape || !lockOrientation,\r\n                            supportsLandscape: isLandscape || !lockOrientation,\r\n                        }\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"opening the app","status":"pass","exception":{},"rawTitle":"opening the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkq6u9fueo-dhym5hdqar-xaafhm14x7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set teh screen size\r\n            // The height is not used in any calcs so it can be anything\r\n            yield store.dispatch(Actions_1.initializeInstalledAppOrientation());\r\n        })","duration":0},{"title":"the device should be set to the PortraitLocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <ExpectedOrientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkq6u9fueo-dhym5hdqar-8n81qvmust","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.ExpectedOrientation);\r\n        }","duration":0}],"example":{"Orientation":"Portrait","LockOrientation":true,"ExpectedOrientation":"PortraitLocked"},"title":"The has the following orientation settings defined","sequence":3,"id":"jkq6u9fueo-dhym5hdqar"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app has the settings Orientation:Portrait with lock orientation set to:false","status":"pass","exception":{},"rawTitle":"an app has the settings Orientation:<Orientation> with lock orientation set to:<LockOrientation>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkq6u9fueo-dhym5hdqar-falnmvsgg3","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOrientationProvider);\r\n            orientationProvider = new Mocks_1.OrientationMockProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOrientationProvider).toConstantValue(orientationProvider);\r\n            const isLandscape = scenarioOutlineContext.example.Orientation === \"Landscape\";\r\n            const lockOrientation = scenarioOutlineContext.example.LockOrientation;\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    PublishedAppHostState: {\r\n                        appInfo: {\r\n                            supportsPortrait: !isLandscape || !lockOrientation,\r\n                            supportsLandscape: isLandscape || !lockOrientation,\r\n                        }\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"opening the app","status":"pass","exception":{},"rawTitle":"opening the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkq6u9fueo-dhym5hdqar-xaafhm14x7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Set teh screen size\r\n            // The height is not used in any calcs so it can be anything\r\n            yield store.dispatch(Actions_1.initializeInstalledAppOrientation());\r\n        })","duration":0},{"title":"the device should be set to the Unlocked position","status":"pass","exception":{},"rawTitle":"the device should be set to the <ExpectedOrientation> position","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkq6u9fueo-dhym5hdqar-16b209cr02o","code":"() => {\r\n            const position = Mocks_1.OrientationPosition[orientationProvider.orientation];\r\n            position.should.be.equal(scenarioOutlineContext.example.ExpectedOrientation);\r\n        }","duration":0}],"example":{"Orientation":"Portrait","LockOrientation":false,"ExpectedOrientation":"Unlocked"},"title":"The has the following orientation settings defined","sequence":4,"id":"jkq6u9fueo-dhym5hdqar"}],"title":"The has the following orientation settings defined","description":"","tags":[]}],"title":"Ensure published apps orientation settings are enabled","description":"Published apps have the option to set the orientation options to suit their application.\n\nRules:\n    Apps can set the following options:\n      * Define the default orientation ie Portrait/Landscape\n      * Enable locking the orientation preventing the device from rotating","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/EnvironmentActions.Spec.js","id":"jkq6u9fueo","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":4,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":2,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player is initialized","status":"pass","exception":{},"rawTitle":"the player is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a54nct72cg-14gd8qf23rv-pwyg2cvrt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            let now = new Date();\r\n            let later = new Date();\r\n            later.setHours(now.getHours() + 1);\r\n            setAppSuspendStartTimeStub = sinon.stub(Core.Telemetry.Log, \"setAppSuspendStartTime\").returns(now.getTime());\r\n            getOpenAppStartTimeStub = sinon.stub(Core.Telemetry.Log, \"getOpenAppStartTime\").returns(later.getTime());\r\n            markAllActiveScopesSuspendedStub = sinon.stub(Core.PerformanceTracker, \"markAllActiveScopesSuspended\");\r\n            startScenarioStub = sinon.stub(Core.Telemetry.Log, \"startScenario\").returns(scenarioGuid);\r\n            isOpenAppEventStartedStub = sinon.stub(Core.Telemetry.Log, \"isOpenAppEventStarted\").returns(true);\r\n            endScenarioStub = sinon.stub(Core.Telemetry.Log, \"endScenario\");\r\n            setAppSuspendedTimeStub = sinon.stub(Core.Telemetry.Log, \"setAppSuspendedTime\");\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {};\r\n            });\r\n        }","duration":5},{"title":"the appstate changes to background","status":"pass","exception":{},"rawTitle":"the appstate changes to background","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"a54nct72cg-14gd8qf23rv-x0di9ahcr7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync()); // \"initializeEnvironmentAsync\" sets the appState listener\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"background\");\r\n        })","duration":1},{"title":"markAllActiveScopesSuspended should be called once","status":"pass","exception":{},"rawTitle":"markAllActiveScopesSuspended should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"a54nct72cg-14gd8qf23rv-lr02pc7334","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            markAllActiveScopesSuspendedStub.calledOnce.should.be.eql(true);\r\n        })","duration":0},{"title":"startScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"startScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"a54nct72cg-14gd8qf23rv-ys8guyz6vh","code":"() => {\r\n            startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the appstate changes to foreground","status":"pass","exception":{},"rawTitle":"the appstate changes to foreground","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The client goes to background and later an app is opened (pinned/attachment), suspended time should not be set in the OpenAppData.Success telemetry event's properties"}],"type":"When","sequence":5,"id":"a54nct72cg-14gd8qf23rv-itj7c7v5wd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"active\");\r\n        })","duration":0},{"title":"isOpenAppEventStarted should be called once","status":"pass","exception":{},"rawTitle":"isOpenAppEventStarted should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The client goes to background and later an app is opened (pinned/attachment), suspended time should not be set in the OpenAppData.Success telemetry event's properties"}],"type":"Then","sequence":6,"id":"a54nct72cg-14gd8qf23rv-diqyzzrn31","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            isOpenAppEventStartedStub.calledOnce.should.be.eql(true);\r\n        })","duration":0},{"title":"endScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"endScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"a54nct72cg-14gd8qf23rv-12z0ekk64z","code":"() => {\r\n            endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"suspend start time is set","status":"pass","exception":{},"rawTitle":"suspend start time is set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"a54nct72cg-14gd8qf23rv-14h9lx9i5tn","code":"() => {\r\n            setAppSuspendStartTimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"openAppStartTime was fetched","status":"pass","exception":{},"rawTitle":"openAppStartTime was fetched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"a54nct72cg-14gd8qf23rv-jkpcasd800","code":"() => {\r\n            getOpenAppStartTimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"update the time taken to open an app","status":"pass","exception":{},"rawTitle":"update the time taken to open an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"a54nct72cg-14gd8qf23rv-184ie0t7he5","code":"() => {\r\n            setAppSuspendedTimeStub.called.should.be.eql(false);\r\n        }","duration":0}],"title":"The client goes to background and later an app is opened (pinned/attachment), suspended time should not be set in the OpenAppData.Success telemetry event's properties","description":"","tags":[],"sequence":1,"id":"a54nct72cg-14gd8qf23rv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":2,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player is initialized","status":"pass","exception":{},"rawTitle":"the player is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a54nct72cg-hw79pqokkz-pwyg2cvrt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            let now = new Date();\r\n            let later = new Date();\r\n            later.setHours(now.getHours() + 1);\r\n            setAppSuspendStartTimeStub = sinon.stub(Core.Telemetry.Log, \"setAppSuspendStartTime\").returns(later.getTime());\r\n            getOpenAppStartTimeStub = sinon.stub(Core.Telemetry.Log, \"getOpenAppStartTime\").returns(now.getTime());\r\n            markAllActiveScopesSuspendedStub = sinon.stub(Core.PerformanceTracker, \"markAllActiveScopesSuspended\");\r\n            startScenarioStub = sinon.stub(Core.Telemetry.Log, \"startScenario\").returns(scenarioGuid);\r\n            isOpenAppEventStartedStub = sinon.stub(Core.Telemetry.Log, \"isOpenAppEventStarted\").returns(true);\r\n            endScenarioStub = sinon.stub(Core.Telemetry.Log, \"endScenario\");\r\n            setAppSuspendedTimeStub = sinon.stub(Core.Telemetry.Log, \"setAppSuspendedTime\");\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {};\r\n            });\r\n        }","duration":4},{"title":"the appstate changes to background","status":"pass","exception":{},"rawTitle":"the appstate changes to background","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"a54nct72cg-hw79pqokkz-x0di9ahcr7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync()); // \"initializeEnvironmentAsync\" sets the appState listener\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"background\");\r\n        })","duration":1},{"title":"markAllActiveScopesSuspended should be called once","status":"pass","exception":{},"rawTitle":"markAllActiveScopesSuspended should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"a54nct72cg-hw79pqokkz-lr02pc7334","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            markAllActiveScopesSuspendedStub.calledOnce.should.be.eql(true);\r\n        })","duration":0},{"title":"startScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"startScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"a54nct72cg-hw79pqokkz-ys8guyz6vh","code":"() => {\r\n            startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"the appstate changes to foreground","status":"pass","exception":{},"rawTitle":"the appstate changes to foreground","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"An app is opened and then the client goes to background, make sure the suspend time is set in the OpenAppData.Success telemetry event's properties"}],"type":"When","sequence":5,"id":"a54nct72cg-hw79pqokkz-itj7c7v5wd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"active\");\r\n        })","duration":0},{"title":"isOpenAppEventStarted should be called once","status":"pass","exception":{},"rawTitle":"isOpenAppEventStarted should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"An app is opened and then the client goes to background, make sure the suspend time is set in the OpenAppData.Success telemetry event's properties"}],"type":"Then","sequence":6,"id":"a54nct72cg-hw79pqokkz-diqyzzrn31","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            isOpenAppEventStartedStub.calledOnce.should.be.eql(true);\r\n        })","duration":0},{"title":"endScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"endScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"a54nct72cg-hw79pqokkz-12z0ekk64z","code":"() => {\r\n            endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"suspend start time is set","status":"pass","exception":{},"rawTitle":"suspend start time is set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"a54nct72cg-hw79pqokkz-14h9lx9i5tn","code":"() => {\r\n            setAppSuspendStartTimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"openAppStartTime was fetched","status":"pass","exception":{},"rawTitle":"openAppStartTime was fetched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"a54nct72cg-hw79pqokkz-jkpcasd800","code":"() => {\r\n            getOpenAppStartTimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"update the time taken to open an app","status":"pass","exception":{},"rawTitle":"update the time taken to open an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"a54nct72cg-hw79pqokkz-184ie0t7he5","code":"() => {\r\n            setAppSuspendedTimeStub.called.should.be.eql(true);\r\n        }","duration":0}],"title":"An app is opened and then the client goes to background, make sure the suspend time is set in the OpenAppData.Success telemetry event's properties","description":"","tags":[],"sequence":2,"id":"a54nct72cg-hw79pqokkz"}],"title":"Ensure that the suspendedTime gets set correctly in the telemetry event - openAppData.Success properties","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/EnvironmentActions.Spec.js","id":"a54nct72cg","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":3,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player initializes","status":"pass","exception":{},"rawTitle":"the player initializes","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkn66x9k5s-lr0blxurww-a2qvne1bhh","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            deviceInfoProvider.setDeviceConnectivity(true);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: {\r\n                        initializedConnectivity: false\r\n                    },\r\n                };\r\n            });\r\n        }","duration":1},{"title":"device intializes","status":"pass","exception":{},"rawTitle":"device intializes","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkn66x9k5s-lr0blxurww-a5a3yk5xwg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateNetworkConnectionInfoStub = sinon.stub(Core.Telemetry.Log, \"updateNetworkConnectionInfo\");\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync());\r\n            yield deviceInfoProvider.runNetworkConnectivityChangeListener(true);\r\n        })","duration":2},{"title":"updateNetworkConnectionInfo should be called","status":"pass","exception":{},"rawTitle":"updateNetworkConnectionInfo should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkn66x9k5s-lr0blxurww-o53i2lmqsb","code":"() => {\r\n            updateNetworkConnectionInfoStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"initialization should complete and we should NOT fetch the app list","status":"pass","exception":{},"rawTitle":"initialization should complete and we should NOT fetch the app list","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The first time the network connection changes, it is ignored, since we are setting it to its current value"}],"type":"Then","sequence":4,"id":"jkn66x9k5s-lr0blxurww-cn73hv3akg","code":"() => {\r\n            let actions = store.getActions();\r\n            actions[actions.length - 1].type.should.be.equal(`${Actions_1.initializeConnectivity}`);\r\n        }","duration":0}],"title":"The first time the network connection changes, it is ignored, since we are setting it to its current value","description":"","tags":[],"sequence":1,"id":"jkn66x9k5s-lr0blxurww"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player is initialized","status":"pass","exception":{},"rawTitle":"the player is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkn66x9k5s-4ngyfmp8f1-pwyg2cvrt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            deviceInfoProvider.setDeviceConnectivity(true);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: {\r\n                        initializedConnectivity: true\r\n                    },\r\n                    AppCatalogState: {\r\n                        appType: 1\r\n                    }\r\n                };\r\n            });\r\n        }","duration":0},{"title":"the connectivity changes to OFF","status":"pass","exception":{},"rawTitle":"the connectivity changes to OFF","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkn66x9k5s-4ngyfmp8f1-epy2fbqkkl","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync()); // \"initializeEnvironmentAsync\" sets the network listener\r\n            yield deviceInfoProvider.runNetworkConnectivityChangeListener(false);\r\n        })","duration":1},{"title":"initialization should not be called","status":"pass","exception":{},"rawTitle":"initialization should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkn66x9k5s-4ngyfmp8f1-12yyuxqs0r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let actions = store.getActions();\r\n            actions[actions.length - 2].type.should.not.be.equal(`${Actions_1.initializeConnectivity}`);\r\n            actions[actions.length - 1].type.should.be.equal(Utilities_2.rejected(Actions_1.fetchAppListAsync));\r\n        })","duration":1}],"title":"The second time the network connection changes, it is ignored, since we are setting it to its current value","description":"","tags":[],"sequence":2,"id":"jkn66x9k5s-4ngyfmp8f1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player is initialized","status":"pass","exception":{},"rawTitle":"the player is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkn66x9k5s-4ngyfmp8f1-pwyg2cvrt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            deviceInfoProvider.setDeviceConnectivity(false);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    EnvironmentState: {\r\n                        initializedConnectivity: true\r\n                    },\r\n                    AppCatalogState: {\r\n                        appType: 1\r\n                    }\r\n                };\r\n            });\r\n        }","duration":0},{"title":"the connectivity changes to ON","status":"pass","exception":{},"rawTitle":"the connectivity changes to ON","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkn66x9k5s-4ngyfmp8f1-lip4zjoxnk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync()); // \"initializeEnvironmentAsync\" sets the network listener\r\n            yield deviceInfoProvider.runNetworkConnectivityChangeListener(false);\r\n        })","duration":1},{"title":"initialization should not be called","status":"pass","exception":{},"rawTitle":"initialization should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkn66x9k5s-4ngyfmp8f1-12yyuxqs0r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let actions = store.getActions();\r\n            // \"below is the result of switchAppTypeAndFetchAppListAsync\"\r\n            actions[actions.length - 3].type.should.be.equal(`${Actions_1.switchAppType}`);\r\n            actions[actions.length - 2].type.should.be.equal(Utilities_2.pending(Actions_1.fetchAppListAsync));\r\n            actions[actions.length - 1].type.should.be.equal(Utilities_2.rejected(Actions_1.fetchAppListAsync));\r\n        })","duration":0}],"title":"The second time the network connection changes, it is ignored, since we are setting it to its current value","description":"","tags":[],"sequence":3,"id":"jkn66x9k5s-4ngyfmp8f1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":2,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player is initialized","status":"pass","exception":{},"rawTitle":"the player is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkn66x9k5s-mwluhf8c9s-pwyg2cvrt9","code":"() => {\r\n            // Setup the environment\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            markAllActiveScopesSuspendedStub = sinon.stub(Core.PerformanceTracker, \"markAllActiveScopesSuspended\");\r\n            startScenarioStub = sinon.stub(Core.Telemetry.Log, \"startScenario\").returns(scenarioGuid);\r\n            isOpenAppEventStartedStub = sinon.stub(Core.Telemetry.Log, \"isOpenAppEventStarted\").returns(true);\r\n            endScenarioStub = sinon.stub(Core.Telemetry.Log, \"endScenario\");\r\n            setAppSuspendedTimeStub = sinon.stub(Core.Telemetry.Log, \"setAppSuspendedTime\");\r\n            store = Utilities_1.createMockStore(() => {\r\n                return {};\r\n            });\r\n        }","duration":3},{"title":"the appstate changes to background","status":"pass","exception":{},"rawTitle":"the appstate changes to background","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkn66x9k5s-mwluhf8c9s-x0di9ahcr7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield store.dispatch(Actions_1.initializeEnvironmentAsync()); // \"initializeEnvironmentAsync\" sets the appState listener\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"background\");\r\n        })","duration":0},{"title":"markAllActiveScopesSuspended should be called once","status":"pass","exception":{},"rawTitle":"markAllActiveScopesSuspended should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkn66x9k5s-mwluhf8c9s-lr02pc7334","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            markAllActiveScopesSuspendedStub.calledOnce.should.be.eql(true);\r\n        })","duration":0},{"title":"startScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"startScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"jkn66x9k5s-mwluhf8c9s-ys8guyz6vh","code":"() => {\r\n            startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the appstate changes to foreground","status":"pass","exception":{},"rawTitle":"the appstate changes to foreground","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The app goes to background and comes back up, PowerAppsSuspended scenario should be tracked, and the active scenarios should be marked as suspended."}],"type":"When","sequence":5,"id":"jkn66x9k5s-mwluhf8c9s-itj7c7v5wd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            deviceInfoProvider.setCurrentAppState(\"active\");\r\n            yield deviceInfoProvider.runAppStateChangeListner(\"active\");\r\n        })","duration":1},{"title":"isOpenAppEventStarted should be called once","status":"pass","exception":{},"rawTitle":"isOpenAppEventStarted should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"The app goes to background and comes back up, PowerAppsSuspended scenario should be tracked, and the active scenarios should be marked as suspended."}],"type":"Then","sequence":6,"id":"jkn66x9k5s-mwluhf8c9s-diqyzzrn31","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            isOpenAppEventStartedStub.calledOnce.should.be.eql(true);\r\n        })","duration":1},{"title":"endScenario for PowerAppsSuspended should be called","status":"pass","exception":{},"rawTitle":"endScenario for PowerAppsSuspended should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"jkn66x9k5s-mwluhf8c9s-12z0ekk64z","code":"() => {\r\n            endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"update the time taken to open an app","status":"pass","exception":{},"rawTitle":"update the time taken to open an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"jkn66x9k5s-mwluhf8c9s-184ie0t7he5","code":"() => {\r\n            setAppSuspendedTimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The app goes to background and comes back up, PowerAppsSuspended scenario should be tracked, and the active scenarios should be marked as suspended.","description":"","tags":[],"sequence":4,"id":"jkn66x9k5s-mwluhf8c9s"}],"title":"Ensure that initializeConnectivity is only called once and the correct app fetching action is fired afterward","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/EnvironmentActions.Spec.js","id":"jkn66x9k5s","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":80,"failedCount":0,"pendingCount":0,"totalCount":80,"totalRuleViolations":4,"duration":114,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"openAppHostAsync action is called"}],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":1,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"openAppHostAsync action is called","status":"pass","exception":{},"rawTitle":"openAppHostAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-2ruhfo2ycg-kle0x9kjzx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setPlayerAppIdStub = sinon.stub(Core.Telemetry.Log, \"setPlayerAppId\");\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            appId = \"appId\";\r\n            yield store.dispatch(new Actions.OpenAppHostAction({ appId, params }));\r\n        })","duration":8},{"title":"the scenarios should be started","status":"pass","exception":{},"rawTitle":"the scenarios should be started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lgvdnor-2ruhfo2ycg-jkq462y9c0","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the open app scenario should be started","status":"pass","exception":{},"rawTitle":"the open app scenario should be started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-2ruhfo2ycg-jkkl6itcbk","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"the openAppStartEvent function is called","status":"pass","exception":{},"rawTitle":"the openAppStartEvent function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-2ruhfo2ycg-8z6cixaz45","code":"() => {\r\n            openAppStartEventFunction.calledOnce.should.be.eql(true);\r\n            updateOpenAppDataFunction.callCount.should.be.eql(7);\r\n            updateOpenAppDataFunction.firstCall.calledWith({ appId: serverAppInfo.appId }).should.be.eql(true);\r\n            updateOpenAppDataFunction.secondCall.calledWith({ appType: UserAppType }).should.be.eql(true);\r\n            updateOpenAppDataFunction.thirdCall.calledWith({ documentServerVersion: \"{\\\"major\\\":2,\\\"minor\\\":0}\" }).should.be.eql(true);\r\n            updateOpenAppDataFunction.getCall(3).calledWith({ numberOfConnectionReferences: 0 });\r\n            updateOpenAppDataFunction.getCall(4).calledWith({ connectionReferenceCorrelationId: \"6b57e911-788b-440d-adfd-fb8c68d69ca8\" });\r\n        }","duration":0},{"title":"an action should be fired to update that the app is opening","status":"pass","exception":{},"rawTitle":"an action should be fired to update that the app is opening","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-2ruhfo2ycg-q642o65xj4","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateOpenAppInProgress}`);\r\n            actions[0].payload.should.be.eql(true);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-2ruhfo2ycg-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"an action should be fired to update the open app scenario guid","status":"pass","exception":{},"rawTitle":"an action should be fired to update the open app scenario guid","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-2ruhfo2ycg-jkma4rb3tc","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].type.should.be.eql(`${Actions.updateOpenAppScenarioGuid}`);\r\n            actions[2].payload.should.be.eql(scenarioGuid);\r\n        }","duration":0},{"title":"the exit with error should be logged","status":"pass","exception":{},"rawTitle":"the exit with error should be logged","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lgvdnor-2ruhfo2ycg-jks3ew5msg","code":"() => {\r\n            trackEventStub.calledOnce.should.be.eql(true);\r\n            trackEventStub.calledWith(Core.Telemetry.Strings.appOpenInitiated, { \"appId\": serverAppInfo.appId, \"appType\": UserAppType }).should.be.eql(true);\r\n        }","duration":1},{"title":"an action should be fired to update splashscreen","status":"pass","exception":{},"rawTitle":"an action should be fired to update splashscreen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"203lgvdnor-2ruhfo2ycg-16b61wlqpls","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[3].type.should.be.eql(`${Actions.updateSplashScreenScenarioGuid}`);\r\n        }","duration":0},{"title":"the splashscreen scenario should be started","status":"pass","exception":{},"rawTitle":"the splashscreen scenario should be started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"203lgvdnor-2ruhfo2ycg-jkq2xrhegw","code":"() => {\r\n            trackScenarioStub.startScenarioStub.secondCall.calledWith(Core.Telemetry.ScenarioName.PowerAppSplashScreen).should.be.eql(true);\r\n        }","duration":0},{"title":"an action should be fired to update the app info","status":"pass","exception":{},"rawTitle":"an action should be fired to update the app info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"203lgvdnor-2ruhfo2ycg-10t4wduzvz9","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[4].type.should.be.eql(`${Actions.updatePublishedAppInfo}`);\r\n            actions[4].payload.should.be.eql({ appInfo: serverAppInfo, params });\r\n        }","duration":1},{"title":"an action should be fired to navigate to the app host","status":"pass","exception":{},"rawTitle":"an action should be fired to navigate to the app host","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"203lgvdnor-2ruhfo2ycg-oikjbv02kd","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[5].type.should.be.eql(`${Actions.navigateToAppHost}`);\r\n            should.not.exist(actions[5].payload);\r\n        }","duration":0},{"title":"the player app id should be set","status":"pass","exception":{},"rawTitle":"the player app id should be set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"203lgvdnor-2ruhfo2ycg-abpxigpfy3","code":"() => {\r\n            setPlayerAppIdStub.calledOnce.should.be.eql(true);\r\n            setPlayerAppIdStub.firstCall.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"203lgvdnor-2ruhfo2ycg-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(6);\r\n        }","duration":0}],"title":"Opening a published app","description":"","tags":[],"sequence":1,"id":"203lgvdnor-2ruhfo2ycg"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"openAppHostAsync action is called"}],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":1,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"openAppHostAsync action is called","status":"pass","exception":{},"rawTitle":"openAppHostAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-a598f94zi8-kle0x9kjzx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            debounceStub = sinon.stub(Utilities.Debounce, Utilities.Debounce.create.name, (fn, milliseconds, done) => {\r\n                // tslint:disable-next-line:no-unused-expression\r\n                fn && fn();\r\n                // tslint:disable-next-line:no-unused-expression\r\n                done && done();\r\n                return {\r\n                    restart: () => { },\r\n                    cancel: () => { },\r\n                };\r\n            });\r\n            setPlayerAppIdStub = sinon.stub(Core.Telemetry.Log, \"setPlayerAppId\");\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            appId = \"noAccessApp\";\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\").callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                throw expectedError;\r\n            }));\r\n            try {\r\n                yield store.dispatch(new Actions.OpenAppHostAction({ appId }));\r\n            }\r\n            catch (error) {\r\n                actualError = error;\r\n            }\r\n        })","duration":19},{"title":"the expected error should be thrown","status":"pass","exception":{},"rawTitle":"the expected error should be thrown","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lgvdnor-a598f94zi8-rwzv7maf8d","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":0},{"title":"the appOpen event should be tracked","status":"pass","exception":{},"rawTitle":"the appOpen event should be tracked","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-a598f94zi8-jkoyryne2o","code":"() => {\r\n            trackEventStub.calledOnce.should.be.eql(true);\r\n            trackEventStub.calledWith(Core.Telemetry.Strings.appOpenInitiated).should.be.eql(true);\r\n        }","duration":1},{"title":"the exit with error should be logged","status":"pass","exception":{},"rawTitle":"the exit with error should be logged","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-a598f94zi8-jks3ew5msg","code":"() => {\r\n            trackErrorEventStub.calledOnce.should.be.eql(true);\r\n            trackErrorEventStub.calledWith(Core.Telemetry.Strings.appDismissedWithError, { error: expectedError, eventData: { appInfo: \"no appInfo available\" } });\r\n        }","duration":0},{"title":"the app should be exited and an error dialog should be dispatched","status":"pass","exception":{},"rawTitle":"the app should be exited and an error dialog should be dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-a598f94zi8-rot97752dp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [\r\n                `${Actions.updateOpenAppInProgress}`,\r\n                `${Actions.updateAppOpeningStage}`,\r\n                `${Actions.updateOpenAppScenarioGuid}`,\r\n                `${Actions.openProgressDialog}`,\r\n                `${react_navigation_1.NavigationActions.BACK}`,\r\n                `${Actions.openErrorDialog}`,\r\n                `${Actions.updateOpenAppInProgress}`\r\n            ];\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n            // set the OpenAppInProgress to true on user click on the app\r\n            actions[0].payload.should.be.eql(true);\r\n            // set the OpenAppInProgress to false when an error is thrown during installation\r\n            actions[6].payload.should.be.eql(false);\r\n        }","duration":1}],"title":"User tries to open an app, to which he does not have access","description":"","tags":[],"sequence":2,"id":"203lgvdnor-a598f94zi8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":13,"failedCount":0,"pendingCount":0,"totalCount":13,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"openAppHostAsync action is called","status":"pass","exception":{},"rawTitle":"openAppHostAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-hdcro6cmhp-kle0x9kjzx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            setPlayerAppIdStub = sinon.stub(Core.Telemetry.Log, \"setPlayerAppId\");\r\n            appId = \"appNotFoundOnServer\";\r\n            debounceStub = sinon.stub(Utilities.Debounce, Utilities.Debounce.create.name, (fn, milliseconds, done) => {\r\n                // tslint:disable-next-line:no-unused-expression\r\n                fn && fn();\r\n                // tslint:disable-next-line:no-unused-expression\r\n                done && done();\r\n                return {\r\n                    restart: () => { },\r\n                    cancel: () => { },\r\n                };\r\n            });\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\");\r\n            try {\r\n                yield store.dispatch(new Actions.OpenAppHostAction({ appId }));\r\n            }\r\n            catch (error) {\r\n                actualError = error;\r\n            }\r\n        })","duration":15},{"title":"the scenario should be started","status":"pass","exception":{},"rawTitle":"the scenario should be started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lgvdnor-hdcro6cmhp-dhylq4p1r7","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the open app scenario should be started","status":"pass","exception":{},"rawTitle":"the open app scenario should be started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-hdcro6cmhp-jkkl6itcbk","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"an action should be fired to update that the app is opening","status":"pass","exception":{},"rawTitle":"an action should be fired to update that the app is opening","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-hdcro6cmhp-q642o65xj4","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateOpenAppInProgress}`);\r\n            actions[0].payload.should.be.eql(true);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-hdcro6cmhp-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"an action should be fired to update the open app scenario guid","status":"pass","exception":{},"rawTitle":"an action should be fired to update the open app scenario guid","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-hdcro6cmhp-jkma4rb3tc","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].type.should.be.eql(`${Actions.updateOpenAppScenarioGuid}`);\r\n            actions[2].payload.should.be.eql(scenarioGuid);\r\n        }","duration":0},{"title":"launch app should be called","status":"pass","exception":{},"rawTitle":"launch app should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-hdcro6cmhp-134q0sx6sjn","code":"() => {\r\n            launchAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the progress dialog should be opened","status":"pass","exception":{},"rawTitle":"the progress dialog should be opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":8,"id":"203lgvdnor-hdcro6cmhp-jksdkr9wlc","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[3].type.should.be.eql(`${Actions.openProgressDialog}`);\r\n            actions[3].payload.should.be.eql(Localization_1.localization.Installing);\r\n        }","duration":0},{"title":"the error dialog should be opened","status":"pass","exception":{},"rawTitle":"the error dialog should be opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"203lgvdnor-hdcro6cmhp-jkr4krxc4g","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[5].type.should.be.eql(`${Actions.openErrorDialog}`);\r\n            actions[5].payload.should.be.eql({ message: Localization_1.localization.AppInstallErrorMessage, detail: expectedError.message, title: Localization_1.localization.AppNavigationFailureTitle });\r\n        }","duration":0},{"title":"the expected error is thrown","status":"pass","exception":{},"rawTitle":"the expected error is thrown","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"203lgvdnor-hdcro6cmhp-vgpbcnfegz","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":0},{"title":"the player app id should be set and cleared","status":"pass","exception":{},"rawTitle":"the player app id should be set and cleared","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"203lgvdnor-hdcro6cmhp-iwrn05e7kj","code":"() => {\r\n            setPlayerAppIdStub.calledTwice.should.be.eql(true);\r\n            setPlayerAppIdStub.firstCall.calledWith(appId).should.be.eql(true);\r\n            setPlayerAppIdStub.secondCall.calledWith(\"\").should.be.eql(true);\r\n        }","duration":0},{"title":"an action should sent to indicate no app is currently being opened","status":"pass","exception":{},"rawTitle":"an action should sent to indicate no app is currently being opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"203lgvdnor-hdcro6cmhp-pwyfmkac0d","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[6].type.should.be.eql(`${Actions.updateOpenAppInProgress}`);\r\n            actions[6].payload.should.be.eql(false);\r\n        }","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"203lgvdnor-hdcro6cmhp-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(7);\r\n        }","duration":0}],"title":"Opening a published app that is not found on the server","description":"","tags":[],"sequence":3,"id":"203lgvdnor-hdcro6cmhp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"openAppHostAsync action is called","status":"pass","exception":{},"rawTitle":"openAppHostAsync action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-12ff2cvl14t-kle0x9kjzx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(new Actions.OpenAppHostAction({ appId: \"any app id\" }));\r\n        })","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-12ff2cvl14t-x0dhrscv9f","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"Opening a published app when another app is currently opening","description":"","tags":[],"sequence":4,"id":"203lgvdnor-12ff2cvl14t"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the information to host a published app","status":"pass","exception":{},"rawTitle":"getting the information to host a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-2ru2rma7io-165ko1t4nnh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installAppStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.checkAndInstallAppIfNeededAsync.name).returns(installedAppInfo);\r\n            getInstallPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getInstalledAppFolderPathAsync.name).returns(installAppPath);\r\n            getStaticContentPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getStaticContentFolderPathAsync.name).returns(staticContentPath);\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_2.MockInstallAppRepository.prototype, Mocks_2.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(undefined);\r\n            updateOpenAppDataFunction = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            playerResourcesCdnPathStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"playerResourcesCdnPath\", {\r\n                get: function get() {\r\n                    return \"\";\r\n                }\r\n            });\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\").callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return appInfo;\r\n            }));\r\n            yield store.dispatch(new Actions.GetAppHostRequiredInfoAction());\r\n        })","duration":11},{"title":"we call launch app","status":"pass","exception":{},"rawTitle":"we call launch app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-2ru2rma7io-2rngrnuwcg","code":"() => {\r\n            launchAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app is installed","status":"pass","exception":{},"rawTitle":"the app is installed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-2ru2rma7io-jkpkxq2lts","code":"() => {\r\n            installAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the installed app path is retrieved","status":"pass","exception":{},"rawTitle":"the installed app path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-2ru2rma7io-jkq4fied5s","code":"() => {\r\n            getInstallPathStub.calledOnce.should.be.eql(true);\r\n            getInstallPathStub.calledWith(installedAppInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the static content path is retrieved","status":"pass","exception":{},"rawTitle":"the static content path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-2ru2rma7io-12bxwfq9ye3","code":"() => {\r\n            getStaticContentPathStub.calledOnce.should.be.eql(true);\r\n            getStaticContentPathStub.calledWith(installedAppInfo.playerResourceHash).should.be.eql(true);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Downloading ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Downloading ...\"","description":"","docString":"","values":["Downloading ..."],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-2ru2rma7io-cilyyhcr1s","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[0].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-2ru2rma7io-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"the updateOpenAppData function is called","status":"pass","exception":{},"rawTitle":"the updateOpenAppData function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lgvdnor-2ru2rma7io-jkpbzgzt40","code":"() => {\r\n            updateOpenAppDataFunction.callCount.should.be.eql(1);\r\n            updateOpenAppDataFunction.firstCall.calledWith({ \"playerResourcesSplitEnabled\": true }).should.be.eql(true);\r\n        }","duration":0},{"title":"an action is dispatched to update the required information","status":"pass","exception":{},"rawTitle":"an action is dispatched to update the required information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"203lgvdnor-2ru2rma7io-16b3viu76qo","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].type.should.be.eql(`${Actions.updateAppHostRequiredInfo}`);\r\n            actions[2].payload.installedAppPath.should.be.eql(installAppPath);\r\n            actions[2].payload.staticContentFolderPath.should.be.eql(staticContentPath);\r\n        }","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"203lgvdnor-2ru2rma7io-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(3);\r\n        }","duration":1}],"title":"Getting required information for hosting a published app","description":"","tags":[],"sequence":5,"id":"203lgvdnor-2ru2rma7io"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the information to host a published app","status":"pass","exception":{},"rawTitle":"getting the information to host a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-17niasz48ln-165ko1t4nnh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installAppStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.checkAndInstallAppIfNeededAsync.name).returns(installedAppInfo);\r\n            getInstallPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getInstalledAppFolderPathAsync.name).returns(installAppPath);\r\n            getStaticContentPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getStaticContentFolderPathAsync.name).returns(staticContentPath);\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_2.MockInstallAppRepository.prototype, Mocks_2.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(installedAppInfo);\r\n            updateOpenAppDataFunction = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            playerResourcesCdnPathStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"playerResourcesCdnPath\", {\r\n                get: function get() {\r\n                    return \"\";\r\n                }\r\n            });\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\").callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return appInfo;\r\n            }));\r\n            yield store.dispatch(new Actions.GetAppHostRequiredInfoAction());\r\n        })","duration":7},{"title":"we check for updates","status":"pass","exception":{},"rawTitle":"we check for updates","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lgvdnor-17niasz48ln-a51zwpsfgg","code":"() => {\r\n            installAppStub.calledOnce.should.be.eql(true);\r\n            installAppStub.calledWith(installedAppInfo.appPackageResourcesKind);\r\n        }","duration":1},{"title":"the installed app path is retrieved","status":"pass","exception":{},"rawTitle":"the installed app path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-17niasz48ln-jkq4fied5s","code":"() => {\r\n            getInstallPathStub.calledOnce.should.be.eql(true);\r\n            getInstallPathStub.calledWith(installedAppInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the static content path is retrieved","status":"pass","exception":{},"rawTitle":"the static content path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-17niasz48ln-12bxwfq9ye3","code":"() => {\r\n            getStaticContentPathStub.calledOnce.should.be.eql(true);\r\n            getStaticContentPathStub.calledWith(installedAppInfo.playerResourceHash).should.be.eql(true);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Downloading ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Downloading ...\"","description":"","docString":"","values":["Downloading ..."],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-17niasz48ln-cilyyhcr1s","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[0].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-17niasz48ln-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"the updateOpenAppData function is called","status":"pass","exception":{},"rawTitle":"the updateOpenAppData function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-17niasz48ln-jkpbzgzt40","code":"() => {\r\n            updateOpenAppDataFunction.callCount.should.be.eql(1);\r\n            updateOpenAppDataFunction.firstCall.calledWith({ \"playerResourcesSplitEnabled\": true }).should.be.eql(true);\r\n        }","duration":0},{"title":"an action is dispatched to update the required information","status":"pass","exception":{},"rawTitle":"an action is dispatched to update the required information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lgvdnor-17niasz48ln-16b3viu76qo","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].type.should.be.eql(`${Actions.updateAppHostRequiredInfo}`);\r\n            actions[2].payload.installedAppPath.should.be.eql(installAppPath);\r\n            actions[2].payload.staticContentFolderPath.should.be.eql(staticContentPath);\r\n        }","duration":1},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"203lgvdnor-17niasz48ln-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(3);\r\n        }","duration":0}],"title":"Getting required information for hosting a published app, and the app is already installed","description":"","tags":[],"sequence":6,"id":"203lgvdnor-17niasz48ln"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the information to host a published app","status":"pass","exception":{},"rawTitle":"getting the information to host a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-876fkhsf0j-165ko1t4nnh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installAppStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.checkAndInstallAppIfNeededAsync.name).returns(installedAppInfo);\r\n            getInstallPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getInstalledAppFolderPathAsync.name).returns(installAppPath);\r\n            getStaticContentPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getStaticContentFolderPathAsync.name).returns(staticContentPath);\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_2.MockInstallAppRepository.prototype, Mocks_2.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(installedAppInfo);\r\n            updateOpenAppDataFunction = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            playerResourcesCdnPathStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"playerResourcesCdnPath\", {\r\n                get: function get() {\r\n                    return \"\";\r\n                }\r\n            });\r\n            yield store.dispatch(new Actions.GetAppHostRequiredInfoAction());\r\n        })","duration":7},{"title":"the app is installed","status":"pass","exception":{},"rawTitle":"the app is installed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-876fkhsf0j-15vnjcigw97","code":"() => {\r\n            installAppStub.calledOnce.should.be.eql(false);\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the installed app path is retrieved","status":"pass","exception":{},"rawTitle":"the installed app path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-876fkhsf0j-jkq4fied5s","code":"() => {\r\n            getInstallPathStub.calledOnce.should.be.eql(true);\r\n            getInstallPathStub.calledWith(installedAppInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the static content path is retrieved","status":"pass","exception":{},"rawTitle":"the static content path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-876fkhsf0j-12bxwfq9ye3","code":"() => {\r\n            getStaticContentPathStub.calledOnce.should.be.eql(true);\r\n            getStaticContentPathStub.calledWith(installedAppInfo.playerResourceHash).should.be.eql(true);\r\n        }","duration":0},{"title":"the updateOpenAppData function is called","status":"pass","exception":{},"rawTitle":"the updateOpenAppData function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-876fkhsf0j-jkpbzgzt40","code":"() => {\r\n            updateOpenAppDataFunction.callCount.should.be.eql(1);\r\n            updateOpenAppDataFunction.firstCall.calledWith({ \"playerResourcesSplitEnabled\": true }).should.be.eql(true);\r\n        }","duration":0},{"title":"an action is dispatched to update the required information","status":"pass","exception":{},"rawTitle":"an action is dispatched to update the required information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-876fkhsf0j-16b3viu76qo","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateAppHostRequiredInfo}`);\r\n            actions[0].payload.installedAppPath.should.be.eql(installAppPath);\r\n            actions[0].payload.staticContentFolderPath.should.be.eql(staticContentPath);\r\n        }","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-876fkhsf0j-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(1);\r\n        }","duration":0}],"title":"Getting required information for hosting a published app while Offline","description":"","tags":[],"sequence":7,"id":"203lgvdnor-876fkhsf0j"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the information to host a published app","status":"pass","exception":{},"rawTitle":"getting the information to host a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-javwqsargd-165ko1t4nnh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installAppStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.checkAndInstallAppIfNeededAsync.name).returns(installedAppInfo);\r\n            getInstallPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getInstalledAppFolderPathAsync.name).returns(installAppPath);\r\n            getStaticContentPathStub = sinon.stub(Mocks_1.InstallMockService.prototype, Mocks_1.InstallMockService.prototype.getStaticContentFolderPathAsync.name).returns(staticContentPath);\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_2.MockInstallAppRepository.prototype, Mocks_2.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(undefined);\r\n            updateOpenAppDataFunction = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            waitForOpenAppAsyncStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, Mocks_1.OpenAppMockService.prototype.waitForOpenAppAsync.name).returns(Mocks_1.AppCatalogMockService.createBasicAppInfo());\r\n            playerResourcesCdnPathStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"playerResourcesCdnPath\", {\r\n                get: function get() {\r\n                    return \"\";\r\n                }\r\n            });\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\").callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return appInfo;\r\n            }));\r\n            yield store.dispatch(new Actions.GetAppHostRequiredInfoAction());\r\n        })","duration":16},{"title":"we call launch app","status":"pass","exception":{},"rawTitle":"we call launch app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-javwqsargd-2rngrnuwcg","code":"() => {\r\n            launchAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app is installed","status":"pass","exception":{},"rawTitle":"the app is installed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-javwqsargd-jkpkxq2lts","code":"() => {\r\n            installAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the installed app path is retrieved","status":"pass","exception":{},"rawTitle":"the installed app path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-javwqsargd-jkq4fied5s","code":"() => {\r\n            getInstallPathStub.calledOnce.should.be.eql(true);\r\n            getInstallPathStub.calledWith(installedAppInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the static content path is retrieved","status":"pass","exception":{},"rawTitle":"the static content path is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lgvdnor-javwqsargd-12bxwfq9ye3","code":"() => {\r\n            getStaticContentPathStub.calledOnce.should.be.eql(true);\r\n            getStaticContentPathStub.calledWith(installedAppInfo.playerResourceHash).should.be.eql(true);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Downloading ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Downloading ...\"","description":"","docString":"","values":["Downloading ..."],"ruleViolations":[],"type":"and","sequence":6,"id":"203lgvdnor-javwqsargd-cilyyhcr1s","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[0].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"updateAppOpeningStage should be called with a \"Opening ...\"","status":"pass","exception":{},"rawTitle":"updateAppOpeningStage should be called with a \"Opening ...\"","description":"","docString":"","values":["Opening ..."],"ruleViolations":[],"type":"and","sequence":7,"id":"203lgvdnor-javwqsargd-n2koji4pur","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(`${Actions.updateAppOpeningStage}`);\r\n            actions[1].payload.should.be.eql(stepContext.values[0]);\r\n        }","duration":1},{"title":"the updateOpenAppData function is called","status":"pass","exception":{},"rawTitle":"the updateOpenAppData function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lgvdnor-javwqsargd-jkpbzgzt40","code":"() => {\r\n            updateOpenAppDataFunction.callCount.should.be.eql(1);\r\n            updateOpenAppDataFunction.firstCall.calledWith({ \"playerResourcesSplitEnabled\": true }).should.be.eql(true);\r\n        }","duration":0},{"title":"an action is dispatched to update the required information","status":"pass","exception":{},"rawTitle":"an action is dispatched to update the required information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"203lgvdnor-javwqsargd-16b3viu76qo","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[2].type.should.be.eql(`${Actions.updateAppHostRequiredInfo}`);\r\n            actions[2].payload.installedAppPath.should.be.eql(installAppPath);\r\n            actions[2].payload.staticContentFolderPath.should.be.eql(staticContentPath);\r\n        }","duration":0},{"title":"no further actions are called","status":"pass","exception":{},"rawTitle":"no further actions are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"203lgvdnor-javwqsargd-143swb55lmt","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(3);\r\n        }","duration":0}],"title":"Getting required information for hosting a published app while in the INT environment","description":"","tags":[],"sequence":8,"id":"203lgvdnor-javwqsargd"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the information to host a published app","status":"pass","exception":{},"rawTitle":"getting the information to host a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-2ru2rma7io-165ko1t4nnh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            launchAppStub = sinon.stub(Mocks_1.OpenAppMockService.prototype, \"openAppAsync\").callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return appInfo;\r\n            }));\r\n            try {\r\n                yield store.dispatch(new Actions.GetAppHostRequiredInfoAction());\r\n            }\r\n            catch (err) { }\r\n        })","duration":10},{"title":"a new actions should be dispatched","status":"pass","exception":{},"rawTitle":"a new actions should be dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-2ru2rma7io-jks4pry400","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(3);\r\n        }","duration":1},{"title":"the app should be exited and an error dialog should be dispatched","status":"pass","exception":{},"rawTitle":"the app should be exited and an error dialog should be dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lgvdnor-2ru2rma7io-rot97752dp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [\r\n                `${react_navigation_1.NavigationActions.BACK}`,\r\n                `${Actions.openErrorDialog}`,\r\n                `${Actions.updateOpenAppInProgress}`\r\n            ];\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0}],"title":"Getting required information for hosting a published app","description":"","tags":[],"sequence":9,"id":"203lgvdnor-2ru2rma7io"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"appDoneLoading action is called"}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":2,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"appDoneLoading action is called","status":"pass","exception":{},"rawTitle":"appDoneLoading action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-q5zur33uog-jkr1qxr1ls","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            openAppScenarioGuid = trackScenarioStub.setup();\r\n            yield store.dispatch(new Actions.AppDoneLoadingAction({ perfAndTelemetryData: telemetryData }));\r\n        })","duration":9},{"title":"the scenario should be ended","status":"pass","exception":{},"rawTitle":"the scenario should be ended","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"203lgvdnor-q5zur33uog-jkk2nuzgm8","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledTwice.should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.firstCall.calledWith(openAppScenarioGuid).should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.secondCall.calledWith(splashScreenScenarioGuid).should.be.eql(true);\r\n        }","duration":1},{"title":"the openAppEndEvent and updateOpenAppData functions are called","status":"pass","exception":{},"rawTitle":"the openAppEndEvent and updateOpenAppData functions are called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"When the app is done loading"}],"type":"Then","sequence":3,"id":"203lgvdnor-q5zur33uog-17nicv0xzir","code":"() => {\r\n            updateOpenAppDataFunction.callCount.should.be.eql(3);\r\n            updateOpenAppDataFunction.firstCall.args[0].hasOwnProperty(appSplashScreenTime).should.be.eql(true);\r\n            updateOpenAppDataFunction.secondCall.args[0].hasOwnProperty(Object.keys(telemetryData[1])[0]).should.be.eql(true);\r\n            updateOpenAppDataFunction.thirdCall.args[0].hasOwnProperty(Object.keys(telemetryData[1])[1]).should.be.eql(true);\r\n            openAppEndEventFunction.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app loaded action is dispatched","status":"pass","exception":{},"rawTitle":"the app loaded action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lgvdnor-q5zur33uog-f9tl9sb6rp","code":"() => {\r\n            const actions = store.getActions();\r\n            const expectedActionsTypes = [\r\n                `${Actions.appIsLoaded}`,\r\n                `${Actions.updateOpenAppInProgress}`\r\n            ];\r\n            const typeList = Utilities_1.getActionsTypeList(actions);\r\n            typeList.should.be.eql(expectedActionsTypes);\r\n        }","duration":0}],"title":"When the app is done loading","description":"","tags":[],"sequence":10,"id":"203lgvdnor-q5zur33uog"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling PublishedAppActionsHelpers.constructPackagePath()","status":"pass","exception":{},"rawTitle":"calling PublishedAppActionsHelpers.constructPackagePath()","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"203lgvdnor-sel5hsd6o0-i717ezus5c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            returnValue = Utilities.constructPublishedAppPath(\"appName\", installedAppInfo, \"\", \"\", \"\");\r\n        })","duration":1},{"title":"the installedAppPath is not empty","status":"pass","exception":{},"rawTitle":"the installedAppPath is not empty","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lgvdnor-sel5hsd6o0-hjrlpd16md","code":"() => {\r\n            let relativePath = decodeURIComponent(returnValue[\"relativePath\"].replace(/\\+/g, \" \"));\r\n            let appPath = decodeURIComponent(returnValue[\"appPath\"].replace(/\\+/g, \" \"));\r\n            let queryParam = JSON.parse(relativePath.split(\"#\")[1]);\r\n            queryParam[\"appIdWithVersion\"].should.be.eql(installedAppPath);\r\n            queryParam = JSON.parse(appPath.split(\"#\")[1]);\r\n            queryParam[\"appIdWithVersion\"].should.be.eql(installedAppPath);\r\n        }","duration":0}],"title":"Constructing a published app path with a valid installed path","description":"","tags":[],"sequence":11,"id":"203lgvdnor-sel5hsd6o0"}],"title":"PublishedAppHost.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/PublishedAppHostActions.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lgvdnor-9pbsb4-j3fzkukkqr","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.InstallServiceFactory);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IEnrollmentService);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.InstallServiceFactory).toFactory((context) => {\r\n                return (playerResourcesDomain) => {\r\n                    return new Mocks_1.InstallMockService();\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IAppCatalogService).toConstantValue(new Mocks_1.AppCatalogMockService());\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(new Mocks_2.MockInstallAppRepository());\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IEnrollmentService).toConstantValue(new Mocks_1.EnrollmentMockService());\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"203lgvdnor-9pbsb4"},"id":"203lgvdnor","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":2,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the user is logged in to PowerApps"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is logged in to PowerApps","status":"pass","exception":{},"rawTitle":"the user is logged in to PowerApps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwtqrg4qyo-odaaovo8zx-14gdeyu7vtx","code":"() => {\r\n            pushNotificationConfigureStub = sinon.stub(PushNotification, PushNotification.configure.name);\r\n            store.dispatch(Actions_1.initializePushNotification());\r\n        }","duration":2},{"title":"push notification is initialized","status":"pass","exception":{},"rawTitle":"push notification is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwtqrg4qyo-odaaovo8zx-jks0digji8","code":"() => {\r\n            pushNotificationConfigureStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"push notification configuration options are generated","status":"pass","exception":{},"rawTitle":"push notification configuration options are generated","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwtqrg4qyo-odaaovo8zx-jkko8uj8ao","code":"() => {\r\n            configuration = pushNotificationConfigureStub.args[0][0];\r\n            configuration.requestPermissions.should.be.eql(true);\r\n        }","duration":0}],"title":"Initialize push notification","description":"","tags":[],"sequence":1,"id":"mwtqrg4qyo-odaaovo8zx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"notification is successfully registered","status":"pass","exception":{},"rawTitle":"notification is successfully registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwtqrg4qyo-fgb2a304qd-jkk9zvvaqo","code":"() => {\r\n            notifyPushNotificationRegistrationStub = sinon.stub(Adapters_1.RuntimeAdapter.instance, Adapters_1.RuntimeAdapter.instance.notifyPushNotificationRegistration.name);\r\n            configuration.onRegister(registrationInfo);\r\n        }","duration":1},{"title":"server is notified of the registration","status":"pass","exception":{},"rawTitle":"server is notified of the registration","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwtqrg4qyo-fgb2a304qd-4uvelb2491","code":"() => {\r\n            notifyPushNotificationRegistrationStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"registration token should be sent to the server","status":"pass","exception":{},"rawTitle":"registration token should be sent to the server","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwtqrg4qyo-fgb2a304qd-c1s7qaf9s3","code":"() => {\r\n            notifyPushNotificationRegistrationStub.args[0][0].should.be.eql(registrationInfo.token);\r\n        }","duration":0}],"title":"Notify PowerApps server when registration is successful","description":"","tags":[],"sequence":2,"id":"mwtqrg4qyo-fgb2a304qd"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a notification is received and user taps on the notification","status":"pass","exception":{},"rawTitle":"a notification is received and user taps on the notification","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwtqrg4qyo-u8g01vzhhc-dm0pahw7d9","code":"() => {\r\n            isPowerAppsLinkStub = sinon.stub(Actions_1.DeepLinkingHelpers, Actions_1.DeepLinkingHelpers.isPowerAppsLink.name).returns(true);\r\n            configuration.onNotification(notification);\r\n        }","duration":1},{"title":"an app is opened","status":"pass","exception":{},"rawTitle":"an app is opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwtqrg4qyo-u8g01vzhhc-12yzfok1h7","code":"() => {\r\n            isPowerAppsLinkStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"URL of the app opened should match the input","status":"pass","exception":{},"rawTitle":"URL of the app opened should match the input","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwtqrg4qyo-u8g01vzhhc-cn6p8wfsg0","code":"() => {\r\n            isPowerAppsLinkStub.args[0][0].should.be.eql(notification.data.powerappsData.uri);\r\n        }","duration":0}],"title":"Open the app when user taps on a received push notification on iOS","description":"","tags":[],"sequence":3,"id":"mwtqrg4qyo-u8g01vzhhc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a notification is received and user taps on the notification","status":"pass","exception":{},"rawTitle":"a notification is received and user taps on the notification","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwtqrg4qyo-jkk8sid3eo-dm0pahw7d9","code":"() => {\r\n            getAppIdStub = sinon.stub(Actions_1.DeepLinkingHelpers, Actions_1.DeepLinkingHelpers.getAppId.name);\r\n            configuration.onNotification(notification);\r\n        }","duration":2},{"title":"an app is opened","status":"pass","exception":{},"rawTitle":"an app is opened","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwtqrg4qyo-jkk8sid3eo-12yzfok1h7","code":"() => {\r\n            getAppIdStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the input for getAppId should be the URL of the app to open","status":"pass","exception":{},"rawTitle":"the input for getAppId should be the URL of the app to open","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mwtqrg4qyo-jkk8sid3eo-po8l2zj8dp","code":"() => {\r\n            getAppIdStub.args[0][0].should.be.eql(Core.Url.tryParse(notification.uri));\r\n        }","duration":2}],"title":"Open the app when user taps on a received push notification on Android","description":"","tags":[],"sequence":4,"id":"mwtqrg4qyo-jkk8sid3eo"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the user is logged out of PowerApps"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is logged out of PowerApps","status":"pass","exception":{},"rawTitle":"the user is logged out of PowerApps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mwtqrg4qyo-10s9r3wh0y3-fmdylcv71n","code":"() => {\r\n            pushNotificationUnregisterStub = sinon.stub(PushNotification, PushNotification.unregister.name);\r\n            store2.dispatch(Actions_1.unregisterPushNotification());\r\n        }","duration":1},{"title":"push notification is unregistered","status":"pass","exception":{},"rawTitle":"push notification is unregistered","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mwtqrg4qyo-10s9r3wh0y3-jkqjtyoha8","code":"() => {\r\n            pushNotificationUnregisterStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"Unregister push notification","description":"","tags":[],"sequence":5,"id":"mwtqrg4qyo-10s9r3wh0y3"}],"title":"Power Apps push notification.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/PushNotificationActions.Spec.js","id":"mwtqrg4qyo","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-876fy60997-lr1el1k940","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            getUpdateLinkIfAvailableAsyncStub = sinon.stub(PlayerVerificationService_ios_1.PlayerVerificationService, \"getUpdateLinkIfAvailableAsync\");\r\n            getUpdateLinkIfAvailableAsyncStub.callsFake(() => {\r\n                return WinJS.Promise.wrap(updateLink);\r\n            });\r\n        }","duration":2},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-876fy60997-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.showAppUpdateIfAvailableAsync());\r\n        })","duration":1},{"title":"the store link is retrieved","status":"pass","exception":{},"rawTitle":"the store link is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-876fy60997-jkpzgcnrsw","code":"() => {\r\n            getUpdateLinkIfAvailableAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the user is requested to update the player","status":"pass","exception":{},"rawTitle":"the user is requested to update the player","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"jkkuugxwu8-876fy60997-6qxdyuoinv","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions.openPlayerUpgradeDialog}`, \"number of actions called should be eql 1, when upgrade is required\");\r\n            actions[0].payload.should.be.eql(updateLink);\r\n        }","duration":1}],"title":"The player requires a forced upgrade","description":"","tags":[],"sequence":1,"id":"jkkuugxwu8-876fy60997"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player does not require a forced upgrade","status":"pass","exception":{},"rawTitle":"the player does not require a forced upgrade","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-lr03txzyuo-km61y9su6z","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            getUpdateLinkIfAvailableAsyncStub = sinon.stub(PlayerVerificationService_ios_1.PlayerVerificationService, \"getUpdateLinkIfAvailableAsync\");\r\n            getUpdateLinkIfAvailableAsyncStub.callsFake(() => {\r\n                return WinJS.Promise.wrap(null);\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-lr03txzyuo-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield store.dispatch(Actions.showAppUpdateIfAvailableAsync());\r\n        })","duration":1},{"title":"the store link is not retrieved","status":"pass","exception":{},"rawTitle":"the store link is not retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-lr03txzyuo-md8o82cff7","code":"() => {\r\n            getUpdateLinkIfAvailableAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the user is not requested to update the player","status":"pass","exception":{},"rawTitle":"the user is not requested to update the player","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"jkkuugxwu8-lr03txzyuo-a9xko7nexx","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"The player does not require a forced upgrade","description":"","tags":[],"sequence":2,"id":"jkkuugxwu8-lr03txzyuo"}],"title":"Check if force upgrade of Power Apps Client required","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/UpdatePowerAppsActions.Spec.js","id":"jkkuugxwu8","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player cache is cleared","status":"pass","exception":{},"rawTitle":"the player cache is cleared","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"h2gm4si2v1-jkio5miyjk-x0dp5aak1p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            clearStub = sinon.stub(Services_1.InstallService.prototype, Services_1.InstallService.prototype.clearAppsAndResourcesAsync.name);\r\n            prefetchBundledPlayerResourcesAsync = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.prefetchBundledPlayerResourcesAsync.name);\r\n            purgeCacheDataAsync = sinon.stub(AsyncStorageCacheSettingsProviderManager_1.AsyncStorageCacheSettingsProviderManager.prototype, AsyncStorageCacheSettingsProviderManager_1.AsyncStorageCacheSettingsProviderManager.prototype.purgeCacheDataAsync.name);\r\n            store = Utilities_1.createMockStore(() => ({\r\n                EnvironmentState: {\r\n                    isNetworkConnected: true\r\n                }\r\n            }));\r\n            store.dispatch(Actions.clearCache());\r\n        })","duration":6},{"title":"the installed apps and player resources are deleted","status":"pass","exception":{},"rawTitle":"the installed apps and player resources are deleted","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"h2gm4si2v1-jkio5miyjk-itj7613fdh","code":"() => {\r\n            clearStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the runtime cache is cleared","status":"pass","exception":{},"rawTitle":"the runtime cache is cleared","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"h2gm4si2v1-jkio5miyjk-6ejlj4jled","code":"() => {\r\n            purgeCacheDataAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the bundled player resources are prefetched","status":"pass","exception":{},"rawTitle":"the bundled player resources are prefetched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"h2gm4si2v1-jkio5miyjk-jkmkppi9g0","code":"() => {\r\n            prefetchBundledPlayerResourcesAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The player cache is cleared","description":"","tags":[],"sequence":1,"id":"h2gm4si2v1-jkio5miyjk"}],"title":"Allow the user to clear the player cache","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Actions/UserSession.Spec.js","id":"h2gm4si2v1","path":"Actions"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to <fromType> is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-148akkt9ohh-17nii1hrynp","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":2},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with <toType> (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lqy7t20ri8-148akkt9ohh-i71ugscuzk","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["fromTypeName","toTypeName"],["My","All"],["Favorite","My"],["Sample","My"],["Featured","My"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to <fromType> is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-148akkt9ohh-17nii1hrynp","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":2},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with <toType> (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lqy7t20ri8-148akkt9ohh-i71ugscuzk","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromTypeName":"My","toTypeName":"All"},"title":"The app type link is pressed and resolves","sequence":1,"id":"lqy7t20ri8-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to <fromType> is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-148akkt9ohh-17nii1hrynp","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with <toType> (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lqy7t20ri8-148akkt9ohh-i71ugscuzk","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromTypeName":"Favorite","toTypeName":"My"},"title":"The app type link is pressed and resolves","sequence":2,"id":"lqy7t20ri8-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to <fromType> is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-148akkt9ohh-17nii1hrynp","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with <toType> (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lqy7t20ri8-148akkt9ohh-i71ugscuzk","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromTypeName":"Sample","toTypeName":"My"},"title":"The app type link is pressed and resolves","sequence":3,"id":"lqy7t20ri8-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to <fromType> is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-148akkt9ohh-17nii1hrynp","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"onFilterChanged should be called with <toType> (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lqy7t20ri8-148akkt9ohh-i71ugscuzk","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromTypeName":"Featured","toTypeName":"My"},"title":"The app type link is pressed and resolves","sequence":4,"id":"lqy7t20ri8-148akkt9ohh"}],"title":"The app type link is pressed and resolves","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the apptype link is clicked","status":"pass","exception":{},"rawTitle":"the apptype link is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lqy7t20ri8-ybrny6gi8b-6ujs14kjkd","code":"() => {\r\n            emptyPlaceholder = (React.createElement(AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholder, { appType: Shared_1.AppType.All, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(emptyPlaceholder);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalogEmptyPlaceholder_1.UnconnectedAppCatalogEmptyPlaceholderTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":2},{"title":"onFilterChanged should NEVER be called (Since the link does not exist when the apptype = ALL)","status":"pass","exception":{},"rawTitle":"onFilterChanged should NEVER be called (Since the link does not exist when the apptype = ALL)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lqy7t20ri8-ybrny6gi8b-i72fg34gf4","code":"() => {\r\n            onFilterChangedSpy.called.should.be.eql(false);\r\n        }","duration":0}],"title":"The apptype is set to ALL","description":"","tags":[],"sequence":2,"id":"lqy7t20ri8-ybrny6gi8b"}],"title":"App catalog empty placeholder allows users to switch to the corresponding AppType","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/AppCatalogEmptyPlaceholder.Spec.js","id":"lqy7t20ri8","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to My is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-148akkt9ohh-jkol1vzqow","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with All (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr13qnw4sg-148akkt9ohh-i78cccj3eo","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["fromType","toType"],["My","All"],["Favorite","My"],["Sample","My"],["Featured","My"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to My is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-148akkt9ohh-jkol1vzqow","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with All (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr13qnw4sg-148akkt9ohh-i78cccj3eo","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromType":"My","toType":"All"},"title":"The app type link is pressed and resolves","sequence":1,"id":"lr13qnw4sg-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to Favorite is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-148akkt9ohh-jkrh1m9jmo","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with My (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr13qnw4sg-148akkt9ohh-6jydx07p1","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromType":"Favorite","toType":"My"},"title":"The app type link is pressed and resolves","sequence":2,"id":"lr13qnw4sg-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to Sample is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-148akkt9ohh-jkmcle8e40","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":3},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"onFilterChanged should be called with My (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr13qnw4sg-148akkt9ohh-6jydx07p1","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromType":"Sample","toType":"My"},"title":"The app type link is pressed and resolves","sequence":3,"id":"lr13qnw4sg-148akkt9ohh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Link with apptype set to Featured is clicked","status":"pass","exception":{},"rawTitle":"Link with apptype set to <fromType> is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-148akkt9ohh-12bxwluxboj","code":"() => {\r\n            fromType = Shared_1.AppType[scenarioOutlineContext.example.fromTypeName];\r\n            toType = Shared_1.AppType[scenarioOutlineContext.example.toTypeName];\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: fromType, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should be called once","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-148akkt9ohh-12cq9928arp","code":"() => {\r\n            onFilterChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onFilterChanged should be called with My (<toValue>)","status":"pass","exception":{},"rawTitle":"onFilterChanged should be called with <toType> (<toValue>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr13qnw4sg-148akkt9ohh-6jydx07p1","code":"() => {\r\n            onFilterChangedSpy.calledWith(toType).should.be.eql(true);\r\n        }","duration":0}],"example":{"fromType":"Featured","toType":"My"},"title":"The app type link is pressed and resolves","sequence":4,"id":"lr13qnw4sg-148akkt9ohh"}],"title":"The app type link is pressed and resolves","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the apptype link is clicked","status":"pass","exception":{},"rawTitle":"the apptype link is clicked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr13qnw4sg-ybrny6gi8b-6ujs14kjkd","code":"() => {\r\n            footer = (React.createElement(AppCatalog_1.UnconnectedAppCatalogFooter, { appType: Shared_1.AppType.All, onFilterChanged: onFilterChangedSpy }));\r\n            const wrapper = enzyme_1.shallow(footer);\r\n            const appTypeLink = wrapper.find({ testID: AppCatalog_1.UnconnectedAppCatalogFooterTestIDs.AppTypeLink }).first();\r\n            appTypeLink.simulate(\"press\");\r\n        }","duration":1},{"title":"onFilterChanged should NEVER be called (Since the link does not exist when the apptype = ALL)","status":"pass","exception":{},"rawTitle":"onFilterChanged should NEVER be called (Since the link does not exist when the apptype = ALL)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr13qnw4sg-ybrny6gi8b-i72fg34gf4","code":"() => {\r\n            onFilterChangedSpy.called.should.be.eql(false);\r\n        }","duration":0}],"title":"The apptype is set to ALL","description":"","tags":[],"sequence":2,"id":"lr13qnw4sg-ybrny6gi8b"}],"title":"App catalog footer allows users to switch to the corresponding AppType","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/AppCatalogFooter.Spec.js","id":"lr13qnw4sg","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the hamburger menu button is pressed","status":"pass","exception":{},"rawTitle":"the hamburger menu button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz2gg1734-14bzdjpmx23-12by3e2yb9p","code":"() => {\r\n            const hamburgerMenuButton = wrapper.find({ testID: AppCatalog_1.AppCatalogHeaderTestIDs.HamburgerSymbolButton });\r\n            hamburgerMenuButton.should.not.be.eql(undefined);\r\n            hamburgerMenuButton.simulate(\"press\");\r\n        }","duration":0},{"title":"openNavMenu should be called once","status":"pass","exception":{},"rawTitle":"openNavMenu should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz2gg1734-14bzdjpmx23-52rsibfblh","code":"() => {\r\n            openNavMenuSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The hamburger menu button","description":"","tags":[],"sequence":1,"id":"7nz2gg1734-14bzdjpmx23"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the selected filter value is changed","status":"pass","exception":{},"rawTitle":"the selected filter value is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz2gg1734-bq40n9wstx-12z722uvbp","code":"() => {\r\n            const appTypeFilter = wrapper.find({ testID: AppCatalog_1.AppCatalogHeaderTestIDs.AppTypeFilter }).first();\r\n            appTypeFilter.simulate(\"appTypeSelected\", changeToValue);\r\n        }","duration":0},{"title":"appTypeChanged should be called once","status":"pass","exception":{},"rawTitle":"appTypeChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz2gg1734-bq40n9wstx-me0wclyfej","code":"() => {\r\n            appTypeChangedSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"appTypeChanged should be called with \"1\"","status":"pass","exception":{},"rawTitle":"appTypeChanged should be called with \"1\"","description":"","docString":"","values":[1],"ruleViolations":[],"type":"and","sequence":3,"id":"7nz2gg1734-bq40n9wstx-ua1soee7fn","code":"() => {\r\n            appTypeChangedSpy.calledWith(changeToValue).should.be.eql(true);\r\n        }","duration":0}],"title":"The app type filter is changed","description":"","tags":[],"sequence":2,"id":"7nz2gg1734-bq40n9wstx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the selected sort option value is changed","status":"pass","exception":{},"rawTitle":"the selected sort option value is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz2gg1734-9v3qyl41at-rs1nzd40vv","code":"() => {\r\n            const appSortFilter = wrapper.find({ testID: AppCatalog_1.AppCatalogHeaderTestIDs.AppSortFilter }).last();\r\n            appSortFilter.simulate(\"appSortFilterSelected\", changeToValue);\r\n        }","duration":1},{"title":"appSortChanged should be called once","status":"pass","exception":{},"rawTitle":"appSortChanged should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz2gg1734-9v3qyl41at-x3owlf2qej","code":"() => {\r\n            sortAppsSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"appSortChanged should be called with \"1\"","status":"pass","exception":{},"rawTitle":"appSortChanged should be called with \"1\"","description":"","docString":"","values":[1],"ruleViolations":[],"type":"and","sequence":3,"id":"7nz2gg1734-9v3qyl41at-cijjh1jzig","code":"() => {\r\n            sortAppsSpy.calledWith(changeToValue).should.be.eql(true);\r\n        }","duration":1}],"title":"The sort option is changed","description":"","tags":[],"sequence":3,"id":"7nz2gg1734-9v3qyl41at"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the search button is pressed","status":"pass","exception":{},"rawTitle":"the search button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz2gg1734-16b2u3dawps-dhyu3o09rh","code":"() => {\r\n            const searchButton = wrapper.find(\"HeaderImageButtonWithAutomationSupport\").last();\r\n            searchButton.should.not.eq(null);\r\n            searchButton.simulate(\"press\");\r\n        }","duration":1},{"title":"the showSearchSpy should be called once","status":"pass","exception":{},"rawTitle":"the showSearchSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz2gg1734-16b2u3dawps-17qtqkn2rvf","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            showSearchSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"The search button","description":"","tags":[],"sequence":4,"id":"7nz2gg1734-16b2u3dawps"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the refresh button is pressed","status":"pass","exception":{},"rawTitle":"the refresh button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz2gg1734-8ekw756btv-jkp3g2lrnk","code":"() => {\r\n            const refreshButton = wrapper.find({ testID: AppCatalog_1.AppCatalogHeaderTestIDs.RefreshButton }).first();\r\n            refreshButton.should.not.eq(null);\r\n            refreshButton.simulate(\"press\");\r\n        }","duration":1},{"title":"the fetchAppListAsyncSpy should be called once","status":"pass","exception":{},"rawTitle":"the fetchAppListAsyncSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz2gg1734-8ekw756btv-me10aacmkl","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            fetchAppListAsyncSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"The refresh button","description":"","tags":[],"sequence":5,"id":"7nz2gg1734-8ekw756btv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"appListLoading is \"true\"","status":"pass","exception":{},"rawTitle":"appListLoading is \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz2gg1734-8ekw756btv-z4skaxkxp7","code":"() => {\r\n            const header = (React.createElement(AppCatalog_1.AppCatalogHeader, { appTypeChanged: appTypeChangedSpy, searchApps: searchAppsSpy, selectedFilterValue: Shared_1.AppType.All, openNavMenu: openNavMenuSpy, selectedSortValue: Shared_1.SortOption.Name, appSortChanged: sortAppsSpy, fetchAppListAsync: fetchAppListAsyncSpy, appListLoading: stepContext.values[0], isNetworkConnected: true, searchActive: false, showSearch: () => { }, hideSearch: () => { } }));\r\n            wrapper = enzyme_1.shallow(header);\r\n        }","duration":1},{"title":"the refresh button is pressed","status":"pass","exception":{},"rawTitle":"the refresh button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz2gg1734-8ekw756btv-jkp3g2lrnk","code":"() => {\r\n            const refreshButton = wrapper.find({ testID: AppCatalog_1.AppCatalogHeaderTestIDs.RefreshButton }).first();\r\n            refreshButton.should.not.eq(null);\r\n            refreshButton.simulate(\"press\");\r\n        }","duration":0},{"title":"the fetchAppListAsyncSpy should not be called","status":"pass","exception":{},"rawTitle":"the fetchAppListAsyncSpy should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz2gg1734-8ekw756btv-jkom02je80","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            fetchAppListAsyncSpy.notCalled.should.be.true;\r\n        }","duration":0}],"title":"The refresh button","description":"","tags":[],"sequence":6,"id":"7nz2gg1734-8ekw756btv"}],"title":"App catalog header","description":"Provides:\n* The ability to show the hamburger menu\n* The ability to filter the app list\n* The ability to sort the app list\n* The ability to search the current filtered app list","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/AppCatalogHeader.Spec.js","id":"7nz2gg1734","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":2,"totalCount":6,"totalRuleViolations":2,"duration":2,"passPercent":0.6666666666666666,"failedPercent":0,"pendingPercent":0.3333333333333333},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":1,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":0.6666666666666666,"failedPercent":0,"pendingPercent":0.3333333333333333},"steps":[{"title":"<ViewWithAutomationSupport />","status":"pending","exception":{},"rawTitle":"<ViewWithAutomationSupport />","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"code":"","duration":0},{"title":"the app button is pressed","status":"pass","exception":{},"rawTitle":"the app button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"q6130nx4eo-4wlkpbz99n-a1hmjslm1x","code":"() => {\r\n            const activateAppButton = wrapper.find(AppCatalog_1.TrackFocusTouchableHighlight).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            activateAppButton.should.not.be.undefined;\r\n            activateAppButton.simulate(\"press\");\r\n        }","duration":1},{"title":"appSelectedSpy should be called once","status":"pass","exception":{},"rawTitle":"appSelectedSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Activate the app"}],"type":"Then","sequence":3,"id":"q6130nx4eo-4wlkpbz99n-17oak3ie0mb","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            appSelectedSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Activate the app","description":"","tags":[],"sequence":1,"id":"q6130nx4eo-4wlkpbz99n"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":1,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":0.6666666666666666,"failedPercent":0,"pendingPercent":0.3333333333333333},"steps":[{"title":"<ViewWithAutomationSupport />","status":"pending","exception":{},"rawTitle":"<ViewWithAutomationSupport />","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"code":"","duration":0},{"title":"the app context button is pressed","status":"pass","exception":{},"rawTitle":"the app context button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"q6130nx4eo-cn3sqjqh0g-rf9wl2wc3f","code":"() => {\r\n            const activateAppContextButton = wrapper.find(AppCatalog_1.TrackFocusTouchableHighlight).last();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            activateAppContextButton.should.not.be.undefined;\r\n            activateAppContextButton.simulate(\"press\");\r\n        }","duration":1},{"title":"appContextSelectedSpy should be called once","status":"pass","exception":{},"rawTitle":"appContextSelectedSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Activate the app context"}],"type":"Then","sequence":3,"id":"q6130nx4eo-cn3sqjqh0g-gqwfa4fed","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            appContextSelectedSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Activate the app context","description":"","tags":[],"sequence":2,"id":"q6130nx4eo-cn3sqjqh0g"}],"title":"A component representing an item in the app catalog","description":"Provides:\n* The ability to select the app\n* The ability to select the app context","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/AppCatalogItem.Spec.js","id":"q6130nx4eo","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"commands are generated for an app","status":"pass","exception":{},"rawTitle":"commands are generated for an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rre29hryo-fjqk8p13cd-2rsti7j8y8","code":"() => {\r\n            commands = appCommandsHelper.getCommandsForApp({ appId: \"test\" }, scenarioOutlineContext.example.hideDetailsCommand);\r\n        }","duration":1},{"title":"all commands are activated","status":"pass","exception":{},"rawTitle":"all commands are activated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"2rre29hryo-fjqk8p13cd-jknq5g58nk","code":"() => {\r\n            commands.forEach(command => {\r\n                command.activateAsync();\r\n            });\r\n        }","duration":2},{"title":"then the command spy should be called for each command: with hideDetailsCommand = false","status":"pass","exception":{},"rawTitle":"then the command spy should be called for each command: with hideDetailsCommand = <hideDetailsCommand>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rre29hryo-fjqk8p13cd-lr2556um5c","code":"() => {\r\n            commandSpy.callCount.should.equal(commands.length);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["hideDetailsCommand"],["false"],["true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"commands are generated for an app","status":"pass","exception":{},"rawTitle":"commands are generated for an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rre29hryo-fjqk8p13cd-2rsti7j8y8","code":"() => {\r\n            commands = appCommandsHelper.getCommandsForApp({ appId: \"test\" }, scenarioOutlineContext.example.hideDetailsCommand);\r\n        }","duration":1},{"title":"all commands are activated","status":"pass","exception":{},"rawTitle":"all commands are activated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"2rre29hryo-fjqk8p13cd-jknq5g58nk","code":"() => {\r\n            commands.forEach(command => {\r\n                command.activateAsync();\r\n            });\r\n        }","duration":2},{"title":"then the command spy should be called for each command: with hideDetailsCommand = false","status":"pass","exception":{},"rawTitle":"then the command spy should be called for each command: with hideDetailsCommand = <hideDetailsCommand>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rre29hryo-fjqk8p13cd-lr2556um5c","code":"() => {\r\n            commandSpy.callCount.should.equal(commands.length);\r\n        }","duration":0}],"example":{"hideDetailsCommand":false},"title":"Activate the commands generated for an app","sequence":1,"id":"2rre29hryo-fjqk8p13cd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"commands are generated for an app","status":"pass","exception":{},"rawTitle":"commands are generated for an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rre29hryo-fjqk8p13cd-2rsti7j8y8","code":"() => {\r\n            commands = appCommandsHelper.getCommandsForApp({ appId: \"test\" }, scenarioOutlineContext.example.hideDetailsCommand);\r\n        }","duration":0},{"title":"all commands are activated","status":"pass","exception":{},"rawTitle":"all commands are activated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"2rre29hryo-fjqk8p13cd-jknq5g58nk","code":"() => {\r\n            commands.forEach(command => {\r\n                command.activateAsync();\r\n            });\r\n        }","duration":0},{"title":"then the command spy should be called for each command: with hideDetailsCommand = true","status":"pass","exception":{},"rawTitle":"then the command spy should be called for each command: with hideDetailsCommand = <hideDetailsCommand>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rre29hryo-fjqk8p13cd-h2ghachdd7","code":"() => {\r\n            commandSpy.callCount.should.equal(commands.length);\r\n        }","duration":0}],"example":{"hideDetailsCommand":true},"title":"Activate the commands generated for an app","sequence":2,"id":"2rre29hryo-fjqk8p13cd"}],"title":"Activate the commands generated for an app","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"commands are generated for an app","status":"pass","exception":{},"rawTitle":"commands are generated for an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rre29hryo-lqxqwcmcwl-2rsti7j8y8","code":"() => {\r\n            commands = appCommandsHelper.getCommandsForApp({ appId: \"test\" }, false);\r\n        }","duration":0},{"title":"an app command is pressed","status":"pass","exception":{},"rawTitle":"an app command is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"2rre29hryo-lqxqwcmcwl-jklyrip9ts","code":"() => {\r\n            const component = React.createElement(AppCatalog_1.AppCommandButtonsUnconnected, { app: { appId: \"test\" }, commands: commands, onCommandInvoked: onCommandInvokedSpy });\r\n            const wrapper = enzyme_1.shallow(component);\r\n            const commandButton = wrapper.find(\"Button\").first();\r\n            commandButton.simulate(\"press\");\r\n        }","duration":3},{"title":"then the command invoked spy should be called once","status":"pass","exception":{},"rawTitle":"then the command invoked spy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rre29hryo-lqxqwcmcwl-12s132308gz","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            onCommandInvokedSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"An app command is pressed","description":"","tags":[],"sequence":2,"id":"2rre29hryo-lqxqwcmcwl"}],"title":"A component to encapsulate the command buttons available for an app","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/AppCommandButtons.Spec.js","id":"2rre29hryo","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":33,"failedCount":0,"pendingCount":0,"totalCount":33,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the session details button is pressed","status":"pass","exception":{},"rawTitle":"the session details button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-mptbjnxe3h-jkrfmp6edc","code":"() => {\r\n            const sessionDetailsButton = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.SessionDetailsButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            sessionDetailsButton.should.not.be.undefined;\r\n            sessionDetailsButton.simulate(\"press\");\r\n        }","duration":2},{"title":"sessionDetailsSpy should be called once","status":"pass","exception":{},"rawTitle":"sessionDetailsSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-mptbjnxe3h-9z18605hgz","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            sessionDetailsSpy.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-mptbjnxe3h-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"View the session details","description":"","tags":[],"sequence":1,"id":"10s9q9q75wz-mptbjnxe3h"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the learn more button is pressed","status":"pass","exception":{},"rawTitle":"the learn more button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-mlfbuy5cxv-shl6y26rr7","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.LearnMoreButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"the linkingOpenStub should be called once","status":"pass","exception":{},"rawTitle":"the linkingOpenStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-mlfbuy5cxv-12cqaz26lfh","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            linkingOpenStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the correct url","status":"pass","exception":{},"rawTitle":"it should be called with the correct url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-mlfbuy5cxv-2968dxu4il","code":"() => {\r\n            linkingOpenStub.calledWith(Config_1.Constants.webLinks.LearnMore).should.be.eql(true);\r\n        }","duration":1},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10s9q9q75wz-mlfbuy5cxv-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Pressing the learn more button","description":"","tags":[],"sequence":2,"id":"10s9q9q75wz-mlfbuy5cxv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the support button is pressed","status":"pass","exception":{},"rawTitle":"the support button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-10s9s7qowy3-4mosazh5mt","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.SupportButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":2},{"title":"the linkingOpenStub should be called once","status":"pass","exception":{},"rawTitle":"the linkingOpenStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-10s9s7qowy3-12cqaz26lfh","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            linkingOpenStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the correct url","status":"pass","exception":{},"rawTitle":"it should be called with the correct url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-10s9s7qowy3-2968dxu4il","code":"() => {\r\n            linkingOpenStub.calledWith(Config_1.Constants.webLinks.Support).should.be.eql(true);\r\n        }","duration":1},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10s9q9q75wz-10s9s7qowy3-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Pressing the support button","description":"","tags":[],"sequence":3,"id":"10s9q9q75wz-10s9s7qowy3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the terms of use button is pressed","status":"pass","exception":{},"rawTitle":"the terms of use button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-16b7g5n88g0-jko31dlu00","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.TermsOfServiceButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"the linkingOpenStub should be called once","status":"pass","exception":{},"rawTitle":"the linkingOpenStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-16b7g5n88g0-12cqaz26lfh","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            linkingOpenStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the correct url","status":"pass","exception":{},"rawTitle":"it should be called with the correct url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-16b7g5n88g0-2968dxu4il","code":"() => {\r\n            linkingOpenStub.calledWith(Config_1.Constants.webLinks.TermsOfService).should.be.eql(true);\r\n        }","duration":0},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10s9q9q75wz-16b7g5n88g0-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Pressing the terms of use button","description":"","tags":[],"sequence":4,"id":"10s9q9q75wz-16b7g5n88g0"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the open source licenses button is pressed","status":"pass","exception":{},"rawTitle":"the open source licenses button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-17voze3l7nn-md8swdpqut","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.OpenSourceLicensesButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":0},{"title":"the linkingOpenStub should be called once","status":"pass","exception":{},"rawTitle":"the linkingOpenStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-17voze3l7nn-12cqaz26lfh","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            linkingOpenStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the correct url","status":"pass","exception":{},"rawTitle":"it should be called with the correct url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-17voze3l7nn-2968dxu4il","code":"() => {\r\n            linkingOpenStub.calledWith(Config_1.Constants.webLinks.OpenSourceLicenses).should.be.eql(true);\r\n        }","duration":0},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10s9q9q75wz-17voze3l7nn-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Pressing the open source licenses button","description":"","tags":[],"sequence":5,"id":"10s9q9q75wz-17voze3l7nn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the privacy statement button is pressed","status":"pass","exception":{},"rawTitle":"the privacy statement button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-163u6qfs9xn-mt90fv3fk3","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.PrivacyTermsButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":0},{"title":"the linkingOpenStub should be called once","status":"pass","exception":{},"rawTitle":"the linkingOpenStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-163u6qfs9xn-12cqaz26lfh","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            linkingOpenStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the correct url","status":"pass","exception":{},"rawTitle":"it should be called with the correct url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-163u6qfs9xn-2968dxu4il","code":"() => {\r\n            linkingOpenStub.calledWith(Config_1.Constants.webLinks.PrivacyTermsGDPR).should.be.eql(true);\r\n        }","duration":0},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10s9q9q75wz-163u6qfs9xn-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Pressing the privacy statement button","description":"","tags":[],"sequence":6,"id":"10s9q9q75wz-163u6qfs9xn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the debug options button is pressed","status":"pass","exception":{},"rawTitle":"the debug options button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-q5x5d7nxfk-o53n5vw9nh","code":"() => {\r\n            const debugOptionsButton = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.DebugOptionsButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            debugOptionsButton.should.not.be.undefined;\r\n            debugOptionsButton.simulate(\"press\");\r\n        }","duration":0},{"title":"openDebugDialogSpy should be called once","status":"pass","exception":{},"rawTitle":"openDebugDialogSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-q5x5d7nxfk-lqwrsu40zk","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            openDebugDialogSpy.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-q5x5d7nxfk-15wfwpnag5x","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Open the debug dialog","description":"","tags":[],"sequence":7,"id":"10s9q9q75wz-q5x5d7nxfk"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the clear cache button is pressed","status":"pass","exception":{},"rawTitle":"the clear cache button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-16b231b0ue8-12z0uln4f7","code":"() => {\r\n            const button = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.ClearCacheButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            button.should.not.be.undefined;\r\n            button.simulate(\"press\");\r\n        }","duration":0},{"title":"clearCache should be called once","status":"pass","exception":{},"rawTitle":"clearCache should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-16b231b0ue8-lqxfewhdcw","code":"() => {\r\n            openClearCacheDialogSpy.calledOnce.should.be.eql(true, \"openClearCacheDialogSpy should be called once\");\r\n        }","duration":0},{"title":"closeDrawer should be called once","status":"pass","exception":{},"rawTitle":"closeDrawer should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10s9q9q75wz-16b231b0ue8-15wfve10j6t","code":"() => {\r\n            closeDrawerSpy.calledOnce.should.be.eql(true, \"closeDrawer should be called once\");\r\n        }","duration":0}],"title":"Pressing the clear cache button","description":"","tags":[],"sequence":8,"id":"10s9q9q75wz-16b231b0ue8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the sign out button is pressed","status":"pass","exception":{},"rawTitle":"the sign out button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-b5252f9m7v-jkmhxr87eo","code":"() => {\r\n            const signOutButton = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.SignOutButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            signOutButton.should.not.be.undefined;\r\n            signOutButton.simulate(\"press\");\r\n        }","duration":1},{"title":"signOutSpy should be called once","status":"pass","exception":{},"rawTitle":"signOutSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-b5252f9m7v-1106a3717hn","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            signOutSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"User signs out of PowerApps","description":"","tags":[],"sequence":9,"id":"10s9q9q75wz-b5252f9m7v"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the close button is pressed","status":"pass","exception":{},"rawTitle":"the close button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10s9q9q75wz-16b9e2d8f8g-jkn17rijdc","code":"() => {\r\n            const closeButton = wrapper.find({ testID: DrawerContent_1.DrawerContentUnconnectedTestIDs.CloseButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeButton.should.not.be.undefined;\r\n            closeButton.simulate(\"press\");\r\n        }","duration":1},{"title":"closeDrawerSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDrawerSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10s9q9q75wz-16b9e2d8f8g-falncidtpv","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDrawerSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"User presses the close button","description":"","tags":[],"sequence":10,"id":"10s9q9q75wz-16b9e2d8f8g"}],"title":"Provide a component for showing the current user info, links to product help and about information and diagnostic information","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/DrawerContent.spec.js","id":"10s9q9q75wz","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":26,"failedCount":0,"pendingCount":0,"totalCount":26,"totalRuleViolations":0,"duration":26,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":26,"failedCount":0,"pendingCount":0,"totalCount":26,"totalRuleViolations":0,"duration":26,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 5S portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-cn9ve9a600","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":6},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["device","screenWidth","screenHeight","drawerWidth"],["iPhone 5S portrait","320","568","320"],["iPhone 5S landscape","568","320","320"],["iPhone 7 portrait","375","667","320"],["iPhone 7 landscape","667","375","320"],["iPhone 7+ portrait","441","736","320"],["iPhone 7+ landscape","736","441","320"],["iPad portrait","768","1024","320"],["iPad landscape","1024","768","320"],["Google Pixel portrait","411","731","320"],["Google Pixel landscape","731","411","320"],["Android One portrait","320","569","320"],["Android One landscape","569","320","320"],["Smaller than 320","300","549","300"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 5S portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-cn9ve9a600","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":6},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":1}],"example":{"device":"iPhone 5S portrait","screenWidth":320,"screenHeight":568,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 5S landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-2vm5j9ygq5","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPhone 5S landscape","screenWidth":568,"screenHeight":320,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 7 portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-cn9gkjtklc","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPhone 7 portrait","screenWidth":375,"screenHeight":667,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":3,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 7 landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-x15u1m1y51","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPhone 7 landscape","screenWidth":667,"screenHeight":375,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":4,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 7+ portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-z5p8krhwqj","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":3},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPhone 7+ portrait","screenWidth":441,"screenHeight":736,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":5,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPhone 7+ landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-2vm16zee5v","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPhone 7+ landscape","screenWidth":736,"screenHeight":441,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":6,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPad portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-mulin5bqj1","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":0},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPad portrait","screenWidth":768,"screenHeight":1024,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":7,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for iPad landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-lr4ksacd5s","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"iPad landscape","screenWidth":1024,"screenHeight":768,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":8,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for Google Pixel portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-uw1q6y4ptf","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"Google Pixel portrait","screenWidth":411,"screenHeight":731,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":9,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for Google Pixel landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-144l2au5wb1","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":7},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"Google Pixel landscape","screenWidth":731,"screenHeight":411,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":10,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for Android One portrait","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-505o5zyiud","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"Android One portrait","screenWidth":320,"screenHeight":569,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":11,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for Android One landscape","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-lqvdwzx83k","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":0},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":0}],"example":{"device":"Android One landscape","screenWidth":569,"screenHeight":320,"drawerWidth":320},"title":"The drawer width is calculated correctly","sequence":12,"id":"a9xks7x6o5-on6m4n9vj7"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Drawer width is calculated for Smaller than 320","status":"pass","exception":{},"rawTitle":"Drawer width is calculated for <device>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a9xks7x6o5-on6m4n9vj7-8zdushgph","code":"() => {\r\n            dimensionsStub = sinon.stub(react_native_1.Dimensions, react_native_1.Dimensions.get.name, () => {\r\n                return {\r\n                    width: scenarioOutlineContext.example.screenWidth,\r\n                    height: scenarioOutlineContext.example.screenHeight\r\n                };\r\n            });\r\n            calculatedWidth = DrawerContent_1.DrawerContentUnconnected.getDrawerWidth();\r\n        }","duration":1},{"title":"width should be calculated correctly","status":"pass","exception":{},"rawTitle":"width should be calculated correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a9xks7x6o5-on6m4n9vj7-on6nk1c0zf","code":"() => {\r\n            calculatedWidth.should.equal(scenarioOutlineContext.example.drawerWidth, scenarioOutlineContext.example.device);\r\n        }","duration":1}],"example":{"device":"Smaller than 320","screenWidth":300,"screenHeight":549,"drawerWidth":300},"title":"The drawer width is calculated correctly","sequence":13,"id":"a9xks7x6o5-on6m4n9vj7"}],"title":"The drawer width is calculated correctly","description":"","tags":[]}],"title":"Provide the width for the drawer","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/DrawerContent.spec.js","id":"a9xks7x6o5","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dismissing the featured app","status":"pass","exception":{},"rawTitle":"dismissing the featured app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rwapykq80-10u08kxhqzp-135ppuuul1f","code":"() => {\r\n            const app = {\r\n                appId: \"TestId\",\r\n                appName: \"TestName\",\r\n                backgroundColor: \"blue\",\r\n                iconUrl: \"\",\r\n                playerPackageUrl: \"http://test.package.url\",\r\n                webPackageUrl: \"http://test.webpackage.url\",\r\n                owner: \"TestOwner\",\r\n                environment: \"TestEnvironment\"\r\n            };\r\n            component = React.createElement(AppCatalog_1.FeaturedApp, { app: app, onAppContextSelected: () => { }, onAppSelected: () => { }, dismissFeaturedApp: dismissFeaturedAppSpy });\r\n            const wrapper = enzyme_1.shallow(component);\r\n            const dismissButton = wrapper.find({ testID: AppCatalog_1.FeaturedAppTestIDs.DismissButton });\r\n            // tslint:disable-next-line:no-unused-expression\r\n            dismissButton.should.not.be.undefined;\r\n            dismissButton.simulate(\"press\");\r\n        }","duration":2},{"title":"dismissFeaturedAppSpy should be called once","status":"pass","exception":{},"rawTitle":"dismissFeaturedAppSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rwapykq80-10u08kxhqzp-4ngy2q2ced","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            dismissFeaturedAppSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Dismiss the featured app","description":"","tags":[],"sequence":1,"id":"2rwapykq80-10u08kxhqzp"}],"title":"Provide a component for the featured app","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/FeaturedApp.Spec.js","id":"2rwapykq80","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":34,"failedCount":0,"pendingCount":0,"totalCount":34,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by All apps","status":"pass","exception":{},"rawTitle":"the user filters app list by <humanReadableAppTypeToFilterBy> apps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs-a59lu1jaio","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let appCatalogMockService = new Mocks_1.AppCatalogMockService(scenarioOutlineContext.example.expectedNumberOfApps);\r\n            let allApps = yield appCatalogMockService.getAppsAsync();\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, \"\");\r\n        })","duration":1},{"title":"only All should be shown","status":"pass","exception":{},"rawTitle":"only <humanReadableAppTypeToFilterBy> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs-16b7pge230g","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appTypeToFilterBy","humanReadableAppTypeToFilterBy","numberOfUserApps","numberOfSampleApps","expectedNumberOfApps"],["15","\"All\"","5","5","10"],["15","\"All\"","3","2","5"],["4","\"Sample\"","5","5","5"],["4","\"Sample\"","3","2","2"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by All apps","status":"pass","exception":{},"rawTitle":"the user filters app list by <humanReadableAppTypeToFilterBy> apps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs-a59lu1jaio","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let appCatalogMockService = new Mocks_1.AppCatalogMockService(scenarioOutlineContext.example.expectedNumberOfApps);\r\n            let allApps = yield appCatalogMockService.getAppsAsync();\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, \"\");\r\n        })","duration":1},{"title":"only All should be shown","status":"pass","exception":{},"rawTitle":"only <humanReadableAppTypeToFilterBy> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs-16b7pge230g","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"appTypeToFilterBy":15,"humanReadableAppTypeToFilterBy":"All","numberOfUserApps":5,"numberOfSampleApps":5,"expectedNumberOfApps":10},"title":"User filters app list by type","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by All apps","status":"pass","exception":{},"rawTitle":"the user filters app list by <humanReadableAppTypeToFilterBy> apps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs-a59lu1jaio","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let appCatalogMockService = new Mocks_1.AppCatalogMockService(scenarioOutlineContext.example.expectedNumberOfApps);\r\n            let allApps = yield appCatalogMockService.getAppsAsync();\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, \"\");\r\n        })","duration":0},{"title":"only All should be shown","status":"pass","exception":{},"rawTitle":"only <humanReadableAppTypeToFilterBy> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs-16b7pge230g","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"appTypeToFilterBy":15,"humanReadableAppTypeToFilterBy":"All","numberOfUserApps":3,"numberOfSampleApps":2,"expectedNumberOfApps":5},"title":"User filters app list by type","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by Sample apps","status":"pass","exception":{},"rawTitle":"the user filters app list by <humanReadableAppTypeToFilterBy> apps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs-a543x57li8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let appCatalogMockService = new Mocks_1.AppCatalogMockService(scenarioOutlineContext.example.expectedNumberOfApps);\r\n            let allApps = yield appCatalogMockService.getAppsAsync();\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, \"\");\r\n        })","duration":0},{"title":"only Sample should be shown","status":"pass","exception":{},"rawTitle":"only <humanReadableAppTypeToFilterBy> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs-txhp96b4h7","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"appTypeToFilterBy":4,"humanReadableAppTypeToFilterBy":"Sample","numberOfUserApps":5,"numberOfSampleApps":5,"expectedNumberOfApps":5},"title":"User filters app list by type","sequence":3,"id":"cnay5tfcf4-lqvpfw56xs"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by Sample apps","status":"pass","exception":{},"rawTitle":"the user filters app list by <humanReadableAppTypeToFilterBy> apps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-lqvpfw56xs-a543x57li8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let appCatalogMockService = new Mocks_1.AppCatalogMockService(scenarioOutlineContext.example.expectedNumberOfApps);\r\n            let allApps = yield appCatalogMockService.getAppsAsync();\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, \"\");\r\n        })","duration":0},{"title":"only Sample should be shown","status":"pass","exception":{},"rawTitle":"only <humanReadableAppTypeToFilterBy> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-lqvpfw56xs-txhp96b4h7","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"appTypeToFilterBy":4,"humanReadableAppTypeToFilterBy":"Sample","numberOfUserApps":3,"numberOfSampleApps":2,"expectedNumberOfApps":2},"title":"User filters app list by type","sequence":4,"id":"cnay5tfcf4-lqvpfw56xs"}],"title":"User filters app list by type","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string User","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-7nxhq9dhlc","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string User should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-16b31eg9dls","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["search","app1Name","app2Name","app3Name","expectedNumberOfApps"],["User","UserApp1","UserApp2","SampleApp1","2"],["user","UserApp1","UserApp2","SampleApp1","2"],["se","UserApp1","UserApp2","SampleApp1","2"],["sample","UserApp1","UserApp2","SampleApp1","1"],["UserApp1","UserApp1","UserApp2","SampleApp1","1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string User","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-7nxhq9dhlc","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string User should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-16b31eg9dls","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"search":"User","app1Name":"UserApp1","app2Name":"UserApp2","app3Name":"SampleApp1","expectedNumberOfApps":2},"title":"User filters by search","sequence":1,"id":"cnay5tfcf4-seks7ke874"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string user","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-7o1d5k5zpc","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string user should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-16b5oaqrv0g","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"search":"user","app1Name":"UserApp1","app2Name":"UserApp2","app3Name":"SampleApp1","expectedNumberOfApps":2},"title":"User filters by search","sequence":2,"id":"cnay5tfcf4-seks7ke874"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string se","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-lqwmdn8w8w","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string se should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-8el0wehqqd","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"search":"se","app1Name":"UserApp1","app2Name":"UserApp2","app3Name":"SampleApp1","expectedNumberOfApps":2},"title":"User filters by search","sequence":3,"id":"cnay5tfcf4-seks7ke874"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string sample","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-paq69qf6x1","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string sample should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-8el0b6pfjh","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"search":"sample","app1Name":"UserApp1","app2Name":"UserApp2","app3Name":"SampleApp1","expectedNumberOfApps":1},"title":"User filters by search","sequence":4,"id":"cnay5tfcf4-seks7ke874"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user filters app list by search string UserApp1","status":"pass","exception":{},"rawTitle":"the user filters app list by search string <search>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-seks7ke874-pzsx2c5rhc","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appName = scenarioOutlineContext.example.app1Name;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appName = scenarioOutlineContext.example.app2Name;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appName = scenarioOutlineContext.example.app3Name;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, Shared_1.SortOption.ModifiedDate, scenarioOutlineContext.example.search);\r\n        }","duration":0},{"title":"only appNames containing the search string UserApp1 should be shown","status":"pass","exception":{},"rawTitle":"only appNames containing the search string <search> should be shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-seks7ke874-fi02a3rjcb","code":"() => {\r\n            apps.length.should.be.eql(scenarioOutlineContext.example.expectedNumberOfApps);\r\n        }","duration":0}],"example":{"search":"UserApp1","app1Name":"UserApp1","app2Name":"UserApp2","app3Name":"SampleApp1","expectedNumberOfApps":1},"title":"User filters by search","sequence":5,"id":"cnay5tfcf4-seks7ke874"}],"title":"User filters by search","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by Name","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-o5vojz4nff","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":2},{"title":"the apps should be in sorted order by Name","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-lr4hif3of4","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["sortOption","humanReadableSortOption","app1SortOptionPropertyValue","app2SortOptionPropertyValue","app3SortOptionPropertyValue","firstApp","secondApp","thirdApp"],["0","Name","Alex","Vincent","Max","app1","app3","app2"],["0","Name","Chris","Cherie","Claudio","app2","app1","app3"],["1","ModifiedDate","1","2","3","app3","app2","app1"],["1","ModifiedDate","2","3","1","app2","app1","app3"],["1","ModifiedDate","3","1","2","app1","app3","app2"],["2","OpenedDate","1","2","3","app3","app2","app1"],["2","OpenedDate","2","3","1","app2","app1","app3"],["2","OpenedDate","3","1","2","app1","app3","app2"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by Name","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-o5vojz4nff","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":2},{"title":"the apps should be in sorted order by Name","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-lr4hif3of4","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":0,"humanReadableSortOption":"Name","app1SortOptionPropertyValue":"Alex","app2SortOptionPropertyValue":"Vincent","app3SortOptionPropertyValue":"Max","firstApp":"app1","secondApp":"app3","thirdApp":"app2"},"title":"User sorts their app list","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by Name","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-o5vojz4nff","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by Name","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-lr4hif3of4","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":0,"humanReadableSortOption":"Name","app1SortOptionPropertyValue":"Chris","app2SortOptionPropertyValue":"Cherie","app3SortOptionPropertyValue":"Claudio","firstApp":"app2","secondApp":"app1","thirdApp":"app3"},"title":"User sorts their app list","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by ModifiedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-lqvo0z21og","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by ModifiedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-15wfwpvrzf1","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":1,"humanReadableSortOption":"ModifiedDate","app1SortOptionPropertyValue":1,"app2SortOptionPropertyValue":2,"app3SortOptionPropertyValue":3,"firstApp":"app3","secondApp":"app2","thirdApp":"app1"},"title":"User sorts their app list","sequence":3,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by ModifiedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-lqvo0z21og","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by ModifiedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-15wfwpvrzf1","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":1,"humanReadableSortOption":"ModifiedDate","app1SortOptionPropertyValue":2,"app2SortOptionPropertyValue":3,"app3SortOptionPropertyValue":1,"firstApp":"app2","secondApp":"app1","thirdApp":"app3"},"title":"User sorts their app list","sequence":4,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by ModifiedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-lqvo0z21og","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by ModifiedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-15wfwpvrzf1","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":1,"humanReadableSortOption":"ModifiedDate","app1SortOptionPropertyValue":3,"app2SortOptionPropertyValue":1,"app3SortOptionPropertyValue":2,"firstApp":"app1","secondApp":"app3","thirdApp":"app2"},"title":"User sorts their app list","sequence":5,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by OpenedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-bqw80tte1x","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by OpenedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-dir0scl1sd","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":2,"humanReadableSortOption":"OpenedDate","app1SortOptionPropertyValue":1,"app2SortOptionPropertyValue":2,"app3SortOptionPropertyValue":3,"firstApp":"app3","secondApp":"app2","thirdApp":"app1"},"title":"User sorts their app list","sequence":6,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by OpenedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-bqw80tte1x","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by OpenedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-dir0scl1sd","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":2,"humanReadableSortOption":"OpenedDate","app1SortOptionPropertyValue":2,"app2SortOptionPropertyValue":3,"app3SortOptionPropertyValue":1,"firstApp":"app2","secondApp":"app1","thirdApp":"app3"},"title":"User sorts their app list","sequence":7,"id":"cnay5tfcf4-cn3ioggtc0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user sorts their app list by OpenedDate","status":"pass","exception":{},"rawTitle":"the user sorts their app list by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnay5tfcf4-cn3ioggtc0-bqw80tte1x","code":"() => {\r\n            let app1 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app1.appId = \"app1\";\r\n            app1[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app1SortOptionPropertyValue;\r\n            let app2 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app2.appId = \"app2\";\r\n            app2[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app2SortOptionPropertyValue;\r\n            let app3 = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            app3.appId = \"app3\";\r\n            app3[Shared_1.SortPropertyNames[scenarioOutlineContext.example.sortOption]] = scenarioOutlineContext.example.app3SortOptionPropertyValue;\r\n            let allApps = [app1, app2, app3];\r\n            apps = AppCatalog_1.FilteredAndSortedAppListHelpers.getFilteredAndSortedAppList(allApps, scenarioOutlineContext.example.sortOption, \"\");\r\n        }","duration":0},{"title":"the apps should be in sorted order by OpenedDate","status":"pass","exception":{},"rawTitle":"the apps should be in sorted order by <humanReadableSortOption>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnay5tfcf4-cn3ioggtc0-dir0scl1sd","code":"() => {\r\n            apps[0].appId.should.be.eql(scenarioOutlineContext.example.firstApp);\r\n            apps[1].appId.should.be.eql(scenarioOutlineContext.example.secondApp);\r\n            apps[2].appId.should.be.eql(scenarioOutlineContext.example.thirdApp);\r\n        }","duration":0}],"example":{"sortOption":2,"humanReadableSortOption":"OpenedDate","app1SortOptionPropertyValue":3,"app2SortOptionPropertyValue":1,"app3SortOptionPropertyValue":2,"firstApp":"app1","secondApp":"app3","thirdApp":"app2"},"title":"User sorts their app list","sequence":8,"id":"cnay5tfcf4-cn3ioggtc0"}],"title":"User sorts their app list","description":"","tags":[]}],"title":"Displaying the the user's app list","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/FilteredAndSortedAppListHelpers.Spec.js","id":"cnay5tfcf4","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the cancel button is pressed","status":"pass","exception":{},"rawTitle":"the cancel button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q61uaqq64g-aektmxwbyb-jkog6qiqw0","code":"() => {\r\n            const cancelButton = wrapper.find(\"HeaderButton\").first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            cancelButton.should.not.be.undefined;\r\n            cancelButton.simulate(\"press\");\r\n        }","duration":0},{"title":"cancelSearch should be called once","status":"pass","exception":{},"rawTitle":"cancelSearch should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q61uaqq64g-aektmxwbyb-lr1xwxr8zk","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            cancelSearchSpy.calledOnce.should.be.true;\r\n        }","duration":1}],"title":"Cancel the search","description":"","tags":[],"sequence":1,"id":"q61uaqq64g-aektmxwbyb"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"\"some search text\" is entered\"","status":"pass","exception":{},"rawTitle":"\"some search text\" is entered\"","description":"","docString":"","values":["some search text"],"ruleViolations":[],"type":"When","sequence":1,"id":"q61uaqq64g-oikdkevc9f-cig4t87su8","code":"() => {\r\n            const textInput = wrapper.find(\"TextBox\");\r\n            // tslint:disable-next-line:no-unused-expression\r\n            textInput.should.not.be.undefined;\r\n            whenContext = stepContext;\r\n            textInput.simulate(\"changeText\", whenContext.values[0]);\r\n        }","duration":0},{"title":"the searchApps should be called once","status":"pass","exception":{},"rawTitle":"the searchApps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q61uaqq64g-oikdkevc9f-2vm0kcp02z","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            searchAppsSpy.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the searchApps should be called with the text entered","status":"pass","exception":{},"rawTitle":"the searchApps should be called with the text entered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"q61uaqq64g-oikdkevc9f-bq3ualzrc3","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            searchAppsSpy.calledWith(whenContext.values[0]).should.be.true;\r\n        }","duration":0}],"title":"Enter search text","description":"","tags":[],"sequence":2,"id":"q61uaqq64g-oikdkevc9f"}],"title":"A component to encapsulate the search UI for the app catalog","description":"Provides:\n* The ability to handle entered text\n* The ability to cancel the search","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppCatalog/Search.Spec.js","id":"q61uaqq64g","path":"Components/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppDetails is rendered","status":"pass","exception":{},"rawTitle":"AppDetails is rendered","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"6j19lhkrbp-jkro71j3cw-jkor6ruxi8","code":"() => {\r\n            onAppDetailsOpened.reset();\r\n            const appInfo = Mocks_1.AppCatalogMockService.createBasicAppInfo();\r\n            const tree = (React.createElement(Components_1.UnconnectedAppDetails, { appInfo: appInfo, onAppDetailsOpened: onAppDetailsOpened, onAppDetailsDismissButtonPress: onAppDetailsDismissButtonPress }));\r\n            const wrapper = enzyme_1.shallow(tree);\r\n        }","duration":4},{"title":"onAppDetailsOpened is called once","status":"pass","exception":{},"rawTitle":"onAppDetailsOpened is called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"6j19lhkrbp-jkro71j3cw-yt0o6mzo8t","code":"() => {\r\n            onAppDetailsOpened.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The open callback is called when AppDetails is loaded","description":"","tags":[],"sequence":1,"id":"6j19lhkrbp-jkro71j3cw"}],"title":"When the user opens the app details","description":"Rules:\n* The open callback is called","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/AppDetails.Spec.js","id":"6j19lhkrbp","path":"Components"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":60,"failedCount":0,"pendingCount":0,"totalCount":60,"totalRuleViolations":30,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":60,"failedCount":0,"pendingCount":0,"totalCount":60,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@microsoft.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-9y90uovbd7","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":1},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["email","isValid"],["one@microsoft.com","true"],["two@holee.com","true"],["three@piedpiper.com","true"],["abc@telstra.com.au","true"],["on  e@microsoft.com","false"],["one@micr  osoft.com","false"],["one@microsoft.c  om","false"],["one@gmail.com","false"],["two@hotmail.com","false"],["three@outlook.com","false"],["four@live.com","false"],["five@yahoo.com","false"],["six@msn.com","false"],["seven@mac.com","false"],["eight@comcast.net","false"],["nine@charter.net","false"],["ten@cox.net","false"],["eleven@fastmail.fm","false"],["twelve@rogers.com","false"],["76576!87687.09798","false"],["@microsoft.com","false"],["abc@.com","false"],["one@one","false"],["one@one@email.com","false"],["","false"],["a@a.a","false"],["a@aa","false"],["a@aa.a","false"],["a@a.aa","true"],["a@a.a.","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@microsoft.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-9y90uovbd7","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":1},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@microsoft.com","isValid":true},"title":"user enters his email","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'two@holee.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkj5ajph40","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"two@holee.com","isValid":true},"title":"user enters his email","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'three@piedpiper.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-17niida3o9x","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"three@piedpiper.com","isValid":true},"title":"user enters his email","sequence":3,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'abc@telstra.com.au' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkl20u598g","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"abc@telstra.com.au","isValid":true},"title":"user enters his email","sequence":4,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'on  e@microsoft.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-iwrnkazr0l","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"on  e@microsoft.com","isValid":false},"title":"user enters his email","sequence":5,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@micr  osoft.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkp6sro9ts","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@micr  osoft.com","isValid":false},"title":"user enters his email","sequence":6,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@microsoft.c  om' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkq1u5qt8g","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@microsoft.c  om","isValid":false},"title":"user enters his email","sequence":7,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@gmail.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jklacoz7mo","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@gmail.com","isValid":false},"title":"user enters his email","sequence":8,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'two@hotmail.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-143spbuj6tv","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"two@hotmail.com","isValid":false},"title":"user enters his email","sequence":9,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'three@outlook.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-40do47vusb","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"three@outlook.com","isValid":false},"title":"user enters his email","sequence":10,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'four@live.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkq2fuhp6o","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":1},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"four@live.com","isValid":false},"title":"user enters his email","sequence":11,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'five@yahoo.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkrgof0yu8","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":1},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"five@yahoo.com","isValid":false},"title":"user enters his email","sequence":12,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'six@msn.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-pwygchswtx","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"six@msn.com","isValid":false},"title":"user enters his email","sequence":13,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'seven@mac.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkrnlcqx40","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":1}],"example":{"email":"seven@mac.com","isValid":false},"title":"user enters his email","sequence":14,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'eight@comcast.net' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkpweywjcw","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"eight@comcast.net","isValid":false},"title":"user enters his email","sequence":15,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'nine@charter.net' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkimstu8xs","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"nine@charter.net","isValid":false},"title":"user enters his email","sequence":16,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'ten@cox.net' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-na6d12m545","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"ten@cox.net","isValid":false},"title":"user enters his email","sequence":17,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'eleven@fastmail.fm' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-6ejfljrhsz","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":1}],"example":{"email":"eleven@fastmail.fm","isValid":false},"title":"user enters his email","sequence":18,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'twelve@rogers.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkqgh5d73k","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"twelve@rogers.com","isValid":false},"title":"user enters his email","sequence":19,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email '76576!87687.09798' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkpn1e8vcw","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"76576!87687.09798","isValid":false},"title":"user enters his email","sequence":20,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email '@microsoft.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-9y90vmtdaj","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"@microsoft.com","isValid":false},"title":"user enters his email","sequence":21,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'abc@.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-17niizobibx","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":1}],"example":{"email":"abc@.com","isValid":false},"title":"user enters his email","sequence":22,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@one' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkr2l40o5c","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@one","isValid":false},"title":"user enters his email","sequence":23,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'one@one@email.com' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkqtmmiw00","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"one@one@email.com","isValid":false},"title":"user enters his email","sequence":24,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email '' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-xt5ls1kms3","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"","isValid":false},"title":"user enters his email","sequence":25,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'a@a.a' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-ol3tc7u6h7","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"a@a.a","isValid":false},"title":"user enters his email","sequence":26,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'a@aa' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-rot7t7zz1p","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"a@aa","isValid":false},"title":"user enters his email","sequence":27,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'a@aa.a' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkjm0uqi68","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"a@aa.a","isValid":false},"title":"user enters his email","sequence":28,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'a@a.aa' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkmiiqja5c","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'true'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-ggspgrskio","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"a@a.aa","isValid":true},"title":"user enters his email","sequence":29,"id":"udsgvs4xf7-17tzz49kr4t"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the email 'a@a.a.' entered","status":"pass","exception":{},"rawTitle":"the email '<email>' entered","description":"","docString":"","values":["<email>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"udsgvs4xf7-17tzz49kr4t-jkjjutqtk0","code":"() => {\r\n            let email = scenarioOutlineContext.example.email;\r\n            validationResult = Authentication_1.UnconnectedLoginScreen.isEmailValid(email);\r\n        }","duration":0},{"title":"isValid email is 'false'","status":"pass","exception":{},"rawTitle":"isValid email is '<isValid>'","description":"","docString":"","values":["<isValid>"],"ruleViolations":[{"rule":5,"title":"user enters his email"}],"type":"Then","sequence":2,"id":"udsgvs4xf7-17tzz49kr4t-4mm86gkslv","code":"() => {\r\n            validationResult.should.be.eql(scenarioOutlineContext.example.isValid);\r\n        }","duration":0}],"example":{"email":"a@a.a.","isValid":false},"title":"user enters his email","sequence":30,"id":"udsgvs4xf7-17tzz49kr4t"}],"title":"user enters his email","description":"","tags":[]}],"title":"Validation of user entered emails.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/EmailValidationHelper.Spec.js","id":"udsgvs4xf7","path":"Components/Authentication"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user adds the connection","status":"pass","exception":{},"rawTitle":"the user adds the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"141awpflo9v-16b3ve4gx40-q54wjteys3","code":"() => {\r\n            let element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreen, { connectionReferenceId: connectionReferenceId, iconUri: \"iconUri\", displayName: \"displayName\", apiDescription: \"description\", termsOfUseUri: \"termsOfUse\", connectionParameters: [], onAddConnection: connectionAddStub, onCancel: null, gatewayObjectIdHint: \"\" }));\r\n            let wrapper = enzyme_1.shallow(element);\r\n            let button = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreenTestIDs.addConnectionButton }).first();\r\n            button.simulate(\"press\");\r\n        }","duration":3},{"title":"the connectionAdd is called","status":"pass","exception":{},"rawTitle":"the connectionAdd is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"141awpflo9v-16b3ve4gx40-86e7w7qy43","code":"() => {\r\n            connectionAddStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The user adds a connection","description":"","tags":[],"sequence":1,"id":"141awpflo9v-16b3ve4gx40"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user adds the connection","status":"pass","exception":{},"rawTitle":"the user adds the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"141awpflo9v-omd351bzh9-q54wjteys3","code":"() => {\r\n            connectionParameters = [\r\n                {\r\n                    parameterName: parameterName,\r\n                    displayName: parameterName,\r\n                    isRequired: true,\r\n                    parameterType: AppMagic.ConnectionHub.ParameterType.Integer,\r\n                    allowedValues: null,\r\n                    secureTextEntry: false\r\n                }\r\n            ];\r\n            let element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreen, { connectionReferenceId: connectionReferenceId, iconUri: \"iconUri\", displayName: \"displayName\", apiDescription: \"description\", termsOfUseUri: null, connectionParameters: connectionParameters, onAddConnection: connectionAddStub, onCancel: null, gatewayObjectIdHint: \"\" }));\r\n            let wrapper = enzyme_1.shallow(element);\r\n            // trigger updating a parameter\r\n            let parameterList = wrapper.find(\"ParameterListComponent\").first();\r\n            parameterList.simulate(\"parameterChange\", parameterName, parameterValue);\r\n            let button = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreenTestIDs.addConnectionButton }).first();\r\n            button.simulate(\"press\");\r\n        }","duration":2},{"title":"the connectionAdd is called","status":"pass","exception":{},"rawTitle":"the connectionAdd is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"141awpflo9v-omd351bzh9-86e7w7qy43","code":"() => {\r\n            connectionAddStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the updated parameters are passed to the connection add stub","status":"pass","exception":{},"rawTitle":"the updated parameters are passed to the connection add stub","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"141awpflo9v-omd351bzh9-17lywwo4qm5","code":"() => {\r\n            connectionAddStub.firstCall.args[0][parameterName].should.be.eql(parameterValue);\r\n        }","duration":0}],"title":"The user adds a connection with parameters","description":"","tags":[],"sequence":2,"id":"141awpflo9v-omd351bzh9"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user decides not to add the connection","status":"pass","exception":{},"rawTitle":"the user decides not to add the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"141awpflo9v-17vozfyf44b-4uv8usvfvf","code":"() => {\r\n            const element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreen, { connectionReferenceId: connectionReferenceId, iconUri: \"iconUri\", displayName: \"displayName\", apiDescription: \"description\", termsOfUseUri: \"termsOfUse\", connectionParameters: [], onAddConnection: connectionAddStub, onCancel: cancelStub, gatewayObjectIdHint: \"\" }));\r\n            const wrapper = enzyme_1.shallow(element);\r\n            const button = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedAddConnectionScreenTestIDs.cancelButton }).first();\r\n            button.simulate(\"press\");\r\n        }","duration":2},{"title":"the add connection action is not called","status":"pass","exception":{},"rawTitle":"the add connection action is not called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"141awpflo9v-17vozfyf44b-jkp00jodgw","code":"() => {\r\n            connectionAddStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"the cancel action is called","status":"pass","exception":{},"rawTitle":"the cancel action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"141awpflo9v-17vozfyf44b-4mos8mm0th","code":"() => {\r\n            connectionAddStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"The user chooses not to add the connection","description":"","tags":[],"sequence":3,"id":"141awpflo9v-17vozfyf44b"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the state is mapped to props","status":"pass","exception":{},"rawTitle":"the state is mapped to props","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"141awpflo9v-1392q3sdfet-a57ug43yu8","code":"() => {\r\n            let connections = new Map(RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1));\r\n            Utilities_1.bindStoreProviderWithState({ ConnectionsAndCapabilitiesState: Object.assign(mockConnectionsAndCapabilitiesState(), { connections: connections }) });\r\n            ownProps = { navigation: { state: { params: { connectionReferenceId } } } };\r\n            props = ConnectionsAndCapabilities_1.mapStateToProps(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IStoreProvider).getStore().getState(), ownProps);\r\n        }","duration":1},{"title":"the correct props are generated","status":"pass","exception":{},"rawTitle":"the correct props are generated","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"141awpflo9v-1392q3sdfet-h1o8be40n7","code":"() => {\r\n            const state = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IStoreProvider).getStore().getState();\r\n            const connection = state.ConnectionsAndCapabilitiesState.connections.get(connectionReferenceId);\r\n            props.connectionReferenceId.should.be.eql(ownProps.navigation.state.params.connectionReferenceId);\r\n            props.iconUri.should.be.eql(connection.iconUri);\r\n            props.displayName.should.be.eql(connection.displayName);\r\n            props.apiDescription.should.be.eql(\"\");\r\n            should.equal(props.termsOfUseUri, null);\r\n            props.connectionParameters.should.be.eql([]);\r\n            should.equal(props.gatewayObjectIdHint, undefined);\r\n        }","duration":0}],"title":"mapStateToProps correctly maps a state with no connection.addConnectionDisplayData to valid props.","description":"","tags":[],"sequence":4,"id":"141awpflo9v-1392q3sdfet"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the state is mapped to props","status":"pass","exception":{},"rawTitle":"the state is mapped to props","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"141awpflo9v-cn8gjcduhv-a57ug43yu8","code":"() => {\r\n            let connections = new Map();\r\n            connections.set(connectionReferenceId, RuntimeAppInfoGenerator.generateIConnectionDisplayDataFromConnectionReference(RuntimeAppInfoGenerator.generateBaseConnectionReference(connectionReferenceId), Mocks_1.TestConnectionDisplayData.mockApiPropertiesData()));\r\n            Utilities_1.bindStoreProviderWithState({ ConnectionsAndCapabilitiesState: Object.assign(mockConnectionsAndCapabilitiesState(), { connections: connections }) });\r\n            ownProps = { navigation: { state: { params: { connectionReferenceId } } } };\r\n            props = ConnectionsAndCapabilities_1.mapStateToProps(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IStoreProvider).getStore().getState(), ownProps);\r\n        }","duration":1},{"title":"the correct props are generated","status":"pass","exception":{},"rawTitle":"the correct props are generated","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"141awpflo9v-cn8gjcduhv-h1o8be40n7","code":"() => {\r\n            const state = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IStoreProvider).getStore().getState();\r\n            const connection = state.ConnectionsAndCapabilitiesState.connections.get(connectionReferenceId);\r\n            const addConnectionDisplayData = connection.addConnectionDisplayData;\r\n            props.connectionReferenceId.should.be.eql(ownProps.navigation.state.params.connectionReferenceId);\r\n            props.iconUri.should.be.eql(connection.iconUri);\r\n            props.displayName.should.be.eql(connection.displayName);\r\n            props.apiDescription.should.be.eql(addConnectionDisplayData.apiDescription);\r\n            props.termsOfUseUri.should.be.eql(addConnectionDisplayData.termsOfUseUri);\r\n            props.connectionParameters.should.be.eql(addConnectionDisplayData.parameters);\r\n            should.equal(props.gatewayObjectIdHint, undefined);\r\n        }","duration":0}],"title":"mapStateToProps correctly maps a state with NON-empty connection.addConnectionDisplayData to valid props.","description":"","tags":[],"sequence":5,"id":"141awpflo9v-cn8gjcduhv"}],"title":"When the user is adding a connection that requires parameters or terms of use consent","description":"Rules:\n* The user can add the connection\n* The user can cancel and not add a connection","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/AddConnectionScreen.Spec.js","id":"141awpflo9v","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection","status":"pass","exception":{},"rawTitle":"adding a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cnam9pxas0-oda9vdsq0t-16b1eod839c","code":"() => {\r\n            addConnectionStub = sinon.stub();\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            displayData = {\r\n                connectionReferenceId: connectionReferenceId,\r\n                iconUri: \"iconUri\",\r\n                displayName: \"displayName\",\r\n                showScopeLink: false,\r\n                hasSelectedConnection: false,\r\n                hasApiCreator: false,\r\n                showAddButton: true,\r\n                showChangeButton: false,\r\n                showEnterpriseTag: false,\r\n                showPremiumTag: false,\r\n                showPreviewTag: false,\r\n                availableConnections: [],\r\n                sharedConnectionId: \"\",\r\n                gatewayObjectIdHint: \"\",\r\n                isOnPremiseConnection: false,\r\n                dataSources: [],\r\n                id: \"\",\r\n                showDataSets: false,\r\n            };\r\n            element = React.createElement(ConnectionsAndCapabilities_1.ConnectionListItemView, { connectionReferenceId: connectionReferenceId, key: connectionReferenceId, isLoading: false, displayData: displayData, onAddConnectionPressed: addConnectionStub, onScopeLinkPressed: () => { }, onSwitchConnectionPressed: () => { }, onFixConnectionPressed: () => { }, onDataSetSelected: () => { } });\r\n            wrapper = enzyme_1.shallow(element);\r\n            addConnectionButton = wrapper.find(\"BrandButton\").first();\r\n            addConnectionButton.simulate(\"press\");\r\n        }","duration":2},{"title":"the connection will be added","status":"pass","exception":{},"rawTitle":"the connection will be added","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cnam9pxas0-oda9vdsq0t-rot8fj1a0t","code":"() => {\r\n            addConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"the connection reference id is passed to add the connection","status":"pass","exception":{},"rawTitle":"the connection reference id is passed to add the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cnam9pxas0-oda9vdsq0t-16b0k06d9s0","code":"() => {\r\n            addConnectionStub.calledWith(connectionReferenceId).should.be.eql(true);\r\n        }","duration":0}],"title":"The user is adding a connection","description":"","tags":[],"sequence":1,"id":"cnam9pxas0-oda9vdsq0t"}],"title":"When the user is viewing a connection item with the list","description":"Rules:\n* The user can add a connection\n* The user can view the scopes available for the connection\n* The user can switch their connection\n* The user can fix their connection","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/ConnectionListItemView.Spec.js","id":"cnam9pxas0","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user presses the link to view permissions","status":"pass","exception":{},"rawTitle":"the user presses the link to view permissions","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"rwzqi4himb-135jhiwge3v-m9ulbxyb6l","code":"() => {\r\n            link.simulate(\"press\");\r\n        }","duration":0},{"title":"the permissions can be viewed","status":"pass","exception":{},"rawTitle":"the permissions can be viewed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"rwzqi4himb-135jhiwge3v-md8uxxia71","code":"() => {\r\n            permissionsViewed.should.be.eql(true);\r\n        }","duration":0}],"title":"The user views the permissions for the connection","description":"","tags":[],"sequence":1,"id":"rwzqi4himb-135jhiwge3v"}],"title":"When the user is viewing permissions on a connection","description":"Rules:\n* The user can view their permissions","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/ConnectionScopeLink.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the user is viewing their connection item","status":"pass","exception":{},"rawTitle":"that the user is viewing their connection item","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"rwzqi4himb-9pbsb4-13xrkxazq3k","code":"() => {\r\n            permissionsViewed = false;\r\n            element = React.createElement(ConnectionScopeLink_1.ConnectionScopeLink, { onPress: () => { permissionsViewed = true; } });\r\n            wrapper = enzyme_1.shallow(element);\r\n            link = wrapper.find(\"LinkLabel\").first();\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"rwzqi4himb-9pbsb4"},"id":"rwzqi4himb","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user clicks the button to go back to the connections list","status":"pass","exception":{},"rawTitle":"the user clicks the button to go back to the connections list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b6c11vxj4-6vt0h13zk3-qaf76gn5ir","code":"() => {\r\n            button.simulate(\"press\");\r\n        }","duration":0},{"title":"the user is navigated back to the connections list","status":"pass","exception":{},"rawTitle":"the user is navigated back to the connections list","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b6c11vxj4-6vt0h13zk3-6s0gqbw1nx","code":"() => {\r\n            onCloseStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The user wants to go back to the list of connections","description":"","tags":[],"sequence":1,"id":"16b6c11vxj4-6vt0h13zk3"}],"title":"When the user is viewing the scopes for a connection","description":"Rules:\n* The user can go back to their list of connections","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/ConnectionScopeScreen.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the user is viewing the scopes for their connection","status":"pass","exception":{},"rawTitle":"that the user is viewing the scopes for their connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b6c11vxj4-9pbsb4-ilogm6itnx","code":"() => {\r\n            const element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedConnectionScopeScreen, { displayName: \"displayName\", iconUri: \"iconUri\", description: \"description\", will: [\"item1\"], wont: [], onClose: onCloseStub }));\r\n            const wrapper = enzyme_1.shallow(element);\r\n            button = wrapper.find(\"BrandButton\").first();\r\n        }","duration":6}],"title":"","description":"","tags":[],"id":"16b6c11vxj4-9pbsb4"},"id":"16b6c11vxj4","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fixing the connection","status":"pass","exception":{},"rawTitle":"fixing the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q54xktsp03-16b6q2gyx5s-16b0yzjicww","code":"() => {\r\n            fixConnectionPressStub = sinon.stub();\r\n            element = React.createElement(ConnectionStatus_1.ConnectionStatusUnconnected, { hasSelectedConnection: true, selectedConnectionDisplayName: \"displayName\", isSelectedConnectionAuthenticated: false, showScopeLink: false, onScopeLinkPress: () => { }, onFixConnectionPress: fixConnectionPressStub, screenInfo: Mocks_1.screenInfoSMMock });\r\n            wrapper = enzyme_1.shallow(element);\r\n            fixConnectionLink = wrapper.find(\"BrandButton\").first();\r\n            fixConnectionLink.simulate(\"press\");\r\n        }","duration":1},{"title":"the connection is fixed","status":"pass","exception":{},"rawTitle":"the connection is fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q54xktsp03-16b6q2gyx5s-md8ugyh8fx","code":"() => {\r\n            fixConnectionPressStub.calledOnce.should.be.eql(true);\r\n        }","duration":1}],"title":"The user fixes the connection","description":"","tags":[],"sequence":1,"id":"q54xktsp03-16b6q2gyx5s"}],"title":"When the user is viewing the status of the connection","description":"Rules:\n* They can fix the connection","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/ConnectionStatus.Spec.js","id":"q54xktsp03","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user selects a connection to switch to","status":"pass","exception":{},"rawTitle":"the user selects a connection to switch to","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"czmiqwvmo-a6fuhqt1bh-9pmez9xo77","code":"() => {\r\n            connectionSwitchedStub = sinon.stub();\r\n            connectionId = \"connectionId\";\r\n            element = React.createElement(SwitchConnectionItem_1.SwitchConnectionItem, { key: \"key\", connectionId: connectionId, displayName: \"displayName\", isSelected: false, onSetSelectedConnection: connectionSwitchedStub });\r\n            wrapper = enzyme_1.shallow(element);\r\n            button = wrapper.find(Components_1.Touchable).first();\r\n            button.simulate(\"press\");\r\n        }","duration":2},{"title":"the connection is switched","status":"pass","exception":{},"rawTitle":"the connection is switched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"czmiqwvmo-a6fuhqt1bh-jkmxramx34","code":"() => {\r\n            connectionSwitchedStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the correct connection is switched","status":"pass","exception":{},"rawTitle":"the correct connection is switched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"czmiqwvmo-a6fuhqt1bh-jkr78yfzs0","code":"() => {\r\n            connectionSwitchedStub.calledWith(connectionId).should.be.eql(true);\r\n        }","duration":0}],"title":"The user switches the connection","description":"","tags":[],"sequence":1,"id":"czmiqwvmo-a6fuhqt1bh"}],"title":"When the user is viewing an available connection to switch to","description":"Rules:\n* The user can select the connection to switch to","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/SwitchConnectionItem.Spec.js","id":"czmiqwvmo","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user selects a connection to switch to","status":"pass","exception":{},"rawTitle":"the user selects a connection to switch to","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"czmiqwvmo-cu3bn9la8-9pmez9xo77","code":"() => {\r\n            const element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedSwitchConnectionScreen, { connectionReferenceId: connectionReferenceId, availableConnections: [{ connectionId: connectionId, displayName: \"displayName\" }], clientSelectedConnectionId: null, displayName: \"displayName\", iconUri: \"iconUri\", onDoNotChange: doNotChangeStub, onAddConnection: onAddConnectionStub, onSwitchConnection: onSwitchConnection }));\r\n            const wrapper = enzyme_1.shallow(element);\r\n            const button = wrapper.find(\"SwitchConnectionItem\").first();\r\n            button.simulate(\"setSelectedConnection\", connectionId);\r\n        }","duration":2},{"title":"onSwitchConnection is called","status":"pass","exception":{},"rawTitle":"onSwitchConnection is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"czmiqwvmo-cu3bn9la8-jkqam1o0ps","code":"() => {\r\n            onSwitchConnection.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"onSwitchConnection is called with the right params","status":"pass","exception":{},"rawTitle":"onSwitchConnection is called with the right params","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"czmiqwvmo-cu3bn9la8-aatildtkr7","code":"() => {\r\n            onSwitchConnection.calledWith(connectionReferenceId, connectionId).should.be.eql(true);\r\n        }","duration":0}],"title":"The user selects a connection to switch to","description":"","tags":[],"sequence":1,"id":"czmiqwvmo-cu3bn9la8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user selects a connection to switch to","status":"pass","exception":{},"rawTitle":"the user selects a connection to switch to","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"czmiqwvmo-16b2javit5s-9pmez9xo77","code":"() => {\r\n            const element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedSwitchConnectionScreen, { connectionReferenceId: connectionReferenceId, availableConnections: [{ connectionId: connectionId, displayName: \"displayName\" }], clientSelectedConnectionId: null, displayName: \"displayName\", iconUri: \"iconUri\", onDoNotChange: doNotChangeStub, onAddConnection: onAddConnectionStub, onSwitchConnection: onSwitchConnection }));\r\n            const wrapper = enzyme_1.shallow(element);\r\n            const button = wrapper.find(\"Button\").first();\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"onAddConnectionStub is called","status":"pass","exception":{},"rawTitle":"onAddConnectionStub is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"czmiqwvmo-16b2javit5s-jkp2mua5hs","code":"() => {\r\n            onAddConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The user adds a new connection","description":"","tags":[],"sequence":2,"id":"czmiqwvmo-16b2javit5s"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user decides not to switch the connection","status":"pass","exception":{},"rawTitle":"the user decides not to switch the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"czmiqwvmo-16b932bwo1s-16b8sskti5c","code":"() => {\r\n            const element = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedSwitchConnectionScreen, { connectionReferenceId: connectionReferenceId, availableConnections: [{ connectionId: connectionId, displayName: \"displayName\" }], clientSelectedConnectionId: null, displayName: \"displayName\", iconUri: \"iconUri\", onDoNotChange: doNotChangeStub, onAddConnection: onAddConnectionStub, onSwitchConnection: onSwitchConnection }));\r\n            const wrapper = enzyme_1.shallow(element);\r\n            const button = wrapper.find(\"BrandButton\").first();\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"onDoNotChange action is called","status":"pass","exception":{},"rawTitle":"onDoNotChange action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"czmiqwvmo-16b932bwo1s-13bfkabdxwb","code":"() => {\r\n            doNotChangeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The user chooses not to switch the connection","description":"","tags":[],"sequence":3,"id":"czmiqwvmo-16b932bwo1s"}],"title":"When the user is viewing an available connection to switch to","description":"Rules:\n* The user can select the connection to switch to\n* The user can add a new connection\n* The user can cancel and not switch a connection","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/Connections/SwitchConnectionScreen.Spec.js","id":"czmiqwvmo","path":"Components/ConnectionsAndCapabilities/Connections"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Component is loaded","status":"pass","exception":{},"rawTitle":"Component is loaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a53kqwqdnk-q9iqpqxw7n-jkr4iw2680","code":"() => {\r\n            // already happening in background.\r\n        }","duration":0},{"title":"onLoad is called","status":"pass","exception":{},"rawTitle":"onLoad is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a53kqwqdnk-q9iqpqxw7n-dhyrs7s5fh","code":"() => {\r\n            updateConnectionsDisplayDataAsync.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The most up to date connections information will be fetched on load if there are connections","description":"","tags":[],"sequence":1,"id":"a53kqwqdnk-q9iqpqxw7n"}],"title":"When the user is viewing permissions","description":"Rules:\n* The most up to date connections information will be fetched on load if there are connections","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/ConnectionsAndCapabilities.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connections and capabilities list is displayed","status":"pass","exception":{},"rawTitle":"the connections and capabilities list is displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a53kqwqdnk-9pbsb4-jkkocmbp9c","code":"() => {\r\n            updateConnectionsDisplayDataAsync.reset();\r\n            screen = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedConnectionsAndCapabilities, { connections: RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1), capabilities: [], authResources: [], connectionsUpdateInProgress: false, updateConnectionsDisplayDataAsync: updateConnectionsDisplayDataAsync, onAddConnection: null, onFixConnection: null, onScopeLinkPressed: null, onSwitchConnectionPressed: null, onDataSetSelected: null }));\r\n            wrapper = enzyme_1.shallow(screen);\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"a53kqwqdnk-9pbsb4"},"id":"a53kqwqdnk","path":"Components/ConnectionsAndCapabilities"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Component is loaded","status":"pass","exception":{},"rawTitle":"Component is loaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rr4ik62r4-md8obpvwnn-jkr4iw2680","code":"() => {\r\n            // already happening in background.\r\n        }","duration":1},{"title":"onLoad is called","status":"pass","exception":{},"rawTitle":"onLoad is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rr4ik62r4-md8obpvwnn-dhyrs7s5fh","code":"() => {\r\n            onLoad.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"The component sets its options when loaded","description":"","tags":[],"sequence":1,"id":"2rr4ik62r4-md8obpvwnn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user clicks on cancel.","status":"pass","exception":{},"rawTitle":"the user clicks on cancel.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rr4ik62r4-mwsp6si8e8-mwnszlgkow","code":"() => {\r\n            const cancelButton = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilitiesTestIDs.cancelButton });\r\n            cancelButton.simulate(\"press\");\r\n        }","duration":2},{"title":"the right action is called","status":"pass","exception":{},"rawTitle":"the right action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rr4ik62r4-mwsp6si8e8-jks5teowv4","code":"() => {\r\n            onCancelPressed.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"Cancel button works as expected.","description":"","tags":[],"sequence":2,"id":"2rr4ik62r4-mwsp6si8e8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user clicks on approve.","status":"pass","exception":{},"rawTitle":"the user clicks on approve.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rr4ik62r4-mwr3rus1s0-cn8kyp9m39","code":"() => {\r\n            const approveButton = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilitiesTestIDs.approveButton });\r\n            approveButton.simulate(\"press\");\r\n        }","duration":1},{"title":"the right action is called","status":"pass","exception":{},"rawTitle":"the right action is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rr4ik62r4-mwr3rus1s0-jks5teowv4","code":"() => {\r\n            onApprovePressed.calledOnce.should.be.eql(true);\r\n        }","duration":1}],"title":"Approve button works as expected.","description":"","tags":[],"sequence":3,"id":"2rr4ik62r4-mwr3rus1s0"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connections are valid.","status":"pass","exception":{},"rawTitle":"the connections are valid.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rr4ik62r4-jkqdljj8e8-61xm8fh62b","code":"() => {\r\n            screen = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilities, { appName: \"appName\", areConnectionsValid: true, onLoad: onLoad, onCancelPressed: onCancelPressed, onApprovePressed: onApprovePressed }));\r\n            wrapper = enzyme_1.shallow(screen);\r\n        }","duration":1},{"title":"the approve button is enabled","status":"pass","exception":{},"rawTitle":"the approve button is enabled","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rr4ik62r4-jkqdljj8e8-o53neymli5","code":"() => {\r\n            const approveButton = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilitiesTestIDs.approveButton });\r\n            approveButton.props().disabled.should.be.eql(false);\r\n        }","duration":1}],"title":"Connections are valid -> approve button is enabled","description":"","tags":[],"sequence":4,"id":"2rr4ik62r4-jkqdljj8e8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connections are invalid.","status":"pass","exception":{},"rawTitle":"the connections are invalid.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rr4ik62r4-jkqxnu7duo-mefuji8wln","code":"() => {\r\n            screen = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilities, { appName: \"appName\", areConnectionsValid: false, onLoad: onLoad, onCancelPressed: onCancelPressed, onApprovePressed: onApprovePressed }));\r\n            wrapper = enzyme_1.shallow(screen);\r\n        }","duration":2},{"title":"the approve button is disabled","status":"pass","exception":{},"rawTitle":"the approve button is disabled","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rr4ik62r4-jkqxnu7duo-o53nxwqayl","code":"() => {\r\n            const approveButton = wrapper.find({ testID: ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilitiesTestIDs.approveButton });\r\n            approveButton.props().disabled.should.be.eql(true);\r\n        }","duration":1}],"title":"Connections are invalid -> approve button is disabled","description":"","tags":[],"sequence":5,"id":"2rr4ik62r4-jkqxnu7duo"}],"title":"When the user is managing permissions for a published app","description":"Rules:\n* The user can approve or cancel permissions granted","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/ConnectionsAndCapabilities/PublishedAppConnectionsAndCapabilities.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the permissions screen is displayed","status":"pass","exception":{},"rawTitle":"the permissions screen is displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rr4ik62r4-9pbsb4-jkpgfru6tc","code":"() => {\r\n            onCancelPressed.reset();\r\n            onApprovePressed.reset();\r\n            onLoad.reset();\r\n            screen = (React.createElement(ConnectionsAndCapabilities_1.UnconnectedPublishedAppConnectionsAndCapabilities, { appName: \"appName\", areConnectionsValid: true, onLoad: onLoad, onCancelPressed: onCancelPressed, onApprovePressed: onApprovePressed }));\r\n            wrapper = enzyme_1.shallow(screen);\r\n        }","duration":2}],"title":"","description":"","tags":[],"id":"2rr4ik62r4-9pbsb4"},"id":"2rr4ik62r4","path":"Components/ConnectionsAndCapabilities"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the close button is pressed","status":"pass","exception":{},"rawTitle":"the close button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q64b6mlbgg-2p82d8xqp1-jkn17rijdc","code":"() => {\r\n            const closeButton = wrapper.find({ testID: Dialogs_1.DebugDialogUnconnectedTestIDs.CloseButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeButton.should.not.be.undefined;\r\n            closeButton.simulate(\"press\");\r\n        }","duration":1},{"title":"closeDialogSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDialogSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q64b6mlbgg-2p82d8xqp1-3bkqb6tmmz","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDialogSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Close the debug dialog","description":"","tags":[],"sequence":1,"id":"q64b6mlbgg-2p82d8xqp1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the selected enpoint is changed","status":"pass","exception":{},"rawTitle":"the selected enpoint is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q64b6mlbgg-dvfj4kkjj7-jkjjyljaio","code":"() => {\r\n            const endpointPicker = wrapper.find({ testID: Dialogs_1.DebugDialogUnconnectedTestIDs.EndpointPicker }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            endpointPicker.should.not.be.undefined;\r\n            endpointPicker.simulate(\"itemSelected\", endpoint);\r\n        }","duration":0},{"title":"setActiveEndpointAsync should be called once","status":"pass","exception":{},"rawTitle":"setActiveEndpointAsync should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q64b6mlbgg-dvfj4kkjj7-voluyikmmr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setActiveEndpointAsyncSpy.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the value test","status":"pass","exception":{},"rawTitle":"it should be called with the value test","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"q64b6mlbgg-dvfj4kkjj7-cn4o8wux1c","code":"() => {\r\n            setActiveEndpointAsyncSpy.calledWith(endpoint).should.be.eql(true);\r\n        }","duration":0}],"title":"Change the selected endpoint","description":"","tags":[],"sequence":2,"id":"q64b6mlbgg-dvfj4kkjj7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the selected packager profile is changed","status":"pass","exception":{},"rawTitle":"the selected packager profile is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q64b6mlbgg-lqyfrpla8w-f9tfjim1n7","code":"() => {\r\n            const packagerProfilePicker = wrapper.find({ testID: Dialogs_1.DebugDialogUnconnectedTestIDs.PackagerProfilePicker }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            packagerProfilePicker.should.not.be.undefined;\r\n            packagerProfilePicker.simulate(\"itemSelected\", packagerProfile);\r\n        }","duration":0},{"title":"setPackagerProfileSpy should be called once","status":"pass","exception":{},"rawTitle":"setPackagerProfileSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q64b6mlbgg-lqyfrpla8w-dypkdbufa3","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setPackagerProfileSpy.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the value {\"name\":\"test\"}","status":"pass","exception":{},"rawTitle":"it should be called with the value {\"name\":\"test\"}","description":"","docString":"","values":["name","test"],"ruleViolations":[],"type":"and","sequence":3,"id":"q64b6mlbgg-lqyfrpla8w-16hkww9qzr9","code":"() => {\r\n            setPackagerProfileSpy.calledWith(packagerProfile).should.be.eql(true);\r\n        }","duration":0}],"title":"Change the selected packager profile","description":"","tags":[],"sequence":3,"id":"q64b6mlbgg-lqyfrpla8w"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the debug options are initialized","status":"pass","exception":{},"rawTitle":"the debug options are initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q64b6mlbgg-a55h23zuhs-jkqhsevd40","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            wrapper.simulate(\"initializeDebugOptions\");\r\n        }","duration":0},{"title":"initializeDebugOptionsSpy should be called once","status":"pass","exception":{},"rawTitle":"initializeDebugOptionsSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q64b6mlbgg-a55h23zuhs-lr4j3xt42o","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            initializeDebugOptionsSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Initialize the debug options","description":"","tags":[],"sequence":4,"id":"q64b6mlbgg-a55h23zuhs"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the run button is pressed","status":"pass","exception":{},"rawTitle":"the run button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"q64b6mlbgg-136j5myy34d-jkpg6cd84g","code":"() => {\r\n            const runMsAppButton = wrapper.find({ testID: Dialogs_1.DebugDialogUnconnectedTestIDs.RunMsAppButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            runMsAppButton.should.not.be.undefined;\r\n            runMsAppButton.simulate(\"press\");\r\n        }","duration":0},{"title":"runMsAppSpy should be called once","status":"pass","exception":{},"rawTitle":"runMsAppSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"q64b6mlbgg-136j5myy34d-lqx85pfco0","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            runMsAppSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Run an msapp locally","description":"","tags":[],"sequence":5,"id":"q64b6mlbgg-136j5myy34d"}],"title":"A component to configure debug options for testing","description":"Provides:\n* Ability to change api endpoint\n* Ability to change the doc server packager profile","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Dialogs/DebugDialog.spec.js","id":"q64b6mlbgg","path":"Components/Dialogs"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the close button is pressed","status":"pass","exception":{},"rawTitle":"the close button is pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7nz8a0jeg0-hhx5q078g5-jkn17rijdc","code":"() => {\r\n            const closeButton = wrapper.find({ testID: Dialogs_1.DiagnosticDialogTestIDs.CloseButton }).first();\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeButton.should.not.be.undefined;\r\n            closeButton.simulate(\"press\");\r\n        }","duration":1},{"title":"closeDialogSpy should be called once","status":"pass","exception":{},"rawTitle":"closeDialogSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7nz8a0jeg0-hhx5q078g5-3bkqb6tmmz","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            closeDialogSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Close the diagnostic dialog","description":"","tags":[],"sequence":1,"id":"7nz8a0jeg0-hhx5q078g5"}],"title":"A component to show diagnostics information to the user","description":"Provides:\n* Shows the current session id","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Dialogs/DiagnosticDialog.spec.js","id":"7nz8a0jeg0","path":"Components/Dialogs"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"use another account link pressed","status":"pass","exception":{},"rawTitle":"use another account link pressed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"17vp4vm84t1-z9hq7bnuao-jknpocvgfk","code":"() => {\r\n            const link = wrapper.find({ testID: Enrollment_1.UnconnectedEnrollmentScreenTestIDs.useAnotherAccount });\r\n            // simulate on press\r\n            link.simulate(\"press\");\r\n        }","duration":1},{"title":"logoutUserAsync should be called once","status":"pass","exception":{},"rawTitle":"logoutUserAsync should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"17vp4vm84t1-z9hq7bnuao-lqxfewhdcw","code":"() => {\r\n            logoutUserAsyncSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"use another account link","description":"","tags":[],"sequence":1,"id":"17vp4vm84t1-z9hq7bnuao"}],"title":"Enrollment Screen","description":"Provides:\n* ability to see powerapps plans\n* ability to extend expired trial period\n* sign out and login as a different user","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Enrollment/EnrollmentScreen.spec.js","id":"17vp4vm84t1","path":"Components/Enrollment"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"navigating to a published app","status":"pass","exception":{},"rawTitle":"navigating to a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"96ry9zbirk-jkmlx30w7k-2rtnxwttts","code":"() => {\r\n            const webView = React.createElement(PublishedAppWebView_android_1.PublishedAppWebView, { appPath: \"\", appRelativePath: scenarioOutlineContext.example.appRelativePath, installedAppFolderNumber: scenarioOutlineContext.example.installedAppFolderNumber, installedAppFolderPath: scenarioOutlineContext.example.installedAppFolderPath, staticContentFolderPath: scenarioOutlineContext.example.staticContentFolderPath, useSharedPlayerResources: scenarioOutlineContext.example.useSharedPlayerResources, setWebViewInstance: () => { }, dispatchMessage: () => { }, injectedJavaScript: \"\" });\r\n            wrapper = enzyme_1.shallow(webView);\r\n        }","duration":7},{"title":"the source.uri should be 0/index.html","status":"pass","exception":{},"rawTitle":"the source.uri should be <installedAppFolderNumber>/<appRelativePath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"96ry9zbirk-jkmlx30w7k-6l134ejaj1","code":"() => {\r\n            wrapper.props().source.uri.should.equal(`${scenarioOutlineContext.example.installedAppFolderNumber}/${scenarioOutlineContext.example.appRelativePath}`);\r\n        }","duration":0},{"title":"the source.webServerRootPath should be file://files","status":"pass","exception":{},"rawTitle":"the source.webServerRootPath should be <webServerRootPath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"96ry9zbirk-jkmlx30w7k-m4yqiq9bmz","code":"() => {\r\n            wrapper.props().source.webServerRootPath.should.equal(scenarioOutlineContext.example.webServerRootPath);\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.rewrite should have the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.rewrite should have the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"96ry9zbirk-jkmlx30w7k-oz4tqsod6r","code":"() => {\r\n            const { rewrite } = wrapper.props().source.webServerUrlInterception;\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                rewrite.length.should.equal(0);\r\n            }\r\n            else {\r\n                rewrite.length.should.equal(1);\r\n                rewrite[0].startsWith.should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n                rewrite[0].substitute.should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n                rewrite[0].fallback.should.equal(true);\r\n            }\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.sandbox should contain the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.sandbox should contain the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"96ry9zbirk-jkmlx30w7k-a566zmko1s","code":"() => {\r\n            const { sandbox } = wrapper.props().source.webServerUrlInterception;\r\n            sandbox.length.should.equal(3);\r\n            sandbox[0].should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n            sandbox[1].should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n            sandbox[2].should.equal(`${scenarioOutlineContext.example.webServerRootPath}/${Config_1.Constants.FileNames.ServiceWorker}`);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appRelativePath","installedAppFolderPath","installedAppFolderNumber","staticContentFolderPath","useSharedPlayerResources","webServerRootPath"],["index.html","file://files/0","0","file://files/playerResources","true","file://files"],["index.html","file://files/0","0","file://files/s0","false","file://files"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"navigating to a published app","status":"pass","exception":{},"rawTitle":"navigating to a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"96ry9zbirk-jkmlx30w7k-2rtnxwttts","code":"() => {\r\n            const webView = React.createElement(PublishedAppWebView_android_1.PublishedAppWebView, { appPath: \"\", appRelativePath: scenarioOutlineContext.example.appRelativePath, installedAppFolderNumber: scenarioOutlineContext.example.installedAppFolderNumber, installedAppFolderPath: scenarioOutlineContext.example.installedAppFolderPath, staticContentFolderPath: scenarioOutlineContext.example.staticContentFolderPath, useSharedPlayerResources: scenarioOutlineContext.example.useSharedPlayerResources, setWebViewInstance: () => { }, dispatchMessage: () => { }, injectedJavaScript: \"\" });\r\n            wrapper = enzyme_1.shallow(webView);\r\n        }","duration":7},{"title":"the source.uri should be 0/index.html","status":"pass","exception":{},"rawTitle":"the source.uri should be <installedAppFolderNumber>/<appRelativePath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"96ry9zbirk-jkmlx30w7k-6l134ejaj1","code":"() => {\r\n            wrapper.props().source.uri.should.equal(`${scenarioOutlineContext.example.installedAppFolderNumber}/${scenarioOutlineContext.example.appRelativePath}`);\r\n        }","duration":0},{"title":"the source.webServerRootPath should be file://files","status":"pass","exception":{},"rawTitle":"the source.webServerRootPath should be <webServerRootPath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"96ry9zbirk-jkmlx30w7k-m4yqiq9bmz","code":"() => {\r\n            wrapper.props().source.webServerRootPath.should.equal(scenarioOutlineContext.example.webServerRootPath);\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.rewrite should have the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.rewrite should have the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"96ry9zbirk-jkmlx30w7k-oz4tqsod6r","code":"() => {\r\n            const { rewrite } = wrapper.props().source.webServerUrlInterception;\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                rewrite.length.should.equal(0);\r\n            }\r\n            else {\r\n                rewrite.length.should.equal(1);\r\n                rewrite[0].startsWith.should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n                rewrite[0].substitute.should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n                rewrite[0].fallback.should.equal(true);\r\n            }\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.sandbox should contain the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.sandbox should contain the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"96ry9zbirk-jkmlx30w7k-a566zmko1s","code":"() => {\r\n            const { sandbox } = wrapper.props().source.webServerUrlInterception;\r\n            sandbox.length.should.equal(3);\r\n            sandbox[0].should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n            sandbox[1].should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n            sandbox[2].should.equal(`${scenarioOutlineContext.example.webServerRootPath}/${Config_1.Constants.FileNames.ServiceWorker}`);\r\n        }","duration":0}],"example":{"appRelativePath":"index.html","installedAppFolderPath":"file://files/0","installedAppFolderNumber":0,"staticContentFolderPath":"file://files/playerResources","useSharedPlayerResources":true,"webServerRootPath":"file://files"},"title":"Android: Published App has been installed","sequence":1,"id":"96ry9zbirk-jkmlx30w7k"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"navigating to a published app","status":"pass","exception":{},"rawTitle":"navigating to a published app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"96ry9zbirk-jkmlx30w7k-2rtnxwttts","code":"() => {\r\n            const webView = React.createElement(PublishedAppWebView_android_1.PublishedAppWebView, { appPath: \"\", appRelativePath: scenarioOutlineContext.example.appRelativePath, installedAppFolderNumber: scenarioOutlineContext.example.installedAppFolderNumber, installedAppFolderPath: scenarioOutlineContext.example.installedAppFolderPath, staticContentFolderPath: scenarioOutlineContext.example.staticContentFolderPath, useSharedPlayerResources: scenarioOutlineContext.example.useSharedPlayerResources, setWebViewInstance: () => { }, dispatchMessage: () => { }, injectedJavaScript: \"\" });\r\n            wrapper = enzyme_1.shallow(webView);\r\n        }","duration":1},{"title":"the source.uri should be 0/index.html","status":"pass","exception":{},"rawTitle":"the source.uri should be <installedAppFolderNumber>/<appRelativePath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"96ry9zbirk-jkmlx30w7k-6l134ejaj1","code":"() => {\r\n            wrapper.props().source.uri.should.equal(`${scenarioOutlineContext.example.installedAppFolderNumber}/${scenarioOutlineContext.example.appRelativePath}`);\r\n        }","duration":0},{"title":"the source.webServerRootPath should be file://files","status":"pass","exception":{},"rawTitle":"the source.webServerRootPath should be <webServerRootPath>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"96ry9zbirk-jkmlx30w7k-m4yqiq9bmz","code":"() => {\r\n            wrapper.props().source.webServerRootPath.should.equal(scenarioOutlineContext.example.webServerRootPath);\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.rewrite should have the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.rewrite should have the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"96ry9zbirk-jkmlx30w7k-oz4tqsod6r","code":"() => {\r\n            const { rewrite } = wrapper.props().source.webServerUrlInterception;\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                rewrite.length.should.equal(0);\r\n            }\r\n            else {\r\n                rewrite.length.should.equal(1);\r\n                rewrite[0].startsWith.should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n                rewrite[0].substitute.should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n                rewrite[0].fallback.should.equal(true);\r\n            }\r\n        }","duration":0},{"title":"the source.webServerUrlInterception.sandbox should contain the correct items","status":"pass","exception":{},"rawTitle":"the source.webServerUrlInterception.sandbox should contain the correct items","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"96ry9zbirk-jkmlx30w7k-a566zmko1s","code":"() => {\r\n            const { sandbox } = wrapper.props().source.webServerUrlInterception;\r\n            sandbox.length.should.equal(3);\r\n            sandbox[0].should.equal(scenarioOutlineContext.example.installedAppFolderPath);\r\n            sandbox[1].should.equal(scenarioOutlineContext.example.staticContentFolderPath);\r\n            sandbox[2].should.equal(`${scenarioOutlineContext.example.webServerRootPath}/${Config_1.Constants.FileNames.ServiceWorker}`);\r\n        }","duration":0}],"example":{"appRelativePath":"index.html","installedAppFolderPath":"file://files/0","installedAppFolderNumber":0,"staticContentFolderPath":"file://files/s0","useSharedPlayerResources":false,"webServerRootPath":"file://files"},"title":"Android: Published App has been installed","sequence":2,"id":"96ry9zbirk-jkmlx30w7k"}],"title":"Android: Published App has been installed","description":"","tags":[]}],"title":"Open a cordova published App using a WebView","description":"Published apps are currently built to use Cordova, as part of the migration to react-native\nExisting Cordova apps should be runnable within a React Native WebView. If an application is not\ninstalled locally then it will be loaded from the Web, in this situation sandboxing is not required.\n\nRequirements:\n* Support passing messages from WebView to host\n* Support passing message from Host to WebView\n* Ensure WebView can only access files it has access to (sandboxing)\n* Support loading files from multiple locations (url rewrite)\n\n    ","tags":["Component:PublishedAppWebView"],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/PoweAppsWebView.Spec.js","id":"96ry9zbirk","path":"Components"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":4,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":4,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"SlideToExitTutorial component","status":"pass","exception":{},"rawTitle":"SlideToExitTutorial component","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwmw9uus74-7bo6froqmd-11thevctacj","code":"() => {\r\n            component = (React.createElement(PublishedAppHost_1.SlideToExitTutorial, { onRequestDismissTutorial: onRequestDismissTutorialSpy }));\r\n            wrapper = enzyme_1.shallow(component);\r\n        }","duration":2},{"title":"Clicking on the 'Got it' button","status":"pass","exception":{},"rawTitle":"Clicking on the 'Got it' button","description":"","docString":"","values":["Got it"],"ruleViolations":[],"type":"When","sequence":2,"id":"mwmw9uus74-7bo6froqmd-16b63odcqrk","code":"() => {\r\n            const gotItButton = wrapper.find(\"BrandButton\").first();\r\n            gotItButton.simulate(\"press\");\r\n        }","duration":1},{"title":"onRequestDismissTutorial should be called","status":"pass","exception":{},"rawTitle":"onRequestDismissTutorial should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mwmw9uus74-7bo6froqmd-jkrp09u2dc","code":"() => {\r\n            onRequestDismissTutorialSpy.calledOnce.should.be.eql(true);\r\n            onRequestDismissTutorialSpy.calledWith(false);\r\n        }","duration":0},{"title":"Reset function spy","status":"pass","exception":{},"rawTitle":"Reset function spy","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"SlideToExitTutorial component works as expected."}],"type":"Then","sequence":4,"id":"mwmw9uus74-7bo6froqmd-ph0wdvnutc","code":"() => {\r\n            onRequestDismissTutorialSpy.reset();\r\n        }","duration":0},{"title":"Clicking on the 'Never show again' area","status":"pass","exception":{},"rawTitle":"Clicking on the 'Never show again' area","description":"","docString":"","values":["Never show again"],"ruleViolations":[{"rule":3,"title":"SlideToExitTutorial component works as expected."}],"type":"When","sequence":5,"id":"mwmw9uus74-7bo6froqmd-pundsqp7sz","code":"() => {\r\n            const neverShowAgainButton = wrapper.find(\"TouchableOpacity\").first();\r\n            neverShowAgainButton.simulate(\"press\");\r\n        }","duration":1},{"title":"Clicking on the 'Got it' button after clicking 'Never show again' checkbox","status":"pass","exception":{},"rawTitle":"Clicking on the 'Got it' button after clicking 'Never show again' checkbox","description":"","docString":"","values":["Got it","Never show again"],"ruleViolations":[{"rule":3,"title":"SlideToExitTutorial component works as expected."}],"type":"When","sequence":6,"id":"mwmw9uus74-7bo6froqmd-mv9cc5k20w","code":"() => {\r\n            const gotItButton = wrapper.find(\"BrandButton\").first();\r\n            gotItButton.simulate(\"press\");\r\n        }","duration":1},{"title":"onRequestDismissTutorial should be called with true for never show again","status":"pass","exception":{},"rawTitle":"onRequestDismissTutorial should be called with true for never show again","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"SlideToExitTutorial component works as expected."}],"type":"Then","sequence":7,"id":"mwmw9uus74-7bo6froqmd-16b0opwnrb4","code":"() => {\r\n            onRequestDismissTutorialSpy.calledOnce.should.be.eql(true);\r\n            onRequestDismissTutorialSpy.calledWith(true);\r\n        }","duration":0}],"title":"SlideToExitTutorial component works as expected.","description":"","tags":[],"sequence":1,"id":"mwmw9uus74-7bo6froqmd"}],"title":"<SlideToExitTutorial /> onRequestDismissTutorial is calls correctly.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/PublishedApp/SlideToExitTutorial.Spec.js","id":"mwmw9uus74","path":"Components/PublishedApp"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following properties are passed as props","status":"pass","exception":{},"rawTitle":"the following properties are passed as props","description":"","docString":"{\n    \"backgroundColor\": \"blue\",\n    \"iconUrl\": \"http://www.sitedoesnotexist.com\",\n    \"appName\": \"Ferrari\",\n    \"message\": \"Opening\"\n}","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"165kfthl0pn-wfbt8nbntf-b2ysbd1beo","code":"() => {\r\n            props = JSON.parse(scenarioContext.given.docString);\r\n        }","duration":0},{"title":"displaying the splash screen","status":"pass","exception":{},"rawTitle":"displaying the splash screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"165kfthl0pn-wfbt8nbntf-16b3fip6eds","code":"() => {\r\n            const splashScreen = React.createElement(SplashScreen_1.SplashScreen, Object.assign({}, props));\r\n            wrapper = enzyme_1.shallow(splashScreen);\r\n            splashScreenContainer = wrapper.find({ testID: SplashScreen_1.SplashScreenTestIDs.splashScreenContainer });\r\n        }","duration":2},{"title":"there should be '4' elements under the main container","status":"pass","exception":{},"rawTitle":"there should be '4' elements under the main container","description":"","docString":"","values":[4],"ruleViolations":[],"type":"Then","sequence":3,"id":"165kfthl0pn-wfbt8nbntf-7o1arr23eo","code":"() => {\r\n            splashScreenContainer.children().length.should.eq(stepContext.values[0]);\r\n        }","duration":0},{"title":"the screen background color should be 'blue'","status":"pass","exception":{},"rawTitle":"the screen background color should be 'blue'","description":"","docString":"","values":["blue"],"ruleViolations":[],"type":"and","sequence":4,"id":"165kfthl0pn-wfbt8nbntf-14ylutvlvwb","code":"() => {\r\n            const style = react_native_1.StyleSheet.flatten(splashScreenContainer.prop(\"style\"));\r\n            style.backgroundColor.should.eq(stepContext.values[0]);\r\n        }","duration":0},{"title":"the app icon image 'source' should be 'http://www.sitedoesnotexist.com'","status":"pass","exception":{},"rawTitle":"the app icon image 'source' should be 'http://www.sitedoesnotexist.com'","description":"","docString":"","values":["source","http://www.sitedoesnotexist.com"],"ruleViolations":[],"type":"and","sequence":5,"id":"165kfthl0pn-wfbt8nbntf-14t9uzjevwr","code":"() => {\r\n            let appIcon = wrapper.find({ testID: SplashScreen_1.SplashScreenTestIDs.appIcon });\r\n            appIcon.prop(stepContext.values[0]).uri.should.eq(stepContext.values[1]);\r\n        }","duration":0},{"title":"the app 'title' should be 'Ferrari'","status":"pass","exception":{},"rawTitle":"the app 'title' should be 'Ferrari'","description":"","docString":"","values":["title","Ferrari"],"ruleViolations":[],"type":"and","sequence":6,"id":"165kfthl0pn-wfbt8nbntf-ggs4dp7wio","code":"() => {\r\n            let appTitle = wrapper.find({ testID: SplashScreen_1.SplashScreenTestIDs.appTitle });\r\n            appTitle.childAt(0).text().should.eq(stepContext.values[1]);\r\n        }","duration":1},{"title":"the message should be 'Opening'","status":"pass","exception":{},"rawTitle":"the message should be 'Opening'","description":"","docString":"","values":["Opening"],"ruleViolations":[],"type":"and","sequence":7,"id":"165kfthl0pn-wfbt8nbntf-5xh3tg69h","code":"() => {\r\n            let message = wrapper.find({ testID: SplashScreen_1.SplashScreenTestIDs.message });\r\n            message.childAt(0).text().should.eq(stepContext.values[0]);\r\n        }","duration":0}],"title":"Splash screen should display the app icon, app name and animation dots","description":"","tags":[],"sequence":1,"id":"165kfthl0pn-wfbt8nbntf"}],"title":"Display splash screen while opening a published app","description":"When opening a published app, the app opening screen should be covered by a splash screen.\nThe splash screen should disappear once the published app is opened.","tags":["component:PublishedAppSplashScreen"],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/PublishedApp/SplashScreen.Spec.js","id":"165kfthl0pn","path":"Components/PublishedApp"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":2,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the checkbox with initial state false is created","status":"pass","exception":{},"rawTitle":"the checkbox with initial state <initialCheckBoxState> is created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"da574cofi3-jkmmpdeppc-jkopuom140","code":"() => {\r\n            checkboxClickedStub = sinon.stub();\r\n            container =\r\n                React.createElement(Components_1.Checkbox, { checked: scenarioOutlineContext.example.initialCheckBoxState, onChanged: checkboxClickedStub });\r\n            wrapper = enzyme_1.shallow(container);\r\n            const button = wrapper.find(Components_1.Touchable).first();\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"the on changed prop is called","status":"pass","exception":{},"rawTitle":"the on changed prop is called","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"The check box can be clicked"}],"type":"Then","sequence":2,"id":"da574cofi3-jkmmpdeppc-zl0ffjbsid","code":"() => {\r\n            checkboxClickedStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the state is switched to true","status":"pass","exception":{},"rawTitle":"the state is switched to <finalCheckBoxState>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"da574cofi3-jkmmpdeppc-lqypwmpei8","code":"() => {\r\n            checkboxClickedStub.calledWith(scenarioOutlineContext.example.initialCheckBoxState);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["initialCheckBoxState","finalCheckBoxState"],["false","true"],["true","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the checkbox with initial state false is created","status":"pass","exception":{},"rawTitle":"the checkbox with initial state <initialCheckBoxState> is created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"da574cofi3-jkmmpdeppc-jkopuom140","code":"() => {\r\n            checkboxClickedStub = sinon.stub();\r\n            container =\r\n                React.createElement(Components_1.Checkbox, { checked: scenarioOutlineContext.example.initialCheckBoxState, onChanged: checkboxClickedStub });\r\n            wrapper = enzyme_1.shallow(container);\r\n            const button = wrapper.find(Components_1.Touchable).first();\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"the on changed prop is called","status":"pass","exception":{},"rawTitle":"the on changed prop is called","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"The check box can be clicked"}],"type":"Then","sequence":2,"id":"da574cofi3-jkmmpdeppc-zl0ffjbsid","code":"() => {\r\n            checkboxClickedStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the state is switched to true","status":"pass","exception":{},"rawTitle":"the state is switched to <finalCheckBoxState>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"da574cofi3-jkmmpdeppc-lqypwmpei8","code":"() => {\r\n            checkboxClickedStub.calledWith(scenarioOutlineContext.example.initialCheckBoxState);\r\n        }","duration":0}],"example":{"initialCheckBoxState":false,"finalCheckBoxState":true},"title":"The check box can be clicked","sequence":1,"id":"da574cofi3-jkmmpdeppc"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the checkbox with initial state true is created","status":"pass","exception":{},"rawTitle":"the checkbox with initial state <initialCheckBoxState> is created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"da574cofi3-jkmmpdeppc-jklvmd6fa8","code":"() => {\r\n            checkboxClickedStub = sinon.stub();\r\n            container =\r\n                React.createElement(Components_1.Checkbox, { checked: scenarioOutlineContext.example.initialCheckBoxState, onChanged: checkboxClickedStub });\r\n            wrapper = enzyme_1.shallow(container);\r\n            const button = wrapper.find(Components_1.Touchable).first();\r\n            button.simulate(\"press\");\r\n        }","duration":1},{"title":"the on changed prop is called","status":"pass","exception":{},"rawTitle":"the on changed prop is called","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"The check box can be clicked"}],"type":"Then","sequence":2,"id":"da574cofi3-jkmmpdeppc-zl0ffjbsid","code":"() => {\r\n            checkboxClickedStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the state is switched to false","status":"pass","exception":{},"rawTitle":"the state is switched to <finalCheckBoxState>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"da574cofi3-jkmmpdeppc-2ldg6xww2j","code":"() => {\r\n            checkboxClickedStub.calledWith(scenarioOutlineContext.example.initialCheckBoxState);\r\n        }","duration":0}],"example":{"initialCheckBoxState":true,"finalCheckBoxState":false},"title":"The check box can be clicked","sequence":2,"id":"da574cofi3-jkmmpdeppc"}],"title":"The check box can be clicked","description":"","tags":[]}],"title":"Visual component providing a checkbox","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Shared/Checkbox.Spec.js","id":"da574cofi3","path":"Components/Shared"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":26,"failedCount":0,"pendingCount":0,"totalCount":26,"totalRuleViolations":12,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"no props are passed","status":"pass","exception":{},"rawTitle":"no props are passed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a5anx33rk0-10k34f77n3n","code":"() => {\r\n        }","duration":0},{"title":"the numberOfDots should be 4","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with no props"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a5anx33rk0-12p3wse0l7p","code":"() => {\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.numberOfDots);\r\n        }","duration":0},{"title":"the dotColor should be #872d87","status":"pass","exception":{},"rawTitle":"the dotColor should be <dotColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10wnsxn7v45-a5anx33rk0-wqyyfwjals","code":"() => {\r\n            dotsContainer.children().at(0).prop(\"style\").backgroundColor.should.eq(scenarioOutlineContext.example.dotColor);\r\n        }","duration":1},{"title":"the dotDiameter should be 8","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10wnsxn7v45-a5anx33rk0-xy4cjam1uo","code":"() => {\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.dotDiameter);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.dotDiameter);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["dotColor","dotDiameter","numberOfDots"],["#872d87","8","4"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"no props are passed","status":"pass","exception":{},"rawTitle":"no props are passed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a5anx33rk0-10k34f77n3n","code":"() => {\r\n        }","duration":0},{"title":"the numberOfDots should be 4","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with no props"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a5anx33rk0-12p3wse0l7p","code":"() => {\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.numberOfDots);\r\n        }","duration":0},{"title":"the dotColor should be #872d87","status":"pass","exception":{},"rawTitle":"the dotColor should be <dotColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10wnsxn7v45-a5anx33rk0-wqyyfwjals","code":"() => {\r\n            dotsContainer.children().at(0).prop(\"style\").backgroundColor.should.eq(scenarioOutlineContext.example.dotColor);\r\n        }","duration":1},{"title":"the dotDiameter should be 8","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10wnsxn7v45-a5anx33rk0-xy4cjam1uo","code":"() => {\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.dotDiameter);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.dotDiameter);\r\n        }","duration":1}],"example":{"dotColor":"#872d87","dotDiameter":8,"numberOfDots":4},"title":"Rendering with no props","sequence":1,"id":"10wnsxn7v45-a5anx33rk0"}],"title":"Rendering with no props","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 0","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-7ceen9ywkz","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":1},{"title":"the numberOfDots should be 4","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-12p3wse0l7p","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":2}],"tables":[{"name":"","description":"","dataTable":[["numberOfDots","expected"],["0","4"],["1","1"],["5","5"],["10","10"],["11","4"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 0","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-7ceen9ywkz","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":1},{"title":"the numberOfDots should be 4","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-12p3wse0l7p","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":2}],"example":{"numberOfDots":0,"expected":4},"title":"Rendering with user supplied number of dots","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 1","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-7cs0lo6g97","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":0},{"title":"the numberOfDots should be 1","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-12oznqnwj2l","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":4}],"example":{"numberOfDots":1,"expected":1},"title":"Rendering with user supplied number of dots","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 5","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-7ed9g16p63","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":0},{"title":"the numberOfDots should be 5","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-w8cpe6wz45","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"example":{"numberOfDots":5,"expected":5},"title":"Rendering with user supplied number of dots","sequence":3,"id":"10wnsxn7v45-a53vzwjzhc"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 10","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-oy3hak0qow","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":0},{"title":"the numberOfDots should be 10","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-3sosr16pir","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"example":{"numberOfDots":10,"expected":10},"title":"Rendering with user supplied number of dots","sequence":4,"id":"10wnsxn7v45-a53vzwjzhc"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"numberOfDots is 11","status":"pass","exception":{},"rawTitle":"numberOfDots is <numberOfDots>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-a53vzwjzhc-pzwgu0zdz4","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { numberOfDots: scenarioOutlineContext.example.numberOfDots });\r\n        }","duration":0},{"title":"the numberOfDots should be 4","status":"pass","exception":{},"rawTitle":"the numberOfDots should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied number of dots"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-a53vzwjzhc-12p3wse0l7p","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().length.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"example":{"numberOfDots":11,"expected":4},"title":"Rendering with user supplied number of dots","sequence":5,"id":"10wnsxn7v45-a53vzwjzhc"}],"title":"Rendering with user supplied number of dots","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotColor is #ff0000","status":"pass","exception":{},"rawTitle":"dotColor is <dotColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-mox7lsj371-g7oei6hre3","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotColor: scenarioOutlineContext.example.dotColor });\r\n        }","duration":0},{"title":"the dotColor should be #ff0000","status":"pass","exception":{},"rawTitle":"the dotColor should be <dotColor>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot color"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-mox7lsj371-cnyt4bnoyz","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").backgroundColor.should.eq(scenarioOutlineContext.example.dotColor);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["dotColor"],["#ff0000"],["rgba(0,255,0,1)"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotColor is #ff0000","status":"pass","exception":{},"rawTitle":"dotColor is <dotColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-mox7lsj371-g7oei6hre3","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotColor: scenarioOutlineContext.example.dotColor });\r\n        }","duration":0},{"title":"the dotColor should be #ff0000","status":"pass","exception":{},"rawTitle":"the dotColor should be <dotColor>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot color"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-mox7lsj371-cnyt4bnoyz","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").backgroundColor.should.eq(scenarioOutlineContext.example.dotColor);\r\n        }","duration":1}],"example":{"dotColor":"#ff0000"},"title":"Rendering with user supplied dot color","sequence":1,"id":"10wnsxn7v45-mox7lsj371"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotColor is rgba(0,255,0,1)","status":"pass","exception":{},"rawTitle":"dotColor is <dotColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-mox7lsj371-i786bgxxkw","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotColor: scenarioOutlineContext.example.dotColor });\r\n        }","duration":0},{"title":"the dotColor should be rgba(0,255,0,1)","status":"pass","exception":{},"rawTitle":"the dotColor should be <dotColor>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot color"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-mox7lsj371-137do9m0bb9","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").backgroundColor.should.eq(scenarioOutlineContext.example.dotColor);\r\n        }","duration":2}],"example":{"dotColor":"rgba(0,255,0,1)"},"title":"Rendering with user supplied dot color","sequence":2,"id":"10wnsxn7v45-mox7lsj371"}],"title":"Rendering with user supplied dot color","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotDiameter is 0","status":"pass","exception":{},"rawTitle":"dotDiameter is <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-7nuqau70rk-mftcy3vw5","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotDiameter: scenarioOutlineContext.example.dotDiameter });\r\n        }","duration":0},{"title":"the dotDiameter should be 8","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot diameter"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-7nuqau70rk-xy677ogvr4","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.expected);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["dotDiameter","expected"],["0","8"],["4","8"],["5","5"],["16","16"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotDiameter is 0","status":"pass","exception":{},"rawTitle":"dotDiameter is <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-7nuqau70rk-mftcy3vw5","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotDiameter: scenarioOutlineContext.example.dotDiameter });\r\n        }","duration":0},{"title":"the dotDiameter should be 8","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot diameter"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-7nuqau70rk-xy677ogvr4","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.expected);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"example":{"dotDiameter":0,"expected":8},"title":"Rendering with user supplied dot diameter","sequence":1,"id":"10wnsxn7v45-7nuqau70rk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotDiameter is 4","status":"pass","exception":{},"rawTitle":"dotDiameter is <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-7nuqau70rk-i13jajesfx","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotDiameter: scenarioOutlineContext.example.dotDiameter });\r\n        }","duration":0},{"title":"the dotDiameter should be 8","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot diameter"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-7nuqau70rk-xy677ogvr4","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.expected);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":2}],"example":{"dotDiameter":4,"expected":8},"title":"Rendering with user supplied dot diameter","sequence":2,"id":"10wnsxn7v45-7nuqau70rk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotDiameter is 5","status":"pass","exception":{},"rawTitle":"dotDiameter is <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-7nuqau70rk-i1i9nnac2t","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotDiameter: scenarioOutlineContext.example.dotDiameter });\r\n        }","duration":0},{"title":"the dotDiameter should be 5","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot diameter"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-7nuqau70rk-ueq4ofh48w","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.expected);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":3}],"example":{"dotDiameter":5,"expected":5},"title":"Rendering with user supplied dot diameter","sequence":3,"id":"10wnsxn7v45-7nuqau70rk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"dotDiameter is 16","status":"pass","exception":{},"rawTitle":"dotDiameter is <dotDiameter>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10wnsxn7v45-7nuqau70rk-jtrxg348tf","code":"() => {\r\n            dotAnimation = React.createElement(index_1.DotAnimation, { dotDiameter: scenarioOutlineContext.example.dotDiameter });\r\n        }","duration":0},{"title":"the dotDiameter should be 16","status":"pass","exception":{},"rawTitle":"the dotDiameter should be <expected>","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"Rendering with user supplied dot diameter"}],"type":"Then","sequence":2,"id":"10wnsxn7v45-7nuqau70rk-h25ftjlpez","code":"() => {\r\n            const wrapper = enzyme_1.shallow(dotAnimation);\r\n            const dotsContainer = wrapper.find({ testID: index_1.DotAnimationTestIDs.dotsContainer });\r\n            dotsContainer.children().at(0).prop(\"style\").width.should.eq(scenarioOutlineContext.example.expected);\r\n            dotsContainer.children().at(0).prop(\"style\").height.should.eq(scenarioOutlineContext.example.expected);\r\n        }","duration":1}],"example":{"dotDiameter":16,"expected":16},"title":"Rendering with user supplied dot diameter","sequence":4,"id":"10wnsxn7v45-7nuqau70rk"}],"title":"Rendering with user supplied dot diameter","description":"","tags":[]}],"title":"Visual component providing user feedback that a process is in progress","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Shared/DotAnimation.Spec.js","id":"10wnsxn7v45","path":"Components/Shared"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":198,"failedCount":0,"pendingCount":0,"totalCount":198,"totalRuleViolations":0,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":88,"failedCount":0,"pendingCount":0,"totalCount":88,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":1},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 0 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy29f4epa8","code":"() => { }","duration":0},{"title":"the optimal flyout width is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-uet4mb4h0g","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 325","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-g9nadd0fej","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"tables":[{"name":"Left edge of the screen","description":"","dataTable":[["screenWidth","bufferLeft","bufferRight","parentX","parentWidth","rawFlyoutWidth","expectedRight","expectedMaxWidth"],["400","0","0","0","40","75","325","null"],["400","0","0","0","40","401","5","395"],["400","20","20","0","40","401","25","375"]]},{"name":"Right edge of screen","description":"","dataTable":[["screenWidth","bufferLeft","bufferRight","parentX","parentWidth","rawFlyoutWidth","expectedRight","expectedMaxWidth"],["400","0","0","360","40","75","0","null"],["400","0","0","360","40","401","0","395"],["400","20","20","360","40","401","0","375"]]},{"name":"Variations from middle of screen","description":"","dataTable":[["screenWidth","bufferLeft","bufferRight","parentX","parentWidth","rawFlyoutWidth","expectedRight","expectedMaxWidth"],["400","0","0","160","40","75","200","null"],["400","0","0","200","40","75","160","null"],["400","0","0","120","40","160","120","null"],["400","0","0","160","40","250","5","235"],["400","0","0","200","40","250","160","235"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":1},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 0 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy29f4epa8","code":"() => { }","duration":0},{"title":"the optimal flyout width is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-uet4mb4h0g","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 325","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-g9nadd0fej","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":0,"parentWidth":40,"rawFlyoutWidth":75,"expectedRight":325,"expectedMaxWidth":null},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":1,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 0 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy29f4epa8","code":"() => { }","duration":0},{"title":"the optimal flyout width is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-ljmmdkdfd1","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":1},{"title":"the preferred right position should be 5","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-uer4o1c0ww","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 395","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetxoz8540","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":0,"parentWidth":40,"rawFlyoutWidth":401,"expectedRight":5,"expectedMaxWidth":395},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":2,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-smo3uieqpv","code":"() => { }","duration":0},{"title":"the safe area right buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-aw46g5l6ut","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 0 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy29f4epa8","code":"() => { }","duration":0},{"title":"the optimal flyout width is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-ljmmdkdfd1","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 25","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-uepf0kuteo","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 375","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetxoz8540","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":20,"bufferRight":20,"parentX":0,"parentWidth":40,"rawFlyoutWidth":401,"expectedRight":25,"expectedMaxWidth":375},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":3,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 360 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-11zer9173h7","code":"() => { }","duration":0},{"title":"the optimal flyout width is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-uet4mb4h0g","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":1},{"title":"the preferred right position should be 0","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-oxxksfq4a8","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":360,"parentWidth":40,"rawFlyoutWidth":75,"expectedRight":0,"expectedMaxWidth":null},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":4,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 360 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-11zer9173h7","code":"() => { }","duration":0},{"title":"the optimal flyout width is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-ljmmdkdfd1","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 0","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-oxxksfq4a8","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 395","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetxoz8540","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":360,"parentWidth":40,"rawFlyoutWidth":401,"expectedRight":0,"expectedMaxWidth":395},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":5,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-smo3uieqpv","code":"() => { }","duration":1},{"title":"the safe area right buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-aw46g5l6ut","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 360 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-11zer9173h7","code":"() => { }","duration":0},{"title":"the optimal flyout width is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-ljmmdkdfd1","code":"() => { }","duration":1},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 0","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-oxxksfq4a8","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 375","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetxoz8540","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":20,"bufferRight":20,"parentX":360,"parentWidth":40,"rawFlyoutWidth":401,"expectedRight":0,"expectedMaxWidth":375},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":6,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 160 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the optimal flyout width is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-uet4mb4h0g","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 200","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-wb2kxbheaj","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":160,"parentWidth":40,"rawFlyoutWidth":75,"expectedRight":200,"expectedMaxWidth":null},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":7,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 200 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy3007lkow","code":"() => { }","duration":0},{"title":"the optimal flyout width is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-uet4mb4h0g","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 160","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-g7ofhjgx0j","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":200,"parentWidth":40,"rawFlyoutWidth":75,"expectedRight":160,"expectedMaxWidth":null},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":8,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 120 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-ueivlm0gfn","code":"() => { }","duration":0},{"title":"the optimal flyout width is 160","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-5kjrdsxk71","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 120","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-w6doiwp8ib","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be null","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-mjqbrmkrl9","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":120,"parentWidth":40,"rawFlyoutWidth":160,"expectedRight":120,"expectedMaxWidth":null},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":9,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":0},{"title":"the flyout parent has an X coordinate of 160 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the optimal flyout width is 250","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-zoebtmorzp","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 5","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-uer4o1c0ww","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 235","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetrxj3ijk","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":160,"parentWidth":40,"rawFlyoutWidth":250,"expectedRight":5,"expectedMaxWidth":235},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":10,"id":"203lnphkf7-mwk5m0lw80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen width is 400","status":"pass","exception":{},"rawTitle":"the screen width is <screenWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwk5m0lw80-151nol4b2k3","code":"() => { }","duration":0},{"title":"the safe area left buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area left buffer is <bufferLeft>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwk5m0lw80-7tv274pyk3","code":"() => { }","duration":0},{"title":"the safe area right buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area right buffer is <bufferRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwk5m0lw80-wmcixk60gl","code":"() => { }","duration":1},{"title":"the flyout parent has an X coordinate of 200 and a width of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an X coordinate of <parentX> and a width of <parentWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwk5m0lw80-oy3007lkow","code":"() => { }","duration":0},{"title":"the optimal flyout width is 250","status":"pass","exception":{},"rawTitle":"the optimal flyout width is <rawFlyoutWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwk5m0lw80-zoebtmorzp","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwk5m0lw80-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                width: example.screenWidth,\r\n                bufferLeft: example.bufferLeft,\r\n                bufferRight: example.bufferRight,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(example.parentX, example.parentWidth, example.rawFlyoutWidth, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred right position should be 160","status":"pass","exception":{},"rawTitle":"the preferred right position should be <expectedRight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwk5m0lw80-g7ofhjgx0j","code":"() => {\r\n            result.right.should.be.eql(scenarioOutlineContext.example.expectedRight);\r\n        }","duration":0},{"title":"the preferred max width should be 235","status":"pass","exception":{},"rawTitle":"the preferred max width should be <expectedMaxWidth>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwk5m0lw80-uetrxj3ijk","code":"() => {\r\n            should.equal(result.maxWidth, scenarioOutlineContext.example.expectedMaxWidth);\r\n        }","duration":0}],"example":{"screenWidth":400,"bufferLeft":0,"bufferRight":0,"parentX":200,"parentWidth":40,"rawFlyoutWidth":250,"expectedRight":160,"expectedMaxWidth":235},"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","sequence":11,"id":"203lnphkf7-mwk5m0lw80"}],"title":"Ensure the best fit horizontal position and max width of the the flyout is calculated.","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a screen width of \"400\"","status":"pass","exception":{},"rawTitle":"a screen width of \"400\"","description":"","docString":"","values":[400],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwnw5gg3b4-cigzquiq5c","code":"() => {\r\n            screenWidth = stepContext.values[0];\r\n        }","duration":0},{"title":"the parent X coordinate is \"20\"","status":"pass","exception":{},"rawTitle":"the parent X coordinate is \"20\"","description":"","docString":"","values":[20],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwnw5gg3b4-cigpq65z6o","code":"() => {\r\n            parentX = stepContext.values[0];\r\n        }","duration":0},{"title":"the parent width is \"150\"","status":"pass","exception":{},"rawTitle":"the parent width is \"150\"","description":"","docString":"","values":[150],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwnw5gg3b4-77xi5sle3x","code":"() => {\r\n            parentWidth = stepContext.values[0];\r\n        }","duration":0},{"title":"the best fit horizontal calculation is run with a preference to match the parent size","status":"pass","exception":{},"rawTitle":"the best fit horizontal calculation is run with a preference to match the parent size","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"203lnphkf7-mwnw5gg3b4-6fbma8cc57","code":"() => {\r\n            const anyRawFlyoutWidth = 500;\r\n            const uiSafeArea = {\r\n                width: screenWidth,\r\n                bufferLeft: 20,\r\n                bufferRight: 20,\r\n                height: 0,\r\n                bufferTop: 0,\r\n                bufferBottom: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitHorizontalPosition(parentX, parentWidth, anyRawFlyoutWidth, uiSafeArea, true);\r\n        }","duration":0},{"title":"the right position should match the parent's right","status":"pass","exception":{},"rawTitle":"the right position should match the parent's right","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"203lnphkf7-mwnw5gg3b4-fnabgezjh7","code":"() => {\r\n            result.right.should.be.eql(screenWidth - (parentX + parentWidth));\r\n        }","duration":1},{"title":"the max width should be equal to the parent's width\"","status":"pass","exception":{},"rawTitle":"the max width should be equal to the parent's width\"","description":"","docString":"","values":["s width"],"ruleViolations":[],"type":"and","sequence":6,"id":"203lnphkf7-mwnw5gg3b4-cilm1hoxvk","code":"() => {\r\n            result.maxWidth.should.be.eql(parentWidth);\r\n        }","duration":0}],"title":"Ensure the horizontal best fit is correct when matching the parent size.","description":"Rules:\n- The right position of the flyout should match the right position of the parent\n- Max width should be equal to the parent's width\n    ","tags":[],"sequence":2,"id":"203lnphkf7-mwnw5gg3b4"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":104,"failedCount":0,"pendingCount":0,"totalCount":104,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 0 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-5kjsvviyc5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-uer2c44sj4","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":1},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"tables":[{"name":"Top of screen","description":"","dataTable":[["screenHeight","bufferTop","bufferBottom","parentY","parentHeight","rawFlyoutHeight","expectedTop","expectedMaxHeight"],["400","0","0","0","40","75","40","null"],["400","0","0","0","40","401","40","355"],["400","20","20","0","40","401","40","335"],["400","20","20","0","40","350","40","335"]]},{"name":"Bottom of screen","description":"","dataTable":[["screenHeight","bufferTop","bufferBottom","parentY","parentHeight","rawFlyoutHeight","expectedTop","expectedMaxHeight"],["400","0","0","360","40","75","285","null"],["400","0","0","360","40","401","5","355"],["400","20","20","360","40","401","25","335"],["400","20","20","360","40","350","25","335"]]},{"name":"Variations from middle of screen","description":"","dataTable":[["screenHeight","bufferTop","bufferBottom","parentY","parentHeight","rawFlyoutHeight","expectedTop","expectedMaxHeight"],["400","0","0","160","40","75","200","null"],["400","0","0","200","40","75","240","null"],["400","0","0","200","40","160","40","null"],["400","0","0","160","40","250","200","195"],["400","0","0","200","40","250","5","195"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 0 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-5kjsvviyc5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-uer2c44sj4","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":1},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":0,"parentHeight":40,"rawFlyoutHeight":75,"expectedTop":40,"expectedMaxHeight":null},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":1,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 0 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-5kjsvviyc5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-jrrnt3ddt7","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 355","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespo8nqao","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":0,"parentHeight":40,"rawFlyoutHeight":401,"expectedTop":40,"expectedMaxHeight":355},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":2,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-oy0ifc4grk","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-oxztlf9t0g","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 0 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-5kjsvviyc5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-jrrnt3ddt7","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":1},{"title":"the preferred max height should be 335","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespnj79xs","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":20,"bufferBottom":20,"parentY":0,"parentHeight":40,"rawFlyoutHeight":401,"expectedTop":40,"expectedMaxHeight":335},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":3,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-oy0ifc4grk","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-oxztlf9t0g","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 0 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-5kjsvviyc5","code":"() => { }","duration":1},{"title":"the optimal flyout height is 350","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-151npwk7uab","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 335","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespnj79xs","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":20,"bufferBottom":20,"parentY":0,"parentHeight":40,"rawFlyoutHeight":350,"expectedTop":40,"expectedMaxHeight":335},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":4,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":1},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 360 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-8zca7pzw5","code":"() => { }","duration":1},{"title":"the optimal flyout height is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-uer2c44sj4","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 285","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-uer1yww00w","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":1},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":360,"parentHeight":40,"rawFlyoutHeight":75,"expectedTop":285,"expectedMaxHeight":null},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":5,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":1},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 360 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-8zca7pzw5","code":"() => { }","duration":1},{"title":"the optimal flyout height is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-jrrnt3ddt7","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 5","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-x0t6rp8qj7","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 355","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespo8nqao","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":360,"parentHeight":40,"rawFlyoutHeight":401,"expectedTop":5,"expectedMaxHeight":355},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":6,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-oy0ifc4grk","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-oxztlf9t0g","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 360 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-8zca7pzw5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 401","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-jrrnt3ddt7","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 25","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-22t0lpwezx","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 335","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespnj79xs","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":20,"bufferBottom":20,"parentY":360,"parentHeight":40,"rawFlyoutHeight":401,"expectedTop":25,"expectedMaxHeight":335},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":7,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":1},{"title":"the safe area top buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-oy0ifc4grk","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 20","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-oxztlf9t0g","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 360 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-8zca7pzw5","code":"() => { }","duration":0},{"title":"the optimal flyout height is 350","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-151npwk7uab","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 25","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-22t0lpwezx","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 335","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-uespnj79xs","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":20,"bufferBottom":20,"parentY":360,"parentHeight":40,"rawFlyoutHeight":350,"expectedTop":25,"expectedMaxHeight":335},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":8,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 160 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-16tiiiyem7f","code":"() => { }","duration":0},{"title":"the optimal flyout height is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-uer2c44sj4","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 200","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-oxxi1fe2mo","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":160,"parentHeight":40,"rawFlyoutHeight":75,"expectedTop":200,"expectedMaxHeight":null},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":9,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":1},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 200 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-oy2axt86cg","code":"() => { }","duration":0},{"title":"the optimal flyout height is 75","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-uer2c44sj4","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 240","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-oxxi1fe2mo","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":200,"parentHeight":40,"rawFlyoutHeight":75,"expectedTop":240,"expectedMaxHeight":null},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":10,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 200 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-oy2axt86cg","code":"() => { }","duration":0},{"title":"the optimal flyout height is 160","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-do2vqe4bn","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 40","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-20u5syomet","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be null","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-11l7nuy56w0","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":200,"parentHeight":40,"rawFlyoutHeight":160,"expectedTop":40,"expectedMaxHeight":null},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":11,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 160 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-16tiiiyem7f","code":"() => { }","duration":0},{"title":"the optimal flyout height is 250","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-151npwk7uab","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 200","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-oxxi1fe2mo","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":1},{"title":"the preferred max height should be 195","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-ues2x6a3pc","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":160,"parentHeight":40,"rawFlyoutHeight":250,"expectedTop":200,"expectedMaxHeight":195},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":12,"id":"203lnphkf7-mwsx6e1eo0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the screen height is 400","status":"pass","exception":{},"rawTitle":"the screen height is <screenHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"203lnphkf7-mwsx6e1eo0-lj8zvoys19","code":"() => { }","duration":0},{"title":"the safe area top buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area top buffer is <bufferTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"203lnphkf7-mwsx6e1eo0-8z6erbhuz","code":"() => { }","duration":0},{"title":"the safe area bottom buffer is 0","status":"pass","exception":{},"rawTitle":"the safe area bottom buffer is <bufferBottom>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"203lnphkf7-mwsx6e1eo0-9496nt17vf","code":"() => { }","duration":0},{"title":"the flyout parent has an Y coordinate of 200 and a height of 40","status":"pass","exception":{},"rawTitle":"the flyout parent has an Y coordinate of <parentY> and a height of <parentHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"203lnphkf7-mwsx6e1eo0-oy2axt86cg","code":"() => { }","duration":0},{"title":"the optimal flyout height is 250","status":"pass","exception":{},"rawTitle":"the optimal flyout height is <rawFlyoutHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"203lnphkf7-mwsx6e1eo0-151npwk7uab","code":"() => { }","duration":0},{"title":"the preferred horizontal flyout position is calculated","status":"pass","exception":{},"rawTitle":"the preferred horizontal flyout position is calculated","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":6,"id":"203lnphkf7-mwsx6e1eo0-hyly0mwtp1","code":"() => {\r\n            const example = scenarioOutlineContext.example;\r\n            const uiSafeArea = {\r\n                height: example.screenHeight,\r\n                bufferTop: example.bufferTop,\r\n                bufferBottom: example.bufferBottom,\r\n                width: 0,\r\n                bufferLeft: 0,\r\n                bufferRight: 0,\r\n            };\r\n            result = Shared_1.DropdownListFlyout.CalculateBestFitVerticalPosition(example.parentY, example.parentHeight, example.rawFlyoutHeight, uiSafeArea);\r\n        }","duration":0},{"title":"the preferred top position should be 5","status":"pass","exception":{},"rawTitle":"the preferred top position should be <expectedTop>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":7,"id":"203lnphkf7-mwsx6e1eo0-x0t6rp8qj7","code":"() => {\r\n            result.top.should.be.eql(scenarioOutlineContext.example.expectedTop);\r\n        }","duration":0},{"title":"the preferred max height should be 195","status":"pass","exception":{},"rawTitle":"the preferred max height should be <expectedMaxHeight>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"203lnphkf7-mwsx6e1eo0-ues2x6a3pc","code":"() => {\r\n            should.equal(result.maxHeight, scenarioOutlineContext.example.expectedMaxHeight);\r\n        }","duration":0}],"example":{"screenHeight":400,"bufferTop":0,"bufferBottom":0,"parentY":200,"parentHeight":40,"rawFlyoutHeight":250,"expectedTop":5,"expectedMaxHeight":195},"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","sequence":13,"id":"203lnphkf7-mwsx6e1eo0"}],"title":"Ensure the best fit vertical position and max height of the the flyout is calculated.","description":"","tags":[]}],"title":"Visual component that can be used to render content as flyout on top of the screen relative to another element.","description":"Horizontal Position Rules:\n- Right position should anchor to the right of the parent and flyout to the left as long as the flyout does not overflow the minimum distance from the screen edge.\n- If flying out left overflows the minimum distance from the screen edge, anchor to the parent X and flyout to the right.\n- If flying out left and right both over flow the minimum distance from the screen edge, choose the flyout direction based on which direction has the least screen overflow.\n- If the flyout overflows the screen, the flyout should render such that the overflow direction is adjusted back to the minimum distance from the screen edge.\n- When matching the parent size, the right should anchor to the right of the parent and the width/max width should match the parent width.\n\nVertical Position Rules:\n- Top position should anchor to the bottom of the parent and flyout to the bottom as long as the flyout does not overflow the minimum distance from the screen edge.\n- If flying out down overflows the minimum distance from the screen edge, anchor to the parent Y and flyout to the top.\n- If flying out top and bottom both over flow the minimum distance from the screen edge, choose the flyout direction based on which direction has the least screen overflow.\n- If the flyout overflows the screen, the flyout should render such that the overflow direction is adjusted back to the minimum distance from the screen edge.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Shared/DropdownListFlyout.Spec.js","id":"203lnphkf7","path":"Components/Shared"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the user clicks outside the rendered component","status":"pass","exception":{},"rawTitle":"that the user clicks outside the rendered component","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"o59gau5m0l-mwtwcrlrr4-cn4uaqcl8g","code":"() => {\r\n            container = (React.createElement(Shared_1.UnconnectedModalFlyout, { flyoutOpen: true, onCloseRequest: onRequestCloseSpy },\r\n                React.createElement(react_native_1.View, null)));\r\n            wrapper = enzyme_1.shallow(container);\r\n            let outsideClickArea = wrapper.find(\"TouchableWithoutFeedback\").first();\r\n            outsideClickArea.simulate(\"press\");\r\n        }","duration":2},{"title":"onRequestClose gets called","status":"pass","exception":{},"rawTitle":"onRequestClose gets called","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"if you click on the outside the rendered flyout, we signal that to the user."}],"type":"Then","sequence":2,"id":"o59gau5m0l-mwtwcrlrr4-jkndsdm268","code":"() => {\r\n            onRequestCloseSpy.calledOnce.should.be.eql(true);\r\n        }","duration":1}],"title":"if you click on the outside the rendered flyout, we signal that to the user.","description":"","tags":[],"sequence":1,"id":"o59gau5m0l-mwtwcrlrr4"}],"title":"Visual component that can be used for components that render as flyout on top of the screen.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Shared/ModalFlyout.Spec.js","id":"o59gau5m0l","path":"Components/Shared"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a message with 1 link embedded","status":"pass","exception":{},"rawTitle":"a message with 1 link embedded","description":"","docString":"my message ##link0##click here##/link0##","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"vcbmgdligt-q5yxuqv4n4-b374igns5c","code":"() => { }","duration":0},{"title":"parsing the message","status":"pass","exception":{},"rawTitle":"parsing the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"vcbmgdligt-q5yxuqv4n4-diqu3nusyr","code":"() => {\r\n            paragraphWithLinksComponent = new ParagraphWithLinks_1.ParagraphWithLinks(null);\r\n            // The parse method is marked as private, accessing here to better test the function\r\n            paragraphParts = index_1.parseTextWithEmbeddedLinks(scenarioContext.given.docString);\r\n        }","duration":1},{"title":"the following parts should be returned","status":"pass","exception":{},"rawTitle":"the following parts should be returned","description":"","docString":"[\n    {\"key\": \"\", \"partType\":\"text\", \"text\": \"my message \"},\n    {\"key\": \"0\", \"partType\":\"link\", \"text\": \"click here\"}\n]","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"vcbmgdligt-q5yxuqv4n4-b302e04yps","code":"() => {\r\n            const expected = stepContext.docStringAsEntity;\r\n            paragraphParts.should.be.eql(expected);\r\n        }","duration":0}],"title":"parse message that has 1 link and break into its parts ready for rendering","description":"","tags":[],"sequence":1,"id":"vcbmgdligt-q5yxuqv4n4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a message with multiple links embedded using both supported syntaxes","status":"pass","exception":{},"rawTitle":"a message with multiple links embedded using both supported syntaxes","description":"","docString":"my message ##link0##click here##/link0## has more ##link:test1##test link##/link## with extra text and additional types too ##newtype:test2##some text##/newtype## and text at the end","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"vcbmgdligt-q64x0c5t6o-b326gbiaow","code":"() => { }","duration":0},{"title":"parsing the message","status":"pass","exception":{},"rawTitle":"parsing the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"vcbmgdligt-q64x0c5t6o-diqu3nusyr","code":"() => {\r\n            paragraphWithLinksComponent = new ParagraphWithLinks_1.ParagraphWithLinks(null);\r\n            // The parse method is marked as private, accessing here to better test the function\r\n            paragraphParts = index_1.parseTextWithEmbeddedLinks(scenarioContext.given.docString);\r\n        }","duration":0},{"title":"the following parts should be returned","status":"pass","exception":{},"rawTitle":"the following parts should be returned","description":"","docString":"[\n    {\"key\": \"\", \"partType\":\"text\", \"text\": \"my message \"},\n    {\"key\": \"0\", \"partType\":\"link\", \"text\": \"click here\"},\n    {\"key\": \"\", \"partType\":\"text\", \"text\": \" has more \"},\n    {\"key\": \"test1\", \"partType\":\"link\", \"text\": \"test link\"},\n    {\"key\": \"\", \"partType\":\"text\", \"text\": \" with extra text and additional types too \"},\n    {\"key\": \"test2\", \"partType\":\"newtype\", \"text\": \"some text\"},\n    {\"key\": \"\", \"partType\":\"text\", \"text\": \" and text at the end\"}\n]","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"vcbmgdligt-q64x0c5t6o-b2zws7poqo","code":"() => {\r\n            const expected = stepContext.docStringAsEntity;\r\n            paragraphParts.should.be.eql(expected);\r\n        }","duration":1}],"title":"parse message that has multiple links and break into its parts ready for rendering","description":"","tags":[],"sequence":2,"id":"vcbmgdligt-q64x0c5t6o"}],"title":"Provide the ability to support binding with callbacks such as links within a text block","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Shared/ParagraphWithLInks.Spec.js","id":"vcbmgdligt","path":"Components/Shared"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":2,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":2,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Toast component","status":"pass","exception":{},"rawTitle":"Toast component","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkwd5tj28-150xhq68vhx-cn8j3gs6pc","code":"() => {\r\n            component = (React.createElement(Toast_1.Toast, { message: \"message\", toastType: \"info\", onClick: onClickSpy, onClose: onCloseSpy }));\r\n            wrapper = enzyme_1.shallow(component);\r\n        }","duration":1},{"title":"clicking on the toast","status":"pass","exception":{},"rawTitle":"clicking on the toast","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkwd5tj28-150xhq68vhx-38ap01mfgj","code":"() => {\r\n            const toast = wrapper.find(\"TouchableOpacity\").first();\r\n            toast.simulate(\"press\");\r\n        }","duration":0},{"title":"it should call onClick","status":"pass","exception":{},"rawTitle":"it should call onClick","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkwd5tj28-150xhq68vhx-z9b4mosbts","code":"() => {\r\n            onClickSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"Clicking on the close button","status":"pass","exception":{},"rawTitle":"Clicking on the close button","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Toast component works as expected."}],"type":"When","sequence":4,"id":"jkkwd5tj28-150xhq68vhx-10s9x4b3b39","code":"() => {\r\n            const toast = wrapper.find(\"Text\").last();\r\n            toast.simulate(\"press\");\r\n        }","duration":1},{"title":"it should call onClose","status":"pass","exception":{},"rawTitle":"it should call onClose","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Toast component works as expected."}],"type":"Then","sequence":5,"id":"jkkwd5tj28-150xhq68vhx-lqxywgcn8w","code":"() => {\r\n            onCloseSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"Toast component works as expected.","description":"","tags":[],"sequence":1,"id":"jkkwd5tj28-150xhq68vhx"}],"title":"<Toast /> works as expected","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Toasts/Toast.Spec.js","id":"jkkwd5tj28","path":"Components/Toasts"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":1,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A message containing an array with one of the elements prepended with the signature","status":"pass","exception":{},"rawTitle":"A message containing an array with one of the elements prepended with the signature","description":"Example:","docString":"","dataTable":[["arg0"],["data/ArrayBuffer:testdata"],["0"],["true"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"anyiid0d03-u8b34nommt-fz3m09i6lv","code":"() => {\r\n            messageFromNative = {\r\n                \"targetOrigin\": \"*\",\r\n                \"message\": {\r\n                    \"action\": \"anyAction\",\r\n                    \"actionArgs\": scenarioContext.given.tableAsSingleList,\r\n                    \"antiCSRFToken\": \"blabla\",\r\n                    \"latestone\": \"ugh\"\r\n                }\r\n            };\r\n        }","duration":3},{"title":"a call is made to deserialize the binary string","status":"pass","exception":{},"rawTitle":"a call is made to deserialize the binary string","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"anyiid0d03-u8b34nommt-q627ighkog","code":"() => {\r\n            parsedMessage = TypeSerializer_1.TypeSerializer.deserialize(messageFromNative.message.actionArgs, false);\r\n        }","duration":1},{"title":"the parsed message should contain an Array Buffer","status":"pass","exception":{},"rawTitle":"the parsed message should contain an Array Buffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"anyiid0d03-u8b34nommt-1wx54p6xuz","code":"() => {\r\n            testArrayBuffer = parsedMessage[1];\r\n            let actual = (testArrayBuffer instanceof ArrayBuffer);\r\n            actual.should.be.eql(true);\r\n        }","duration":1}],"title":"A message with binary string containing the string signature 'data/ArrayBuffer:' should be deserialized as an ArrayBuffer","description":"","tags":[],"sequence":1,"id":"anyiid0d03-u8b34nommt"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A message containing an ArrayBuffer","status":"pass","exception":{},"rawTitle":"A message containing an ArrayBuffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"anyiid0d03-iubeaqr7zx-b36iem9ats","code":"() => {\r\n            messageToNative = [\"param0\", \"param1\", testArrayBuffer, \"param2\"];\r\n        }","duration":1},{"title":"the array buffer should be serialized to binary string with the signature 'data/ArrayBuffer:' prepended","status":"pass","exception":{},"rawTitle":"the array buffer should be serialized to binary string with the signature 'data/ArrayBuffer:' prepended","description":"","docString":"","values":["data/ArrayBuffer:"],"ruleViolations":[{"rule":5,"title":"A message containing an ArrayBuffer should be converted to binary string with signature prepended before sending to native side"}],"type":"Then","sequence":2,"id":"anyiid0d03-iubeaqr7zx-qcymdab7sr","code":"() => {\r\n            let expectedValue = stepContext.values[0] + testableString;\r\n            let actual = (TypeSerializer_1.TypeSerializer.serialize(messageToNative, false))[2];\r\n            actual.should.be.eql(expectedValue);\r\n        }","duration":1}],"title":"A message containing an ArrayBuffer should be converted to binary string with signature prepended before sending to native side","description":"","tags":[],"sequence":2,"id":"anyiid0d03-iubeaqr7zx"}],"title":"During communication with host, ArrayBuffer type is converted to an empty object.","description":"To avoid this behavior, the message should first convert the ArrayBufer to a string.\nOnce received, the string should be converted back to ArrayBuffer so it's properly treated.\n    ","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Parsers/TypeSerializer.Spec.js","id":"anyiid0d03","path":"Infrastructure/Parsers"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":2,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A base 64 encoded string dGVzdA==","status":"pass","exception":{},"rawTitle":"A base 64 encoded string dGVzdA==","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"150xitw8099-7nzr15w0qo-zvm9nxnowd","code":"() => { }","duration":0},{"title":"calling stringToArrayBuffer should return an arraybuffer","status":"pass","exception":{},"rawTitle":"calling stringToArrayBuffer should return an arraybuffer","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"A base 64 encoded string is converted to an ArrayBuffer"}],"type":"Then","sequence":2,"id":"150xitw8099-7nzr15w0qo-hdcn3mrh7v","code":"() => {\r\n            outputArrayBuffer1 = TypeSerializer_1.TypeSerializer.base64ToArrayBuffer(base64String);\r\n            let isAnArrayBuffer = outputArrayBuffer1 instanceof ArrayBuffer;\r\n            isAnArrayBuffer.should.be.eql(true);\r\n        }","duration":0}],"title":"A base 64 encoded string is converted to an ArrayBuffer","description":"","tags":[],"sequence":1,"id":"150xitw8099-7nzr15w0qo"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A message containing an array with element containg the signature","status":"pass","exception":{},"rawTitle":"A message containing an array with element containg the signature","description":"Example:","docString":"","dataTable":[["arg0"],["data/ArrayBuffer:dGVzdA=="],["2"],["true"],["data/ArrayBuffer:YW5vdGhlcnRlc3Q="]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"150xitw8099-6r3wi2fw5v-b348zgyr8g","code":"() => {\r\n            inputArray = scenarioContext.given.tableAsSingleList;\r\n        }","duration":0},{"title":"a call is made to deserialize","status":"pass","exception":{},"rawTitle":"a call is made to deserialize","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"150xitw8099-6r3wi2fw5v-bqw12tva4j","code":"() => {\r\n            outputArray = TypeSerializer_1.TypeSerializer.deserialize(inputArray, true);\r\n        }","duration":1},{"title":"the second element of the output array should contain an ArrayBuffer","status":"pass","exception":{},"rawTitle":"the second element of the output array should contain an ArrayBuffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"150xitw8099-6r3wi2fw5v-s5zgpwym8z","code":"() => {\r\n            outputArrayBuffer1 = outputArray[1];\r\n            let actual = (outputArrayBuffer1 instanceof ArrayBuffer);\r\n            actual.should.be.eql(true);\r\n        }","duration":0},{"title":"the fifth element of the output array should contain an ArrayBuffer","status":"pass","exception":{},"rawTitle":"the fifth element of the output array should contain an ArrayBuffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"150xitw8099-6r3wi2fw5v-pol4z0pt9v","code":"() => {\r\n            outputArrayBuffer2 = outputArray[4];\r\n            let actual = (outputArrayBuffer2 instanceof ArrayBuffer);\r\n            actual.should.be.eql(true);\r\n        }","duration":0}],"title":"An array with elements containing the string signature 'data/ArrayBuffer:' should be deserialized as ArrayBuffers","description":"","tags":[],"sequence":2,"id":"150xitw8099-6r3wi2fw5v"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"An array that contains ArrayBuffers as direct elements or subelements (i.e. elements of an array element)","status":"pass","exception":{},"rawTitle":"An array that contains ArrayBuffers as direct elements or subelements (i.e. elements of an array element)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"150xitw8099-jkpxikncb4-hujs8rgtf1","code":"() => {\r\n            inputArray = [\"param0\", \"param1\", outputArrayBuffer1, \"param3\",\r\n                [\"subparam0\", outputArrayBuffer2, \"subparam2\"]];\r\n        }","duration":0},{"title":"The direct array buffer element in the array should be converted to string and the signature 'data/ArrayBuffer:' should be prepended","status":"pass","exception":{},"rawTitle":"The direct array buffer element in the array should be converted to string and the signature 'data/ArrayBuffer:' should be prepended","description":"","docString":"","values":["data/ArrayBuffer:"],"ruleViolations":[{"rule":5,"title":"An array with elements or subelements that are ArrayBuffers should be converted to base 64 encoded string with signature prepended"}],"type":"Then","sequence":2,"id":"150xitw8099-jkpxikncb4-7wv1jxl2rv","code":"() => {\r\n            let expectedValue = stepContext.values[0] + base64String;\r\n            outputArray = TypeSerializer_1.TypeSerializer.serialize(inputArray, true);\r\n            outputArray[2].should.be.eql(expectedValue);\r\n        }","duration":1},{"title":"Array buffer subelements should be converted to string and the signature 'data/ArrayBuffer:' should be prepended","status":"pass","exception":{},"rawTitle":"Array buffer subelements should be converted to string and the signature 'data/ArrayBuffer:' should be prepended","description":"","docString":"","values":["data/ArrayBuffer:"],"ruleViolations":[],"type":"and","sequence":3,"id":"150xitw8099-jkpxikncb4-jkpeuylf8g","code":"() => {\r\n            let expectedValue = stepContext.values[0] + base64String2;\r\n            outputArray[4][1].should.be.eql(expectedValue);\r\n        }","duration":1}],"title":"An array with elements or subelements that are ArrayBuffers should be converted to base 64 encoded string with signature prepended","description":"","tags":[],"sequence":3,"id":"150xitw8099-jkpxikncb4"}],"title":"When serializing an ArrayBuffer object, the ArrayBuffer object is converted to an empty object.","description":"To avoid this behavior, the ArrayBuffer should be converted to a base 64 encoded string.\nWhen deserializing the base 64 encoded string, the string should be decoded first and then converted back to ArrayBuffer.\n    ","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Parsers/TypeSerializer.Spec.js","id":"150xitw8099","path":"Infrastructure/Parsers"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"get(PABinarySerializer)","status":"pass","exception":{},"rawTitle":"get(PABinarySerializer)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fziy5hjhxh-11lb1rf2kps-lgtfyzmox7","code":"() => {\r\n            component1 = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.PABinarySerializer);\r\n        }","duration":0},{"title":"call get(IErrorSerializersManager) again","status":"pass","exception":{},"rawTitle":"call get(IErrorSerializersManager) again","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fziy5hjhxh-11lb1rf2kps-x8k4h975sb","code":"() => {\r\n            component2 = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.PABinarySerializer);\r\n        }","duration":0},{"title":"component should be a PABinarySerializer instance","status":"pass","exception":{},"rawTitle":"component should be a PABinarySerializer instance","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fziy5hjhxh-11lb1rf2kps-lr309ertuo","code":"() => {\r\n            chai.expect(component1 instanceof ApiHost_1.ApiHost.LocalServices.Serialization.PABinarySerializer).be.eql(true);\r\n        }","duration":0},{"title":"the second get should've returned the same instance","status":"pass","exception":{},"rawTitle":"the second get should've returned the same instance","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fziy5hjhxh-11lb1rf2kps-lr0xpsayyo","code":"() => {\r\n            chai.expect(component1).be.equal(component2);\r\n        }","duration":0}],"title":"Verify runtime components can be retrieved from kernel","description":"","tags":[],"sequence":1,"id":"fziy5hjhxh-11lb1rf2kps"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"get(IErrorSerializersManager)","status":"pass","exception":{},"rawTitle":"get(IErrorSerializersManager)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fziy5hjhxh-11lb1rf2kps-i73ktxu4kg","code":"() => {\r\n            component1 = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IErrorSerializersManager);\r\n        }","duration":1},{"title":"call get(IErrorSerializersManager) again","status":"pass","exception":{},"rawTitle":"call get(IErrorSerializersManager) again","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fziy5hjhxh-11lb1rf2kps-x8k4h975sb","code":"() => {\r\n            component2 = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IErrorSerializersManager);\r\n        }","duration":0},{"title":"component should be a ErrorSerializersManager instance","status":"pass","exception":{},"rawTitle":"component should be a ErrorSerializersManager instance","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fziy5hjhxh-11lb1rf2kps-lqvfn8bn34","code":"() => {\r\n            chai.expect(component1 instanceof ApiHost_1.ApiHost.LocalServices.Platform.Serialization.ErrorSerializersManager).be.eql(true);\r\n        }","duration":0},{"title":"the second get should've returned the same instance","status":"pass","exception":{},"rawTitle":"the second get should've returned the same instance","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fziy5hjhxh-11lb1rf2kps-lr0xpsayyo","code":"() => {\r\n            chai.expect(component1).be.equal(component2);\r\n        }","duration":0}],"title":"Verify runtime components can be retrieved from kernel","description":"","tags":[],"sequence":2,"id":"fziy5hjhxh-11lb1rf2kps"}],"title":"Components registered with InversifyJS should work.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Inversify/Inversify.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks","status":"pass","exception":{},"rawTitle":"mocks","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fziy5hjhxh-9pbsb4-a5acre28cg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n        })","duration":1}],"title":"","description":"","tags":[],"id":"fziy5hjhxh-9pbsb4"},"id":"fziy5hjhxh","path":"Inversify"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":14,"duration":31,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language en-US","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-168iqxvdm2l-yhhh851rrf","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-168iqxvdm2l-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","supportedDeviceLocale"],["en-US","en-US"],["fr-FR","fr-FR"],["it-IT","it-IT"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language en-US","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-168iqxvdm2l-yhhh851rrf","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-168iqxvdm2l-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"en-US","supportedDeviceLocale":"en-US"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":1,"id":"5jt7bgra5f-168iqxvdm2l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language fr-FR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-168iqxvdm2l-wnlux9vjab","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, fr-FR, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-168iqxvdm2l-jkk1563ue8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"fr-FR","supportedDeviceLocale":"fr-FR"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":2,"id":"5jt7bgra5f-168iqxvdm2l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language it-IT","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-168iqxvdm2l-632cn514w3","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, it-IT, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-168iqxvdm2l-12z6hc1lv9","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"it-IT","supportedDeviceLocale":"it-IT"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":3,"id":"5jt7bgra5f-168iqxvdm2l"}],"title":"When the device language is one of the PowerApps supported languages that do not have locale,","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":19,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-BR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-timian6tgr","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, pt-BR, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-bq3szgow3f","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","supportedDeviceLocale"],["pt-BR","pt-BR"],["pt-PT","pt-PT"],["zh-CN","zh-CN"],["zh-TW","zh-TW"],["zh-HK-Hant","zh-TW"],["sr-Cyrl-RS","sr-Cyrl-RS"],["sr-Latn","sr-Latn-RS"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-BR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-timian6tgr","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, pt-BR, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-bq3szgow3f","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"pt-BR","supportedDeviceLocale":"pt-BR"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-PT","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-1219fm1q92z","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, pt-PT, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-tgnwmpn87f","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"pt-PT","supportedDeviceLocale":"pt-PT"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-CN","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-ie9rrlunil","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, zh-CN, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-mt9157ead9","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-CN","supportedDeviceLocale":"zh-CN"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":3,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-TW","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-17e1eoxlr7h","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, zh-TW, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-enii9x9j9n","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-TW","supportedDeviceLocale":"zh-TW"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":4,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-HK-Hant","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-cn404ghh1c","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":0},{"title":"the expected language code, zh-TW, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-enii9x9j9n","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-HK-Hant","supportedDeviceLocale":"zh-TW"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":5,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language sr-Cyrl-RS","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-u8nlqyq0u8","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":4},{"title":"the expected language code, sr-Cyrl-RS, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-f9tgrd3pdf","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"sr-Cyrl-RS","supportedDeviceLocale":"sr-Cyrl-RS"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":6,"id":"5jt7bgra5f-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language sr-Latn","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kykh6ow7wg-53ifoi79od","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":3},{"title":"the expected language code, sr-Latn-RS, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kykh6ow7wg-jkkzarr7yo","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"sr-Latn","supportedDeviceLocale":"sr-Latn-RS"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":7,"id":"5jt7bgra5f-kykh6ow7wg"}],"title":"When the device language is one of the PowerApps supported languages that has locale,","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language xz-WY","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kyhyck0gg0-15ewpke2f5s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":1},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kyhyck0gg0-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","supportedDeviceLocale"],["xz-WY","en-US"],["vw","en-US"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language xz-WY","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kyhyck0gg0-15ewpke2f5s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":1},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kyhyck0gg0-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"xz-WY","supportedDeviceLocale":"en-US"},"title":"When the device language is unsupported by PowerApps,","sequence":1,"id":"5jt7bgra5f-kyhyck0gg0"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language vw","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-kyhyck0gg0-17tzblov91","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":0},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-kyhyck0gg0-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"deviceLanguage":"vw","supportedDeviceLocale":"en-US"},"title":"When the device language is unsupported by PowerApps,","sequence":2,"id":"5jt7bgra5f-kyhyck0gg0"}],"title":"When the device language is unsupported by PowerApps,","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with undetermined language","status":"pass","exception":{},"rawTitle":"a device with undetermined language","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-i0ukxati0z-lr0bj76y9s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).throws(\"error\");\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":1},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language cannot be determined for some reason,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-i0ukxati0z-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["supportedDeviceLocale"],["en-US"],["en-US"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with undetermined language","status":"pass","exception":{},"rawTitle":"a device with undetermined language","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-i0ukxati0z-lr0bj76y9s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).throws(\"error\");\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":1},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language cannot be determined for some reason,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-i0ukxati0z-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"supportedDeviceLocale":"en-US"},"title":"When the device language cannot be determined for some reason,","sequence":1,"id":"5jt7bgra5f-i0ukxati0z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with undetermined language","status":"pass","exception":{},"rawTitle":"a device with undetermined language","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jt7bgra5f-i0ukxati0z-lr0bj76y9s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).throws(\"error\");\r\n            languageCode = new PlayerStrings_1.PlayerStrings().supportedDeviceLocale;\r\n        }","duration":1},{"title":"the expected language code, en-US, is returned","status":"pass","exception":{},"rawTitle":"the expected language code, <supportedDeviceLocale>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language cannot be determined for some reason,"}],"type":"Then","sequence":2,"id":"5jt7bgra5f-i0ukxati0z-jkn9le05y8","code":"() => {\r\n            languageCode.should.eql(scenarioOutlineContext.example.supportedDeviceLocale);\r\n        }","duration":0}],"example":{"supportedDeviceLocale":"en-US"},"title":"When the device language cannot be determined for some reason,","sequence":2,"id":"5jt7bgra5f-i0ukxati0z"}],"title":"When the device language cannot be determined for some reason,","description":"","tags":[]}],"title":"A service that gets the device's language locale, loads the supported translation file and returns the language to use.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Localization/Strings.Spec.js","id":"5jt7bgra5f","path":"Localization"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":12,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language en-US","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-168iqxvdm2l-yhhh851rrf","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-168iqxvdm2l-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","localeDateString"],["en-US","11/30/2011"],["fr-FR","30 novembre 2011"],["it-IT","30 Novembre 2011"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language en-US","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-168iqxvdm2l-yhhh851rrf","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-168iqxvdm2l-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"en-US","localeDateString":"2011-11-30T08:00:00.000Z"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":1,"id":"143yopt60hn-168iqxvdm2l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language fr-FR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-168iqxvdm2l-wnlux9vjab","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, 30 novembre 2011, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-168iqxvdm2l-jkjrrlg6e8","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"fr-FR","localeDateString":"30 novembre 2011"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":2,"id":"143yopt60hn-168iqxvdm2l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language it-IT","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-168iqxvdm2l-632cn514w3","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, 30 Novembre 2011, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that do not have locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-168iqxvdm2l-z88nepl82j","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"it-IT","localeDateString":"30 Novembre 2011"},"title":"When the device language is one of the PowerApps supported languages that do not have locale,","sequence":3,"id":"143yopt60hn-168iqxvdm2l"}],"title":"When the device language is one of the PowerApps supported languages that do not have locale,","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-BR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-timian6tgr","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":0},{"title":"the expected localized date string, 30 de novembro de 2011, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jknmqv5qzs","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","localeDateString"],["pt-BR","30 de novembro de 2011"],["pt-PT","30 de novembro de 2011"],["zh-CN","2011年11月30日"],["zh-TW","2011年11月30日"],["zh-HK-Hant","2011年11月30日"],["ja-JP","2011年11月30日"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-BR","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-timian6tgr","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":0},{"title":"the expected localized date string, 30 de novembro de 2011, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jknmqv5qzs","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"pt-BR","localeDateString":"30 de novembro de 2011"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":1,"id":"143yopt60hn-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language pt-PT","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-1219fm1q92z","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":0},{"title":"the expected localized date string, 30 de novembro de 2011, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jknmqv5qzs","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"pt-PT","localeDateString":"30 de novembro de 2011"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":2,"id":"143yopt60hn-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-CN","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-ie9rrlunil","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, 2011年11月30日, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jkspd2xz9c","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-CN","localeDateString":"2011年11月30日"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":3,"id":"143yopt60hn-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-TW","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-17e1eoxlr7h","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, 2011年11月30日, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jkspd2xz9c","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-TW","localeDateString":"2011年11月30日"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":4,"id":"143yopt60hn-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language zh-HK-Hant","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-cn404ghh1c","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, 2011年11月30日, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jkspd2xz9c","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"zh-HK-Hant","localeDateString":"2011年11月30日"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":5,"id":"143yopt60hn-kykh6ow7wg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language ja-JP","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-kykh6ow7wg-48nnzj98ml","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":3},{"title":"the expected localized date string, 2011年11月30日, is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is one of the PowerApps supported languages that has locale,"}],"type":"Then","sequence":2,"id":"143yopt60hn-kykh6ow7wg-jkspd2xz9c","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"ja-JP","localeDateString":"2011年11月30日"},"title":"When the device language is one of the PowerApps supported languages that has locale,","sequence":6,"id":"143yopt60hn-kykh6ow7wg"}],"title":"When the device language is one of the PowerApps supported languages that has locale,","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language xz-WY","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-16b7zjfae80-15ewpke2f5s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason"}],"type":"Then","sequence":2,"id":"143yopt60hn-16b7zjfae80-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["deviceLanguage","localeDateString"],["xz-WY","11/30/2011"],["vw","11/30/2011"],["vw32rfew@","11/30/2011"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language xz-WY","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-16b7zjfae80-15ewpke2f5s","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason"}],"type":"Then","sequence":2,"id":"143yopt60hn-16b7zjfae80-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"xz-WY","localeDateString":"2011-11-30T08:00:00.000Z"},"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason","sequence":1,"id":"143yopt60hn-16b7zjfae80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language vw","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-16b7zjfae80-17tzblov91","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason"}],"type":"Then","sequence":2,"id":"143yopt60hn-16b7zjfae80-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"vw","localeDateString":"2011-11-30T08:00:00.000Z"},"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason","sequence":2,"id":"143yopt60hn-16b7zjfae80"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a device with language vw32rfew@","status":"pass","exception":{},"rawTitle":"a device with language <deviceLanguage>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"143yopt60hn-16b7zjfae80-abyj91r2zv","code":"() => {\r\n            RNGetDeviceLocaleStub = sinon.stub(RNDeviceInfoMock_1.RNDeviceInfoMock, RNDeviceInfoMock_1.RNDeviceInfoMock.getDeviceLocale.name).returns(scenarioOutlineContext.example.deviceLanguage);\r\n            dateString = new PlayerStrings_1.PlayerStrings().getLocaleDateString(new Date(2011, 10, 30));\r\n        }","duration":1},{"title":"the expected localized date string, Wed Nov 30 2011 00:00:00 GMT-0800 (Pacific Standard Time), is returned","status":"pass","exception":{},"rawTitle":"the expected localized date string, <localeDateString>, is returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason"}],"type":"Then","sequence":2,"id":"143yopt60hn-16b7zjfae80-jkj193juo0","code":"() => {\r\n            dateString.should.eql(scenarioOutlineContext.exampleRaw.localeDateString);\r\n        }","duration":0}],"example":{"deviceLanguage":"vw32rfew@","localeDateString":"2011-11-30T08:00:00.000Z"},"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason","sequence":3,"id":"143yopt60hn-16b7zjfae80"}],"title":"When the device language is unsupported by PowerApps, or cannot be determined for some reason","description":"","tags":[]}],"title":"A method that returns a localized date string with a given date.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Localization/Strings.Spec.js","id":"143yopt60hn","path":"Localization"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":41,"failedCount":0,"pendingCount":0,"totalCount":41,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":30,"failedCount":0,"pendingCount":0,"totalCount":30,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-1vudu7je2b","code":"() => { }","duration":1},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":4},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":1},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":2},{"title":"the startNpsRequired action invoked state should be true","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqxysoklps","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["forceShowNps","isAutomation","userHasSeenNpsThisSession","activeRouteRoot","checkNpsRequestedResult","startNpsRequiredShouldBeCalled"],["true","false","false","wrongRoute","{\"shouldPromptUser\":true,\"url\":\"someurl\"}","true"],["false","false","false","AppCatalog","{\"shouldPromptUser\":true,\"url\":\"someurl\"}","true"],["false","false","false","wrongRoute","{\"shouldPromptUser\":false}","false"],["false","false","false","AppCatalog","{\"shouldPromptUser\":false}","false"],["false","true","false","AppCatalog","{\"shouldPromptUser\":true,\"url\":\"someUrl\"}","false"],["false","false","true","AppCatalog","{\"shouldPromptUser\":true,\"url\":\"someUrl\"}","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-1vudu7je2b","code":"() => { }","duration":1},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":4},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":1},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":2},{"title":"the startNpsRequired action invoked state should be true","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqxysoklps","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":true,"isAutomation":false,"userHasSeenNpsThisSession":false,"activeRouteRoot":"wrongRoute","checkNpsRequestedResult":{"shouldPromptUser":true,"url":"someurl"},"startNpsRequiredShouldBeCalled":true},"title":"Start the NPS process if required","sequence":1,"id":"z3h61rhivh-bq3zj77ct1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-3zl71rpgr","code":"() => { }","duration":0},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":0},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":1},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":0},{"title":"the startNpsRequired action invoked state should be true","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqxysoklps","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":false,"isAutomation":false,"userHasSeenNpsThisSession":false,"activeRouteRoot":"AppCatalog","checkNpsRequestedResult":{"shouldPromptUser":true,"url":"someurl"},"startNpsRequiredShouldBeCalled":true},"title":"Start the NPS process if required","sequence":2,"id":"z3h61rhivh-bq3zj77ct1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-b2zvdamjhc","code":"() => { }","duration":0},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":1},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":0},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":0},{"title":"the startNpsRequired action invoked state should be false","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqzws459v4","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":false,"isAutomation":false,"userHasSeenNpsThisSession":false,"activeRouteRoot":"wrongRoute","checkNpsRequestedResult":{"shouldPromptUser":false},"startNpsRequiredShouldBeCalled":false},"title":"Start the NPS process if required","sequence":3,"id":"z3h61rhivh-bq3zj77ct1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-3zl71rpgr","code":"() => { }","duration":0},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":1},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":1},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":0},{"title":"the startNpsRequired action invoked state should be false","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqzws459v4","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":false,"isAutomation":false,"userHasSeenNpsThisSession":false,"activeRouteRoot":"AppCatalog","checkNpsRequestedResult":{"shouldPromptUser":false},"startNpsRequiredShouldBeCalled":false},"title":"Start the NPS process if required","sequence":4,"id":"z3h61rhivh-bq3zj77ct1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-3zl71rpgr","code":"() => { }","duration":0},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":0},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":0},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":0},{"title":"the startNpsRequired action invoked state should be false","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqzws459v4","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":false,"isAutomation":true,"userHasSeenNpsThisSession":false,"activeRouteRoot":"AppCatalog","checkNpsRequestedResult":{"shouldPromptUser":true,"url":"someUrl"},"startNpsRequiredShouldBeCalled":false},"title":"Start the NPS process if required","sequence":5,"id":"z3h61rhivh-bq3zj77ct1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the following state:","status":"pass","exception":{},"rawTitle":"the following state:","description":"forceShowNps is <forceShowNps>\nuserHasSeenNpsThisSession is <userHasSeenNpsThisSession>\nactiveRouteRoot is <activeRouteRoot>","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-bq3zj77ct1-b38iykrzq8","code":"() => { }","duration":0},{"title":"the result of checkNpsRequestedAsync is [object Object]","status":"pass","exception":{},"rawTitle":"the result of checkNpsRequestedAsync is <checkNpsRequestedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"z3h61rhivh-bq3zj77ct1-3n2yaiz6iz","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.NPSAdapter.prototype, \"checkNpsRequestedAsync\")\r\n                .returns(Promise.resolve(scenarioOutlineContext.example.checkNpsRequestedResult));\r\n        }","duration":0},{"title":"the correct state is initialized","status":"pass","exception":{},"rawTitle":"the correct state is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-bq3zj77ct1-6ejm1a08bx","code":"() => {\r\n            const store = Utilities_1.createMockStore(() => {\r\n                return {\r\n                    UserSessionState: {\r\n                        npsPrompted: scenarioOutlineContext.example.userHasSeenNpsThisSession\r\n                    },\r\n                    NavigationState: {\r\n                        index: 0,\r\n                        routes: [\r\n                            {\r\n                                routeName: scenarioOutlineContext.example.activeRouteRoot\r\n                            }\r\n                        ]\r\n                    },\r\n                    AuthenticationState: {\r\n                        isAutomationAccount: scenarioOutlineContext.example.isAutomation\r\n                    }\r\n                };\r\n            });\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":0},{"title":"the NPS process is started","status":"pass","exception":{},"rawTitle":"the NPS process is started","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"z3h61rhivh-bq3zj77ct1-jkpcpvgyow","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            startNpsRequiredSpy = sinon.spy();\r\n            const process = new Processes_1.NPSProcess({\r\n                startNpsRequired: startNpsRequiredSpy\r\n            });\r\n            yield process.startNpsIfRequired(0, scenarioOutlineContext.example.forceShowNps);\r\n        })","duration":0},{"title":"the startNpsRequired action invoked state should be false","status":"pass","exception":{},"rawTitle":"the startNpsRequired action invoked state should be <startNpsRequiredShouldBeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"z3h61rhivh-bq3zj77ct1-lqzws459v4","code":"() => {\r\n            startNpsRequiredSpy.calledOnce.should.be.eql(scenarioOutlineContext.example.startNpsRequiredShouldBeCalled);\r\n        }","duration":0}],"example":{"forceShowNps":false,"isAutomation":false,"userHasSeenNpsThisSession":true,"activeRouteRoot":"AppCatalog","checkNpsRequestedResult":{"shouldPromptUser":true,"url":"someUrl"},"startNpsRequiredShouldBeCalled":false},"title":"Start the NPS process if required","sequence":6,"id":"z3h61rhivh-bq3zj77ct1"}],"title":"Start the NPS process if required","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"completeNPS is invoked immediately","status":"pass","exception":{},"rawTitle":"completeNPS is invoked immediately","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"z3h61rhivh-1126fyt6iid-1l25esquk3","code":"() => {\r\n            trackUIActivityEventStub = sinon.stub(Core.Telemetry.Log, \"trackUIActivityEvent\");\r\n            const process = new Processes_1.NPSProcess({ npsCompleted: completeNPSSpy });\r\n            process.recordNpsResult({ msgType: Processes_1.NPSProcess.MsgTypes.Close });\r\n        }","duration":2},{"title":"telemetry should be logged indicating the user completed the NPS flow immediately\"","status":"pass","exception":{},"rawTitle":"telemetry should be logged indicating the user completed the NPS flow immediately\"","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"z3h61rhivh-1126fyt6iid-lersz5jpq3","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            trackUIActivityEventStub.calledWith(Processes_1.NPSProcess.UIActivityEvents.CompletedWithoutInteraction, undefined).should.be.true;\r\n        }","duration":0},{"title":"completeNPSSpy should be called once","status":"pass","exception":{},"rawTitle":"completeNPSSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"z3h61rhivh-1126fyt6iid-lr020tllxc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            completeNPSSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"User completes the NPS flow immediately","description":"","tags":[],"sequence":2,"id":"z3h61rhivh-1126fyt6iid"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a score of \"6\" is recorded and the msgType is \"thankyouNpsDialog\"","status":"pass","exception":{},"rawTitle":"a score of \"6\" is recorded and the msgType is \"thankyouNpsDialog\"","description":"","docString":"","values":[6,"thankyouNpsDialog"],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-12u896y5uv7-oyhf5j91sz","code":"() => {\r\n            npsScore = stepContext.values[0];\r\n            process = new Processes_1.NPSProcess({ npsCompleted: completeNPSSpy });\r\n            process.recordNpsResult({\r\n                msgType: stepContext.values[1],\r\n                npsScore\r\n            });\r\n        }","duration":0},{"title":"completeNPS is invoked after recording a score","status":"pass","exception":{},"rawTitle":"completeNPS is invoked after recording a score","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"z3h61rhivh-12u896y5uv7-lqwgpi076o","code":"() => {\r\n            trackUIActivityEventStub = sinon.stub(Core.Telemetry.Log, \"trackUIActivityEvent\");\r\n            process.recordNpsResult({ msgType: Processes_1.NPSProcess.MsgTypes.Close });\r\n        }","duration":0},{"title":"telemetry should be logged indicating the NPS flow was completed with the selected npsScore and url clicked state is set to \"false\"","status":"pass","exception":{},"rawTitle":"telemetry should be logged indicating the NPS flow was completed with the selected npsScore and url clicked state is set to \"false\"","description":"","docString":"","values":[false],"ruleViolations":[],"type":"Then","sequence":3,"id":"z3h61rhivh-12u896y5uv7-cifz8dr6e8","code":"() => {\r\n            const expectedData = {\r\n                score: npsScore,\r\n                rateOrCommunityForumLinkClicked: stepContext.values[0]\r\n            };\r\n            // tslint:disable-next-line:no-unused-expression\r\n            trackUIActivityEventStub.calledWith(Processes_1.NPSProcess.UIActivityEvents.Completed, expectedData).should.be.true;\r\n        }","duration":0},{"title":"completeNPSSpy should be called once","status":"pass","exception":{},"rawTitle":"completeNPSSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"z3h61rhivh-12u896y5uv7-lr020tllxc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            completeNPSSpy.calledOnce.should.be.true;\r\n        }","duration":1}],"title":"User completes the NPS flow without invoking the rate/community link","description":"","tags":[],"sequence":3,"id":"z3h61rhivh-12u896y5uv7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a score of \"6\" is recorded and the msgType is \"thankyouNpsDialog\"","status":"pass","exception":{},"rawTitle":"a score of \"6\" is recorded and the msgType is \"thankyouNpsDialog\"","description":"","docString":"","values":[6,"thankyouNpsDialog"],"ruleViolations":[],"type":"Given","sequence":1,"id":"z3h61rhivh-z9drg5huo0-oyhf5j91sz","code":"() => {\r\n            npsScore = stepContext.values[0];\r\n            process = new Processes_1.NPSProcess({ npsCompleted: completeNPSSpy });\r\n            process.recordNpsResult({\r\n                msgType: stepContext.values[1],\r\n                npsScore\r\n            });\r\n        }","duration":0},{"title":"the recorded rate/community url is \"some.url\"","status":"pass","exception":{},"rawTitle":"the recorded rate/community url is \"some.url\"","description":"","docString":"","values":["some.url"],"ruleViolations":[],"type":"When","sequence":2,"id":"z3h61rhivh-z9drg5huo0-135buc0gs7n","code":"() => {\r\n            trackUIActivityEventStub = sinon.stub(Core.Telemetry.Log, \"trackUIActivityEvent\");\r\n            process.recordNpsResult({ openUrl: stepContext.values[0] });\r\n        }","duration":1},{"title":"telemetry should be logged indicating the NPS flow was completed with the selected npsScore and url clicked state is set to \"true\"","status":"pass","exception":{},"rawTitle":"telemetry should be logged indicating the NPS flow was completed with the selected npsScore and url clicked state is set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"Then","sequence":3,"id":"z3h61rhivh-z9drg5huo0-cinz74ivxc","code":"() => {\r\n            const expectedData = {\r\n                score: npsScore,\r\n                rateOrCommunityForumLinkClicked: stepContext.values[0]\r\n            };\r\n            // tslint:disable-next-line:no-unused-expression\r\n            trackUIActivityEventStub.calledWith(Processes_1.NPSProcess.UIActivityEvents.Completed, expectedData).should.be.true;\r\n        }","duration":0},{"title":"completeNPSSpy should be called once","status":"pass","exception":{},"rawTitle":"completeNPSSpy should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"z3h61rhivh-z9drg5huo0-lr020tllxc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            completeNPSSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"User completes the NPS flow and invokes the rate/community link","description":"","tags":[],"sequence":4,"id":"z3h61rhivh-z9drg5huo0"}],"title":"NPSProcess contains the logic for the NPS flow","description":"- updates the NPS state\n- logs telemetry when user completes the flow immediately\n- logs telemetry when user completes the NPS flow including the score and whether the user invoked the rate or community link\n- completes the NPS flow","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Processes/NPSProcess.spec.js","id":"z3h61rhivh","path":"Processes"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"The current screen is set to First","status":"pass","exception":{},"rawTitle":"The current screen is set to <InitialScreen>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-9z191cuxoj-cn5ggchbc0","code":"() => {\r\n            returnFocusStub = sinon.stub(Services_1.ScreenReaderFocusManager, Services_1.ScreenReaderFocusManager.returnFocus.name);\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.InitialScreen);\r\n            returnFocusStub.reset();\r\n        }","duration":1},{"title":"The current screen name is set to First","status":"pass","exception":{},"rawTitle":"The current screen name is set to <ScreenToSet>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-9z191cuxoj-cnb07d8glc","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.ScreenToSet);\r\n        }","duration":1},{"title":"Return focus should be called: false","status":"pass","exception":{},"rawTitle":"Return focus should be called: <ReturnFocusCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-9z191cuxoj-lr3cu0wibk","code":"() => {\r\n            returnFocusStub.calledOnce.should.be.eql(scenarioOutlineContext.example.ReturnFocusCalled);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["InitialScreen","ScreenToSet","ReturnFocusCalled"],["First","First","false"],["First","Second","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"The current screen is set to First","status":"pass","exception":{},"rawTitle":"The current screen is set to <InitialScreen>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-9z191cuxoj-cn5ggchbc0","code":"() => {\r\n            returnFocusStub = sinon.stub(Services_1.ScreenReaderFocusManager, Services_1.ScreenReaderFocusManager.returnFocus.name);\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.InitialScreen);\r\n            returnFocusStub.reset();\r\n        }","duration":1},{"title":"The current screen name is set to First","status":"pass","exception":{},"rawTitle":"The current screen name is set to <ScreenToSet>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-9z191cuxoj-cnb07d8glc","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.ScreenToSet);\r\n        }","duration":1},{"title":"Return focus should be called: false","status":"pass","exception":{},"rawTitle":"Return focus should be called: <ReturnFocusCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-9z191cuxoj-lr3cu0wibk","code":"() => {\r\n            returnFocusStub.calledOnce.should.be.eql(scenarioOutlineContext.example.ReturnFocusCalled);\r\n        }","duration":1}],"example":{"InitialScreen":"First","ScreenToSet":"First","ReturnFocusCalled":false},"title":"Set the current screen name","sequence":1,"id":"7nz9dm9ryo-9z191cuxoj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"The current screen is set to First","status":"pass","exception":{},"rawTitle":"The current screen is set to <InitialScreen>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-9z191cuxoj-cn5ggchbc0","code":"() => {\r\n            returnFocusStub = sinon.stub(Services_1.ScreenReaderFocusManager, Services_1.ScreenReaderFocusManager.returnFocus.name);\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.InitialScreen);\r\n            returnFocusStub.reset();\r\n        }","duration":2},{"title":"The current screen name is set to Second","status":"pass","exception":{},"rawTitle":"The current screen name is set to <ScreenToSet>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-9z191cuxoj-jkmalqbxuo","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(scenarioOutlineContext.example.ScreenToSet);\r\n        }","duration":0},{"title":"Return focus should be called: true","status":"pass","exception":{},"rawTitle":"Return focus should be called: <ReturnFocusCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-9z191cuxoj-9z1dklrqj9","code":"() => {\r\n            returnFocusStub.calledOnce.should.be.eql(scenarioOutlineContext.example.ReturnFocusCalled);\r\n        }","duration":0}],"example":{"InitialScreen":"First","ScreenToSet":"Second","ReturnFocusCalled":true},"title":"Set the current screen name","sequence":2,"id":"7nz9dm9ryo-9z191cuxoj"}],"title":"Set the current screen name","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"The current route is \"First\"","status":"pass","exception":{},"rawTitle":"The current route is \"First\"","description":"","docString":"","values":["First"],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-pgyj9b39r4-ciojbs2lmo","code":"() => {\r\n            managedRoute = stepContext.values[0];\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(managedRoute);\r\n        }","duration":2},{"title":"A component is tracked","status":"pass","exception":{},"rawTitle":"A component is tracked","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-pgyj9b39r4-9y97k324el","code":"() => {\r\n            component = {};\r\n            managed = Services_1.ScreenReaderFocusManager.track(component);\r\n        }","duration":0},{"title":"The managed node should be the component","status":"pass","exception":{},"rawTitle":"The managed node should be the component","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-pgyj9b39r4-hf5bpz21x9","code":"() => {\r\n            managed.node.should.be.eql(component);\r\n        }","duration":0},{"title":"The managed route should match the given route","status":"pass","exception":{},"rawTitle":"The managed route should match the given route","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"7nz9dm9ryo-pgyj9b39r4-lr066a1tf4","code":"() => {\r\n            managed.route.should.be.eql(managedRoute);\r\n        }","duration":0}],"title":"A tracked component is created properly","description":"","tags":[],"sequence":2,"id":"7nz9dm9ryo-pgyj9b39r4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A component is tracked","status":"pass","exception":{},"rawTitle":"A component is tracked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-frws5fn18l-86eemsdasd","code":"() => {\r\n            component = {};\r\n            managed = Services_1.ScreenReaderFocusManager.track(component);\r\n        }","duration":1},{"title":"UpdateNode is called on the managed tracking object","status":"pass","exception":{},"rawTitle":"UpdateNode is called on the managed tracking object","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-frws5fn18l-cn79pcabcw","code":"() => {\r\n            updatedComponent = {};\r\n            managed.updateNode(updatedComponent);\r\n        }","duration":1},{"title":"The managed node should be the updated component","status":"pass","exception":{},"rawTitle":"The managed node should be the updated component","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-frws5fn18l-cn4mjpg7wg","code":"() => {\r\n            managed.node.should.be.eql(updatedComponent);\r\n        }","duration":0}],"title":"A tracked component is updated properly","description":"","tags":[],"sequence":3,"id":"7nz9dm9ryo-frws5fn18l"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A component is tracked","status":"pass","exception":{},"rawTitle":"A component is tracked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-ph37qbzi4w-86eemsdasd","code":"() => {\r\n            component = {};\r\n            managed = Services_1.ScreenReaderFocusManager.track(component, onDisposedSpy);\r\n        }","duration":1},{"title":"Dispose is called on the managed tracking object","status":"pass","exception":{},"rawTitle":"Dispose is called on the managed tracking object","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nz9dm9ryo-ph37qbzi4w-tl8z7hbup1","code":"() => {\r\n            managed.dispose();\r\n        }","duration":0},{"title":"any pending setAccessibilityFocus call for the component should be cancelled","status":"pass","exception":{},"rawTitle":"any pending setAccessibilityFocus call for the component should be cancelled","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nz9dm9ryo-ph37qbzi4w-jkraw0x9b4","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            cancelSetAccessibilityFocusForNodeStub.calledOnce.should.be.true;\r\n            // tslint:disable-next-line:no-unused-expression\r\n            cancelSetAccessibilityFocusForNodeStub.calledWith(component).should.be.true;\r\n        }","duration":0},{"title":"onDisposed should be called","status":"pass","exception":{},"rawTitle":"onDisposed should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"7nz9dm9ryo-ph37qbzi4w-jkl7gqgmm8","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            onDisposedSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"A tracked component is disposed properly","description":"","tags":[],"sequence":4,"id":"7nz9dm9ryo-ph37qbzi4w"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"The initial route is \"First\"","status":"pass","exception":{},"rawTitle":"The initial route is \"First\"","description":"","docString":"","values":["First"],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-6wmjx9cpu3-ciiryy78xs","code":"() => {\r\n            managedRoute = stepContext.values[0];\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(managedRoute);\r\n        }","duration":3},{"title":"two component are tracked","status":"pass","exception":{},"rawTitle":"two component are tracked","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"7nz9dm9ryo-6wmjx9cpu3-jkqq2dtaqo","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.track({});\r\n            secondComponent = {};\r\n            secondOnDisposedSpy = sinon.spy();\r\n            secondManaged = Services_1.ScreenReaderFocusManager.track(secondComponent, secondOnDisposedSpy);\r\n        }","duration":1},{"title":"the route is updated to a \"New Route\"","status":"pass","exception":{},"rawTitle":"the route is updated to a \"New Route\"","description":"","docString":"","values":["New Route"],"ruleViolations":[],"type":"and","sequence":3,"id":"7nz9dm9ryo-6wmjx9cpu3-oyhj205h6d","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(stepContext.values[0]);\r\n            setAccessibilityFocusStub.reset();\r\n            returnFocusSpy = sinon.spy(Services_1.ScreenReaderFocusManager, Services_1.ScreenReaderFocusManager.returnFocus.name);\r\n        }","duration":1},{"title":"the route is updated to the initial route","status":"pass","exception":{},"rawTitle":"the route is updated to the initial route","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"7nz9dm9ryo-6wmjx9cpu3-lr154ejhxc","code":"() => {\r\n            Services_1.ScreenReaderFocusManager.setCurrentRoute(managedRoute);\r\n        }","duration":0},{"title":"setAccessibilityFocusStub should be called with the second tracked managed focus","status":"pass","exception":{},"rawTitle":"setAccessibilityFocusStub should be called with the second tracked managed focus","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"7nz9dm9ryo-6wmjx9cpu3-a5bqcojklc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setAccessibilityFocusStub.calledOnce.should.be.true;\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setAccessibilityFocusStub.calledWithMatch(secondComponent).should.be.true;\r\n        }","duration":0},{"title":"the second tracked managed focus should be disposed","status":"pass","exception":{},"rawTitle":"the second tracked managed focus should be disposed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"7nz9dm9ryo-6wmjx9cpu3-gfdb9tb06j","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            secondOnDisposedSpy.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Focus is returned and the tracked component is disposed properly","description":"","tags":[],"sequence":5,"id":"7nz9dm9ryo-6wmjx9cpu3"}],"title":"ScreenReaderFocusManager","description":"Purpose: Manage components that change UI flow and returns focus to components as we navigate back\n\nRules:\n* Track components based on the screen they are created on\n* Return focus to the latest component activated for a given screen\n* Remove a tracked item (this happens when focus is returned or dispose is directly called on the tracked component (ex. on componentWillUnmount))\n* When the screen changes, return the focus to the most recent tracked component for the current screen","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Accessibility/ScreenReaderFocusManager.spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Setup","status":"pass","exception":{},"rawTitle":"Setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nz9dm9ryo-2rsurgy474-w2aidv01gt","code":"() => {\r\n            setAccessibilityFocusStub = sinon.stub(Services_1.AccessibilityServiceInstance, Services_1.AccessibilityServiceInstance.setAccessibilityFocus.name, function stubbedSetAccessibilityFocus(node, done) {\r\n                if (done) {\r\n                    done();\r\n                }\r\n            });\r\n            cancelSetAccessibilityFocusForNodeStub = sinon.stub(Services_1.AccessibilityServiceInstance, Services_1.AccessibilityServiceInstance.cancelSetAccessibilityFocusForNode.name);\r\n        }","duration":6}],"title":"Background setup","description":"","tags":[],"id":"7nz9dm9ryo-2rsurgy474"},"id":"7nz9dm9ryo","path":"Services/Accessibility"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app info is added to the cache","status":"pass","exception":{},"rawTitle":"an app info is added to the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8ajdb7000r-q603a86sfh-14wnncpyo6j","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            mapSetSpy = sinon.spy(Map.prototype, Map.prototype.set.name);\r\n            appInfoCache.set(appId, appInfo);\r\n        }","duration":6},{"title":"the information is set in the cache once","status":"pass","exception":{},"rawTitle":"the information is set in the cache once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8ajdb7000r-q603a86sfh-876lsfz63x","code":"() => {\r\n            // changed this from \"calledOnce\" to \"called\" as\r\n            // due to the babel-register addition, Map.set is\r\n            // being called by source map logic after the spy is set\r\n            // and affecting the call count\r\n            mapSetSpy.called.should.be.eql(true);\r\n        }","duration":1},{"title":"the app info is cached with the corresponding app id","status":"pass","exception":{},"rawTitle":"the app info is cached with the corresponding app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8ajdb7000r-q603a86sfh-6ejjx4v1p1","code":"() => {\r\n            mapSetSpy.calledWith(appId, appInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the app info can be retrieved","status":"pass","exception":{},"rawTitle":"the app info can be retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8ajdb7000r-q603a86sfh-ys8c4aqob7","code":"() => {\r\n            appInfoCache.get(appId).should.be.eql(appInfo);\r\n        }","duration":1}],"title":"Caching an app info","description":"","tags":[],"sequence":1,"id":"8ajdb7000r-q603a86sfh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the cache is set up with the app info","status":"pass","exception":{},"rawTitle":"the cache is set up with the app info","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"8ajdb7000r-kxyjb6g0fx-17wk04wdw03","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            appInfoCache.set(appId, appInfo);\r\n        }","duration":1},{"title":"an app info is added to the cache","status":"pass","exception":{},"rawTitle":"an app info is added to the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"8ajdb7000r-kxyjb6g0fx-14wnncpyo6j","code":"() => {\r\n            mapSetSpy = sinon.spy(Map.prototype, Map.prototype.set.name);\r\n            // modify the app info by generating a new one\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache.set(appId, appInfo);\r\n        }","duration":1},{"title":"the information is set in the cache once","status":"pass","exception":{},"rawTitle":"the information is set in the cache once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"8ajdb7000r-kxyjb6g0fx-876lsfz63x","code":"() => {\r\n            mapSetSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app info is cached with the corresponding app id","status":"pass","exception":{},"rawTitle":"the app info is cached with the corresponding app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8ajdb7000r-kxyjb6g0fx-6ejjx4v1p1","code":"() => {\r\n            mapSetSpy.calledWith(appId, appInfo).should.be.eql(true);\r\n        }","duration":0},{"title":"the app info can be retrieved","status":"pass","exception":{},"rawTitle":"the app info can be retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"8ajdb7000r-kxyjb6g0fx-ys8c4aqob7","code":"() => {\r\n            appInfoCache.get(appId).should.be.eql(appInfo);\r\n        }","duration":0}],"title":"Caching an app info that already exists","description":"","tags":[],"sequence":2,"id":"8ajdb7000r-kxyjb6g0fx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting an app info that was previously added to the cache","status":"pass","exception":{},"rawTitle":"getting an app info that was previously added to the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8ajdb7000r-cvrryqkww-o5vn0ksq8z","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            appInfoCache.set(appId, appInfo);\r\n            mapGetSpy = sinon.spy(Map.prototype, Map.prototype.get.name);\r\n            obtainedAppInfo = appInfoCache.get(appId);\r\n        }","duration":1},{"title":"the information is retrieved from the cache once","status":"pass","exception":{},"rawTitle":"the information is retrieved from the cache once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8ajdb7000r-cvrryqkww-lqw4a2ir8g","code":"() => {\r\n            mapGetSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app info is retrieved with the corresponding app id","status":"pass","exception":{},"rawTitle":"the app info is retrieved with the corresponding app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8ajdb7000r-cvrryqkww-ys8ar9jpzn","code":"() => {\r\n            mapGetSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the correct app info is retrieved","status":"pass","exception":{},"rawTitle":"the correct app info is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8ajdb7000r-cvrryqkww-jknbicb1i0","code":"() => {\r\n            obtainedAppInfo.should.be.eql(appInfo);\r\n        }","duration":0}],"title":"Getting an app info","description":"","tags":[],"sequence":3,"id":"8ajdb7000r-cvrryqkww"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting an app info that doesn't exist","status":"pass","exception":{},"rawTitle":"getting an app info that doesn't exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8ajdb7000r-cncy6x2gtc-qafd6v9fnx","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            mapGetSpy = sinon.spy(Map.prototype, Map.prototype.get.name);\r\n            obtainedAppInfo = appInfoCache.get(appId);\r\n        }","duration":1},{"title":"the information is retrieved from the cache once","status":"pass","exception":{},"rawTitle":"the information is retrieved from the cache once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8ajdb7000r-cncy6x2gtc-lqw4a2ir8g","code":"() => {\r\n            mapGetSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the app info is retrieved with the corresponding app id","status":"pass","exception":{},"rawTitle":"the app info is retrieved with the corresponding app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8ajdb7000r-cncy6x2gtc-ys8ar9jpzn","code":"() => {\r\n            mapGetSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"no app info should be retrieved","status":"pass","exception":{},"rawTitle":"no app info should be retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8ajdb7000r-cncy6x2gtc-jkqpjix334","code":"() => {\r\n            should.not.exist(obtainedAppInfo);\r\n        }","duration":0}],"title":"Getting an app info when it doesn't exist","description":"","tags":[],"sequence":4,"id":"8ajdb7000r-cncy6x2gtc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting an app info from the cache","status":"pass","exception":{},"rawTitle":"deleting an app info from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8ajdb7000r-cysfaxq0w-lr470aphcw","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            appInfoCache.set(appId, appInfo);\r\n            mapDeleteSpy = sinon.spy(Map.prototype, Map.prototype.delete.name);\r\n            appInfoCache.delete(appId);\r\n        }","duration":1},{"title":"the information is deleted from the cache once","status":"pass","exception":{},"rawTitle":"the information is deleted from the cache once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8ajdb7000r-cysfaxq0w-lqxih879c0","code":"() => {\r\n            mapDeleteSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the correct app id is passed in to delete from the cache","status":"pass","exception":{},"rawTitle":"the correct app id is passed in to delete from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8ajdb7000r-cysfaxq0w-lr30u5lckg","code":"() => {\r\n            mapDeleteSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":1},{"title":"the app info can no longer be retrieved","status":"pass","exception":{},"rawTitle":"the app info can no longer be retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8ajdb7000r-cysfaxq0w-kldzr8ulcd","code":"() => {\r\n            should.not.exist(appInfoCache.get(appId));\r\n        }","duration":0}],"title":"Deleting an app info","description":"","tags":[],"sequence":5,"id":"8ajdb7000r-cysfaxq0w"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting an app info that doesn't exist","status":"pass","exception":{},"rawTitle":"deleting an app info that doesn't exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8ajdb7000r-z5p7zb832b-cn45u0rd4w","code":"() => {\r\n            appId = \"app Id\";\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoCache = new Adapters_1.AppInfoCache();\r\n            mapDeleteSpy = sinon.spy(Map.prototype, Map.prototype.delete.name);\r\n            appInfoCache.delete(appId);\r\n        }","duration":2},{"title":"the delete is attempted for the app","status":"pass","exception":{},"rawTitle":"the delete is attempted for the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"8ajdb7000r-z5p7zb832b-of0lbsrvlp","code":"() => {\r\n            mapDeleteSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the app info can no longer be retrieved","status":"pass","exception":{},"rawTitle":"the app info can no longer be retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8ajdb7000r-z5p7zb832b-kldzr8ulcd","code":"() => {\r\n            should.not.exist(appInfoCache.get(appId));\r\n        }","duration":0}],"title":"Deleting an app info when it doesn't exist","description":"","tags":[],"sequence":6,"id":"8ajdb7000r-z5p7zb832b"}],"title":"Caching of the App info","description":"Rules:\n* add an app info by app id to the cache\n* get an app info by app id from the cache\n* delete app info by app id from the cache","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/AppInfoCache.Spec.js","id":"8ajdb7000r","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":2,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"generating a new settings provider","status":"pass","exception":{},"rawTitle":"generating a new settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-14fh2s8f7y3-10vrnf96gmt","code":"() => {\r\n            generatedSettingsProvider = cacheSettingsProviderManager.generate();\r\n        }","duration":5},{"title":"a settings provider of the correct type is returned","status":"pass","exception":{},"rawTitle":"a settings provider of the correct type is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-14fh2s8f7y3-jks1h469vk","code":"() => {\r\n            (generatedSettingsProvider instanceof Adapters_1.AsyncStorageSettingsProvider).should.be.eql(true);\r\n        }","duration":0},{"title":"the SettingsProvider should have the UserCache prefix","status":"pass","exception":{},"rawTitle":"the SettingsProvider should have the UserCache prefix","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a5af0yd9c0-14fh2s8f7y3-mv2xhz220w","code":"() => {\r\n            generatedSettingsProvider.getFileName().should.contain(\"UserCache.\");\r\n        }","duration":1}],"title":"Generating a new settings provider","description":"","tags":[],"sequence":1,"id":"a5af0yd9c0-14fh2s8f7y3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling load on the given settings provider","status":"pass","exception":{},"rawTitle":"calling load on the given settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-9602luh6lx-7ny0degxrk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            settingsProviderLoadStub = sinon.stub(Adapters_1.AsyncStorageSettingsProvider.prototype, Adapters_1.AsyncStorageSettingsProvider.prototype.load.name).returns(WinJS.Promise.wrap(true));\r\n            yield cacheSettingsProviderManager.loadAsync(new Adapters_1.AsyncStorageSettingsProvider(\"test\"));\r\n        })","duration":2},{"title":"the settings provider load function should be called","status":"pass","exception":{},"rawTitle":"the settings provider load function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-9602luh6lx-6508ozreqr","code":"() => {\r\n            settingsProviderLoadStub.calledOnce.should.be.eql(true);\r\n        }","duration":1}],"title":"Loading a settings provider","description":"","tags":[],"sequence":2,"id":"a5af0yd9c0-9602luh6lx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling load on the given settings provider","status":"pass","exception":{},"rawTitle":"calling load on the given settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-h55ebpzjnp-7ny0degxrk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            settingsProviderLoadStub = sinon.stub(Adapters_1.AsyncStorageSettingsProvider.prototype, Adapters_1.AsyncStorageSettingsProvider.prototype.load.name).returns(WinJS.Promise.wrap(false));\r\n            try {\r\n                yield cacheSettingsProviderManager.loadAsync(new Adapters_1.AsyncStorageSettingsProvider(\"test\"));\r\n            }\r\n            catch (error) {\r\n                errorReceived = error;\r\n            }\r\n        })","duration":1},{"title":"the settings provider load function should be called","status":"pass","exception":{},"rawTitle":"the settings provider load function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-h55ebpzjnp-6508ozreqr","code":"() => {\r\n            settingsProviderLoadStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"an exception with the description 'Loading settings provider failed' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with the description 'Loading settings provider failed' should be thrown","description":"","docString":"","values":["Loading settings provider failed"],"ruleViolations":[],"type":"and","sequence":3,"id":"a5af0yd9c0-h55ebpzjnp-16b5vx52ghs","code":"() => {\r\n            errorReceived.should.be.eql(new Error(stepContext.values[0]));\r\n        }","duration":1}],"title":"Loading a settings provider that fails loading","description":"","tags":[],"sequence":3,"id":"a5af0yd9c0-h55ebpzjnp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling load on the given settings provider","status":"pass","exception":{},"rawTitle":"calling load on the given settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-12nmfoi8rql-7ny0degxrk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            settingsProviderDeleteSettingsStub = sinon.stub(Adapters_1.AsyncStorageSettingsProvider.prototype, Adapters_1.AsyncStorageSettingsProvider.prototype.deleteSettings.name).returns(WinJS.Promise.wrap(true));\r\n            yield cacheSettingsProviderManager.unloadAsync(new Adapters_1.AsyncStorageSettingsProvider(\"test\"));\r\n        })","duration":1},{"title":"the settings provider delete function should be called","status":"pass","exception":{},"rawTitle":"the settings provider delete function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-12nmfoi8rql-x0dp4jrsfx","code":"() => {\r\n            settingsProviderDeleteSettingsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"Unloading a settings provider","description":"","tags":[],"sequence":4,"id":"a5af0yd9c0-12nmfoi8rql"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":2,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling purge cache folder on the given settings provider","status":"pass","exception":{},"rawTitle":"calling purge cache folder on the given settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-7o1t01jcww-7o1rqs3uio","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let settingsProvider = cacheSettingsProviderManager.generate(\"test\");\r\n            settingsProviderDeleteSettingsStub = sinon.stub(Adapters_1.AsyncStorageSettingsProvider.prototype, Adapters_1.AsyncStorageSettingsProvider.prototype.deleteSettings.name).returns(WinJS.Promise.wrap(true));\r\n            asyncStorageGetAllKeysStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getAllKeys.name).returns(Promise.resolve(([\"UserCache.key\"])));\r\n            asyncStorageRemoveItemStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.removeItem.name).returns(Promise.resolve());\r\n            yield cacheSettingsProviderManager.purgeCacheDataAsync(settingsProvider);\r\n        })","duration":3},{"title":"the settings provider delete function should be called","status":"pass","exception":{},"rawTitle":"the settings provider delete function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-7o1t01jcww-x0dp4jrsfx","code":"() => {\r\n            settingsProviderDeleteSettingsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"async storage get all keys should be called","status":"pass","exception":{},"rawTitle":"async storage get all keys should be called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Purging the user cache folder"}],"type":"Then","sequence":3,"id":"a5af0yd9c0-7o1t01jcww-10nbpsvchw5","code":"() => {\r\n            asyncStorageGetAllKeysStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"remove item for each key should be called","status":"pass","exception":{},"rawTitle":"remove item for each key should be called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Purging the user cache folder"}],"type":"Then","sequence":4,"id":"a5af0yd9c0-7o1t01jcww-2uty6jr7qd","code":"() => {\r\n            asyncStorageRemoveItemStub.called.should.be.eql(true);\r\n        }","duration":0}],"title":"Purging the user cache folder","description":"","tags":[],"sequence":5,"id":"a5af0yd9c0-7o1t01jcww"}],"title":"Provide react native caching implementation support for existing runtime components","description":"This is the implementation of the CacheSettingsProviderManager which is used by the runtime to handle caching.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/AsyncStorageCacheSettingsProviderManager.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a new instance of the CacheSettingsProviderManager","status":"pass","exception":{},"rawTitle":"a new instance of the CacheSettingsProviderManager","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a5af0yd9c0-9pbsb4-bhqosh2dsr","code":"() => {\r\n            cacheSettingsProviderManager = new Adapters_1.AsyncStorageCacheSettingsProviderManager();\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"a5af0yd9c0-9pbsb4"},"id":"a5af0yd9c0","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":13,"failedCount":0,"pendingCount":0,"totalCount":13,"totalRuleViolations":1,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling load on a settings provider","status":"pass","exception":{},"rawTitle":"calling load on a settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-9602luh6lx-7o0glh89i8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve());\r\n            settingsProvider = new Adapters_1.AsyncStorageSettingsProvider(\"test\");\r\n            yield settingsProvider.load();\r\n        })","duration":3},{"title":"AsyncStorage getItem should be called","status":"pass","exception":{},"rawTitle":"AsyncStorage getItem should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-9602luh6lx-ae9dzxn82t","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.be.eql(true);\r\n        }","duration":0}],"title":"Loading a settings provider","description":"","tags":[],"sequence":1,"id":"a5af0yd9c0-9602luh6lx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling save on a settings provider","status":"pass","exception":{},"rawTitle":"calling save on a settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-z3wt2bxz31-7o03x3byxs","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            settingsProvider = new Adapters_1.AsyncStorageSettingsProvider(\"test\");\r\n            yield settingsProvider.save();\r\n        })","duration":1},{"title":"AsyncStorage setItem should be called","status":"pass","exception":{},"rawTitle":"AsyncStorage setItem should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-z3wt2bxz31-dhyt4s053p","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.be.eql(true);\r\n        }","duration":0}],"title":"Saving a settings provider","description":"","tags":[],"sequence":2,"id":"a5af0yd9c0-z3wt2bxz31"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling set and get on a settings provider","status":"pass","exception":{},"rawTitle":"calling set and get on a settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-kx2dzmihx9-7nwch4d87k","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            settingsProvider = new Adapters_1.AsyncStorageSettingsProvider(\"test\");\r\n            settingsProvider.setValue(key, value);\r\n            response = settingsProvider.getValue(key);\r\n        })","duration":1},{"title":"asyncStorage setItem should be called","status":"pass","exception":{},"rawTitle":"asyncStorage setItem should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-kx2dzmihx9-jknsvij9xc","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.be.eql(true);\r\n        }","duration":0},{"title":"asyncStorage setItem should be called with a JSON string","status":"pass","exception":{},"rawTitle":"asyncStorage setItem should be called with a JSON string","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a5af0yd9c0-kx2dzmihx9-vaw5q5lhsz","code":"() => {\r\n            asyncStorageStub.calledWith(JSON.stringify(value));\r\n        }","duration":1},{"title":"the retrieved value should match the set value","status":"pass","exception":{},"rawTitle":"the retrieved value should match the set value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"a5af0yd9c0-kx2dzmihx9-876erqfoez","code":"() => {\r\n            response.should.be.eql(value);\r\n        }","duration":0}],"title":"Getting and setting a value on a settings provider","description":"","tags":[],"sequence":3,"id":"a5af0yd9c0-kx2dzmihx9"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling remove value on a settings provider","status":"pass","exception":{},"rawTitle":"calling remove value on a settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-7nt3qeunkw-bhqox2jwyj","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            settingsProvider = new Adapters_1.AsyncStorageSettingsProvider(\"test\");\r\n            settingsProvider.setValue(key, value);\r\n            settingsProvider.removeValue(key);\r\n            response = settingsProvider.getValue(key);\r\n        })","duration":1},{"title":"AsyncStorage setItem should be called","status":"pass","exception":{},"rawTitle":"AsyncStorage setItem should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-7nt3qeunkw-dhyt4s053p","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.be.eql(true);\r\n        }","duration":0},{"title":"the retrieved value should be null","status":"pass","exception":{},"rawTitle":"the retrieved value should be null","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Removing a value on a settings provider"}],"type":"Then","sequence":3,"id":"a5af0yd9c0-7nt3qeunkw-11l90mpnsi8","code":"() => {\r\n            chai.expect(response).to.be.eql(null);\r\n        }","duration":1}],"title":"Removing a value on a settings provider","description":"","tags":[],"sequence":4,"id":"a5af0yd9c0-7nt3qeunkw"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling deleteSettings on a settings provider","status":"pass","exception":{},"rawTitle":"calling deleteSettings on a settings provider","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a5af0yd9c0-ogru6nsdsr-7o1t496veo","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.removeItem.name).returns(Promise.resolve());\r\n            settingsProvider = new Adapters_1.AsyncStorageSettingsProvider(fileName);\r\n            settingsProvider.deleteSettings();\r\n        })","duration":1},{"title":"AsyncStorage setItem should be called","status":"pass","exception":{},"rawTitle":"AsyncStorage setItem should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a5af0yd9c0-ogru6nsdsr-dhyt4s053p","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.be.eql(true);\r\n        }","duration":1}],"title":"Deleting a settings provider","description":"","tags":[],"sequence":5,"id":"a5af0yd9c0-ogru6nsdsr"}],"title":"Provide react native caching implementation support for existing runtime components","description":"This is the implementation of the SettingsProvider which is used by the runtime to handle caching.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/AsyncStorageSettingsProvider.Spec.js","id":"a5af0yd9c0","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a new instance of the AuthenticationBroker is created","status":"pass","exception":{},"rawTitle":"a new instance of the AuthenticationBroker is created","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-vk78uo6zsl-yip5def0jh","code":"() => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n        }","duration":4},{"title":"a event listener is added to Linking","status":"pass","exception":{},"rawTitle":"a event listener is added to Linking","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-vk78uo6zsl-q63ozybiow","code":"() => {\r\n            linkingAddEventListenerStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the listener is registered for event type 'url'","status":"pass","exception":{},"rawTitle":"the listener is registered for event type 'url'","description":"","docString":"","values":["url"],"ruleViolations":[],"type":"and","sequence":3,"id":"s1dkwjiyxf-vk78uo6zsl-ggqg3zdmps","code":"() => {\r\n            linkingAddEventListenerStub.firstCall.args[0].should.be.eql(stepContext.values[0]);\r\n        }","duration":1}],"title":"Creating a new instance of the AuthenticationBroker","description":"","tags":[],"sequence":1,"id":"s1dkwjiyxf-vk78uo6zsl"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"authenticating via the broker","status":"pass","exception":{},"rawTitle":"authenticating via the broker","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-tn5ir6fan1-7ntat088ps","code":"() => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingOpenUrlStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.openURL.name);\r\n            authUri = \"authUri\";\r\n            callbackUri = \"http://callbackUri.com/\";\r\n            browserType = AppMagic.Services.BrowserType.WebView;\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n        }","duration":3},{"title":"a link is launched once","status":"pass","exception":{},"rawTitle":"a link is launched once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-tn5ir6fan1-lr0lmm7qlc","code":"() => {\r\n            linkingOpenUrlStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the auth uri is the link that is launched","status":"pass","exception":{},"rawTitle":"the auth uri is the link that is launched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"s1dkwjiyxf-tn5ir6fan1-jkkn74onts","code":"() => {\r\n            linkingOpenUrlStub.calledWith(authUri).should.be.eql(true);\r\n        }","duration":0}],"title":"Authenticating for an authentication url","description":"","tags":[],"sequence":2,"id":"s1dkwjiyxf-tn5ir6fan1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"navigated back","status":"pass","exception":{},"rawTitle":"navigated back","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-yxvn4h6g8b-z99glghnhc","code":"(done) => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingOpenUrlStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.openURL.name);\r\n            authUri = \"authUri\";\r\n            callbackUri = \"http://callbackUri.com/\";\r\n            browserType = AppMagic.Services.BrowserType.WebView;\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            let promise = authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n            resultUri = callbackUri + \"?code=123\";\r\n            authBroker._deeplinkingHandler({ url: resultUri });\r\n            promise.then((authenticationResult) => {\r\n                result = authenticationResult;\r\n            });\r\n        }","duration":3},{"title":"the authentication result is returned","status":"pass","exception":{},"rawTitle":"the authentication result is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-yxvn4h6g8b-jkp9kpyjkw","code":"() => {\r\n            result.should.be.eql({ responseData: resultUri, authenticationStatus: AppMagic.Services.AuthenticationStatus.success, navigatedUris: [] });\r\n        }","duration":1}],"title":"The user navigates to the url and completes it and is navigated back","description":"","tags":[],"sequence":3,"id":"s1dkwjiyxf-yxvn4h6g8b"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a second authentication request while another is pending","status":"pass","exception":{},"rawTitle":"receiving a second authentication request while another is pending","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-mfm9fypkwt-q64rpmkocg","code":"(done) => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingOpenUrlStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.openURL.name);\r\n            authUri = \"authUri\";\r\n            callbackUri = \"http://callbackUri.com/\";\r\n            browserType = AppMagic.Services.BrowserType.WebView;\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            firstPromise = authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n            authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n        }","duration":2},{"title":"the first promise should be canceled","status":"pass","exception":{},"rawTitle":"the first promise should be canceled","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-mfm9fypkwt-x0dis5ehl7","code":"(done) => {\r\n            firstPromise.catch((error) => {\r\n                Core.Utility.isCanceledError(error).should.be.eql(true);\r\n                done();\r\n            });\r\n        }","duration":1}],"title":"The authentication is called while another one is pending","description":"","tags":[],"sequence":4,"id":"s1dkwjiyxf-mfm9fypkwt"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a callback for a different url","status":"pass","exception":{},"rawTitle":"receiving a callback for a different url","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-u362ehpdn-11l6i5s1gpc","code":"(done) => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingOpenUrlStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.openURL.name);\r\n            authUri = \"authUri\";\r\n            callbackUri = \"http://callbackUri.com/\";\r\n            browserType = AppMagic.Services.BrowserType.WebView;\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            promise = authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n            authBroker._deeplinkingHandler({ url: \"http://somethingRandom.com/\" });\r\n        }","duration":2},{"title":"the callback is ignored","status":"pass","exception":{},"rawTitle":"the callback is ignored","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-u362ehpdn-10ajxkvtxm3","code":"() => {\r\n            Core.Promise.isPromiseComplete(promise).should.be.eql(false);\r\n        }","duration":0}],"title":"The app receives an navigation for a different callback url","description":"","tags":[],"sequence":5,"id":"s1dkwjiyxf-u362ehpdn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AuthenticationBroker is disposed","status":"pass","exception":{},"rawTitle":"the AuthenticationBroker is disposed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dkwjiyxf-rt7pelw1v7-tgo22uf9ut","code":"() => {\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingRemoveEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.removeEventListener.name);\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            authBroker.dispose();\r\n        }","duration":1},{"title":"a event listener is removed to Linking","status":"pass","exception":{},"rawTitle":"a event listener is removed to Linking","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dkwjiyxf-rt7pelw1v7-15clparhel","code":"() => {\r\n            linkingRemoveEventListenerStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the listener removed is registered for event type 'url'","status":"pass","exception":{},"rawTitle":"the listener removed is registered for event type 'url'","description":"","docString":"","values":["url"],"ruleViolations":[],"type":"and","sequence":3,"id":"s1dkwjiyxf-rt7pelw1v7-1xs9ok8c1h","code":"() => {\r\n            linkingRemoveEventListenerStub.firstCall.args[0].should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Disposing the instance of the AuthenticationBroker","description":"","tags":[],"sequence":6,"id":"s1dkwjiyxf-rt7pelw1v7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is currently in background","status":"pass","exception":{},"rawTitle":"the app is currently in background","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dkwjiyxf-4r38ci2ab7-v8iu5qcpyl","code":"() => {\r\n            // Setup the environment\r\n            linkingAddEventListenerStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.addEventListener.name);\r\n            linkingOpenUrlStub = sinon.stub(react_native_1.Linking, react_native_1.Linking.openURL.name);\r\n            authUri = \"authUri\";\r\n            callbackUri = \"http://callbackUri.com/\";\r\n            browserType = AppMagic.Services.BrowserType.WebView;\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            deviceInfoProvider.setCurrentAppState(\"background\");\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n        }","duration":1},{"title":"receiving a callback for app state change from background to active","status":"pass","exception":{},"rawTitle":"receiving a callback for app state change from background to active","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dkwjiyxf-4r38ci2ab7-6fbsy7m1it","code":"() => {\r\n            let authBroker = new Adapters_1.AuthenticationBroker();\r\n            promise = authBroker.authenticateAsync(authUri, callbackUri, browserType);\r\n            authBroker._handleAppStateChange(\"active\");\r\n            promise.then((authenticationResult) => {\r\n                result = authenticationResult;\r\n            });\r\n        }","duration":0},{"title":"the cancel result is returned","status":"pass","exception":{},"rawTitle":"the cancel result is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dkwjiyxf-4r38ci2ab7-tgnwxbjcn7","code":"() => {\r\n            setTimeout(function () {\r\n                result.should.be.eql({ responseData: null, authenticationStatus: AppMagic.Services.AuthenticationStatus.cancel, navigatedUris: [] });\r\n            }, 1000);\r\n        }","duration":2}],"title":"The user navigates back to PowerApps without signing into the connector","description":"","tags":[],"sequence":7,"id":"s1dkwjiyxf-4r38ci2ab7"}],"title":"React Native implementation for brokering authentication requests","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/AuthenticationBroker.Spec.js","id":"s1dkwjiyxf","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":92,"failedCount":0,"pendingCount":0,"totalCount":92,"totalRuleViolations":0,"duration":129,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fetching the most up to date connection information and providing a recommendation if necessary","status":"pass","exception":{},"rawTitle":"fetching the most up to date connection information and providing a recommendation if necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-df9j00pzo5-pgzyc1t5xc","code":"(done) => {\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            connectionDisplayDataMap = new Map();\r\n            for (let i = 0; i < numberOfConnections; i++) {\r\n                connectionDisplayDataMap.set(i.toString(), new Mocks_1.TestConnectionDisplayData());\r\n            }\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"connectionName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null\r\n            }, null);\r\n            getConnectionsResult = [];\r\n            getConnectionsResult.push(connection);\r\n            let userConnection = new AppMagic.ConnectionHub.UserConnectionForApp(\"reference\", connection);\r\n            getUserConnectionsResult = HashTableUtility.create();\r\n            getUserConnectionsResult[userConnection.reference] = userConnection;\r\n            const apis = [Utilities_1.ConnectionUtilities.createApi([\"action\"])];\r\n            appResources = new AppMagic.Runtime.Client.AppResources(appInfo, apis, getConnectionsResult, getUserConnectionsResult);\r\n            let getUserConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n            getUserConnectionsWinJSPromise.complete(getUserConnectionsResult);\r\n            updateConnectionInfoStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_updateAndRecommendConnectionInfoAsync\").returns(Promise.resolve());\r\n            connectionClient.updateAndRecommendAllConnectionsForAppAsync(connectionDisplayDataMap, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, appResources, false).then(done);\r\n        }","duration":17},{"title":"the connection display data is populated for each connection","status":"pass","exception":{},"rawTitle":"the connection display data is populated for each connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-df9j00pzo5-12k4pguysxp","code":"() => {\r\n            updateConnectionInfoStub.callCount.should.be.eql(numberOfConnections);\r\n        }","duration":0},{"title":"the retrieved connection information is passed in to help populate the connection display data","status":"pass","exception":{},"rawTitle":"the retrieved connection information is passed in to help populate the connection display data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-df9j00pzo5-15tcm3pfyab","code":"() => {\r\n            connectionDisplayDataMap.forEach((connectionDisplayData, connectionReferenceId) => {\r\n                updateConnectionInfoStub.calledWith(connectionReferenceId, appInfo.connectionReferences[connectionReferenceId], appResources, connectionDisplayDataMap, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId).should.be.eql(true);\r\n            });\r\n        }","duration":0}],"title":"Fetching the most up to date connection information for the specified app and connections","description":"Rules:\n* Gets all users connections\n* Gets the current connections set for the specified app\n* Populates the connection display data for each connection specified","tags":[],"sequence":1,"id":"10u02ufb2m3-df9j00pzo5"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated and a recommendation is provided if necessary","status":"pass","exception":{},"rawTitle":"the connection information is updated and a recommendation is provided if necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-16b822w1xds-jbm8s59kwj","code":"(done) => {\r\n            // Input parameters\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            let datasetReference = {\r\n                dataSources: null,\r\n                datasetOverride: {\r\n                    description: null,\r\n                    name: null,\r\n                }\r\n            };\r\n            connectionReference = {\r\n                id: \"apiid\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                datasets: { [\"somehash\"]: datasetReference }\r\n            };\r\n            api = Utilities_1.ConnectionUtilities.createApi([\"action\"], \"apiName\", \"apiid\");\r\n            connection = Utilities_1.ConnectionUtilities.createConnection(api, \"connectionId\");\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            allConnections = [connection];\r\n            appResources = new AppMagic.Runtime.Client.AppResources(appInfo, [api], allConnections, /* usages */ null);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns([connection]);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\").returns(Promise.resolve());\r\n            // Set up getSelectedConnectionStub\r\n            getSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\").returns(connection);\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(null);\r\n            // Set up convertConnectionDisplayDataSpy\r\n            convertConnectionDisplayDataSpy = sinon.spy(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData.name);\r\n            // Set up getClientSelectedConnectionIdSpy\r\n            getClientSelectedConnectionIdSpy = sinon.spy(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name);\r\n            // Set up getClientSelectedConnectionIdSpy\r\n            tryGetInterfaceRevisionStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"tryGetInterfaceRevision\").returns(null);\r\n            // Set up getClientSelectedConnectionIdSpy\r\n            tryGetLatestInterfaceRevisionNumberStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"tryGetLatestInterfaceRevisionNumber\").returns(null);\r\n            getDatasetsAsyncStub = sinon.stub(AppMagic.ConnectionHub.DatasetService.prototype, \"getDatasetsAsync\").returns(null);\r\n            // Set up mapSetStub\r\n            mapSetStub = sinon.stub(Map.prototype, Map.prototype.set.name);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, false).then(done);\r\n        }","duration":10},{"title":"the connections are filtered once","status":"pass","exception":{},"rawTitle":"the connections are filtered once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-16b822w1xds-diqu1ryp43","code":"() => {\r\n            filterAndSortStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connections are filtered and sorted for the app","status":"pass","exception":{},"rawTitle":"the connections are filtered and sorted for the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-16b822w1xds-2rvm34dm2o","code":"() => {\r\n            filterAndSortStub.calledWith(connectionReference, allConnections).should.be.eql(true);\r\n        }","duration":0},{"title":"an sso connection is attempted to be created once","status":"pass","exception":{},"rawTitle":"an sso connection is attempted to be created once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10u02ufb2m3-16b822w1xds-lr2494ptpc","code":"() => {\r\n            ensureSsoCreatedStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the filtered connections and api are passed to create the sso connection","status":"pass","exception":{},"rawTitle":"the filtered connections and api are passed to create the sso connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"10u02ufb2m3-16b822w1xds-16b0rzkij40","code":"() => {\r\n            ensureSsoCreatedStub.calledWith(connectionReference, filterAndSortStub.returnValues[0], api).should.be.eql(true);\r\n        }","duration":0},{"title":"the sso connection is created before selecting the connections","status":"pass","exception":{},"rawTitle":"the sso connection is created before selecting the connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"10u02ufb2m3-16b822w1xds-17s06rjpaad","code":"() => {\r\n            ensureSsoCreatedStub.calledBefore(getSelectedConnectionStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection is on the client is retrieved","status":"pass","exception":{},"rawTitle":"the selected connection is on the client is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"10u02ufb2m3-16b822w1xds-jkmf2z3osg","code":"() => {\r\n            getClientSelectedConnectionIdSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection on the server is retrieved","status":"pass","exception":{},"rawTitle":"the selected connection on the server is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"10u02ufb2m3-16b822w1xds-jko1b55pa8","code":"() => {\r\n            getServerSelectedConnectionStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connections are retrieved","status":"pass","exception":{},"rawTitle":"the selected connections are retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"10u02ufb2m3-16b822w1xds-15vnjx9a4xv","code":"() => {\r\n            getSelectedConnectionStub.calledWith(getClientSelectedConnectionIdSpy.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], false).should.be.eql(true);\r\n        }","duration":1},{"title":"the revision info is computed","status":"pass","exception":{},"rawTitle":"the revision info is computed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"10u02ufb2m3-16b822w1xds-pwy9u67j0b","code":"() => {\r\n            tryGetInterfaceRevisionStub.calledOnce.should.be.eql(true);\r\n            tryGetLatestInterfaceRevisionNumberStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the datasets are retrieved","status":"pass","exception":{},"rawTitle":"the datasets are retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"10u02ufb2m3-16b822w1xds-jkq7s7hxww","code":"() => {\r\n            getDatasetsAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"all the data obtained is merged into the connection display data","status":"pass","exception":{},"rawTitle":"all the data obtained is merged into the connection display data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"10u02ufb2m3-16b822w1xds-d6g9jr9468","code":"() => {\r\n            convertConnectionDisplayDataSpy.calledWith(connectionReferenceId, connectionReference, getSelectedConnectionStub.returnValue, null, connection.id, api, filterAndSortStub.returnValue);\r\n        }","duration":0},{"title":"the data is converted after retrieving all the data","status":"pass","exception":{},"rawTitle":"the data is converted after retrieving all the data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"10u02ufb2m3-16b822w1xds-dkyxkm73sr","code":"() => {\r\n            convertConnectionDisplayDataSpy.calledAfter(filterAndSortStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(ensureSsoCreatedStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(getClientSelectedConnectionIdSpy).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(getServerSelectedConnectionStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(getSelectedConnectionStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(tryGetInterfaceRevisionStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(tryGetLatestInterfaceRevisionNumberStub).should.be.eql(true);\r\n            convertConnectionDisplayDataSpy.calledAfter(getDatasetsAsyncStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the map is updated with the new data","status":"pass","exception":{},"rawTitle":"the map is updated with the new data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"10u02ufb2m3-16b822w1xds-f7ioxif7vh","code":"() => {\r\n            mapSetStub.calledWith(connectionReferenceId, convertConnectionDisplayDataSpy.returnValue);\r\n        }","duration":0},{"title":"the map is updated after the data is converted","status":"pass","exception":{},"rawTitle":"the map is updated after the data is converted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"10u02ufb2m3-16b822w1xds-fptt0cacvp","code":"() => {\r\n            mapSetStub.calledAfter(convertConnectionDisplayDataSpy).should.be.eql(true);\r\n        }","duration":0}],"title":"Updating and getting the recommended connection information","description":"","tags":[],"sequence":2,"id":"10u02ufb2m3-16b822w1xds"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"filtering and sorting the connections","status":"pass","exception":{},"rawTitle":"filtering and sorting the connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-jkngifzytc-he8rmntquj","code":"() => {\r\n            isConnectionAvailableSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_isConnectionAvailableForReference\");\r\n            compareConnectionsSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_compareConnections\");\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: false\r\n            };\r\n            let allConnections = [];\r\n            for (let i = 0; i < numberOfConnections; i++) {\r\n                allConnections.push(new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                    api: null,\r\n                    apiId: connectionReference.id,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null));\r\n            }\r\n            connectionClient._filterAndSortAvailableConnections(connectionReference, allConnections);\r\n        }","duration":6},{"title":"each reference is connection is checked to see if it applies to the reference","status":"pass","exception":{},"rawTitle":"each reference is connection is checked to see if it applies to the reference","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-jkngifzytc-lqw0zqdygw","code":"() => {\r\n            isConnectionAvailableSpy.callCount.should.be.eql(numberOfConnections);\r\n        }","duration":0},{"title":"the connections are compared with each other to be sorted","status":"pass","exception":{},"rawTitle":"the connections are compared with each other to be sorted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-jkngifzytc-jknd1z4fm8","code":"() => {\r\n            compareConnectionsSpy.callCount.should.be.eql(numberOfConnections - 1);\r\n        }","duration":0}],"title":"Connections are filtered and sorted to determine if they can be used","description":"","tags":[],"sequence":3,"id":"10u02ufb2m3-jkngifzytc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a unauthenticated connection is selected","status":"pass","exception":{},"rawTitle":"a unauthenticated connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-6ejfsuufi3-x0dnmlf7ut","code":"() => {\r\n            connectionId = \"connectionId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                unauthenticatedConnection: new AppMagic.ConnectionHub.Connection(connectionId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: false,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.Unauthenticated\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null)\r\n            };\r\n            selectedConnections = HashTableUtility.create();\r\n            result = connectionClient._getUserSelectedConnectionFromServer(connectionReferenceId, connectionReference, selectedConnections);\r\n        }","duration":1},{"title":"the correct connection is selected","status":"pass","exception":{},"rawTitle":"the correct connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-6ejfsuufi3-11pmzv4i13p","code":"() => {\r\n            result.should.be.eql(connectionReference.unauthenticatedConnection);\r\n        }","duration":0}],"title":"Server has an unauthenticated connection selected","description":"","tags":[],"sequence":4,"id":"10u02ufb2m3-6ejfsuufi3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an authenticated connection is selected","status":"pass","exception":{},"rawTitle":"an authenticated connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-12by3qt83l1-12bxxqkyxwz","code":"() => {\r\n            connectionId = \"connectionId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n            };\r\n            selectedConnections = HashTableUtility.create();\r\n            for (let i = 0; i < 2; i++) {\r\n                selectedConnections[i.toString()] = createUserConnection(i.toString(), \"referenceName\");\r\n            }\r\n            // push matching connection onto the array\r\n            selectedConnections[connectionReferenceId] = createUserConnection(connectionId, \"connectionReferenceId\");\r\n            result = connectionClient._getUserSelectedConnectionFromServer(connectionReferenceId, connectionReference, selectedConnections);\r\n        }","duration":4},{"title":"the correct connection is selected","status":"pass","exception":{},"rawTitle":"the correct connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-12by3qt83l1-11pmzv4i13p","code":"() => {\r\n            result.should.be.eql(selectedConnections[\"connectionReferenceId\"]);\r\n        }","duration":0}],"title":"Server has an authenticated connection selected","description":"","tags":[],"sequence":5,"id":"10u02ufb2m3-12by3qt83l1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a authenticated connection is selected","status":"pass","exception":{},"rawTitle":"a authenticated connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-jksjit18zk-jkroy5fmps","code":"() => {\r\n            connectionId = \"connectionId\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n            };\r\n            selectedConnections = HashTableUtility.create();\r\n            for (let i = 0; i < 2; i++) {\r\n                selectedConnections[i.toString()] = createUserConnection(i.toString(), \"referenceName\");\r\n            }\r\n            result = connectionClient._getUserSelectedConnectionFromServer(connectionReferenceId, connectionReference, selectedConnections);\r\n        }","duration":3},{"title":"the correct connection is selected","status":"pass","exception":{},"rawTitle":"the correct connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-jksjit18zk-11pmzv4i13p","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0}],"title":"Server has no connection selected","description":"","tags":[],"sequence":6,"id":"10u02ufb2m3-jksjit18zk"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection is selected","status":"pass","exception":{},"rawTitle":"a connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-13hkmgmsw45-jkjlj6a2n4","code":"() => {\r\n            connectionId = \"connectionId\";\r\n            clientSelectedConnectionId = null;\r\n            selectedConnection = createUserConnection(connectionId, \"connectionReferenceId\");\r\n            availableConnections = [];\r\n            for (let i = 0; i < 2; i++) {\r\n                availableConnections.push(new AppMagic.ConnectionHub.Connection(i.toString(), \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null));\r\n            }\r\n            // push matching connection onto the array\r\n            availableConnections.push(new AppMagic.ConnectionHub.Connection(connectionId, \"displayName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null));\r\n            result = connectionClient._getSelectedConnection(clientSelectedConnectionId, selectedConnection, availableConnections);\r\n        }","duration":1},{"title":"the server selected connection is selected","status":"pass","exception":{},"rawTitle":"the server selected connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-13hkmgmsw45-17niirw9kfx","code":"() => {\r\n            result.should.be.eql(availableConnections[2]);\r\n        }","duration":0}],"title":"Selecting an connection where there is a connection selected server side","description":"","tags":[],"sequence":7,"id":"10u02ufb2m3-13hkmgmsw45"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection is selected","status":"pass","exception":{},"rawTitle":"a connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-falufksgzx-jkjlj6a2n4","code":"() => {\r\n            connectionId = \"connectionId\";\r\n            clientSelectedConnectionId = \"clientConnectionId\";\r\n            selectedConnection = createUserConnection(connectionId, \"connectionReferenceId\");\r\n            availableConnections = [];\r\n            for (let i = 0; i < 2; i++) {\r\n                availableConnections.push(new AppMagic.ConnectionHub.Connection(i.toString(), \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null));\r\n            }\r\n            // push matching connection for server side onto the array\r\n            availableConnections.push(new AppMagic.ConnectionHub.Connection(connectionId, \"displayName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null));\r\n            // push matching connection for client side onto the array\r\n            availableConnections.push(new AppMagic.ConnectionHub.Connection(clientSelectedConnectionId, \"displayName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null));\r\n            result = connectionClient._getSelectedConnection(clientSelectedConnectionId, selectedConnection, availableConnections);\r\n        }","duration":1},{"title":"the client selected connection is selected","status":"pass","exception":{},"rawTitle":"the client selected connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-falufksgzx-jkr61kxsg0","code":"() => {\r\n            result.should.be.eql(availableConnections[3]);\r\n        }","duration":0}],"title":"Selecting a connection where there is a connection selected server and client side","description":"","tags":[],"sequence":8,"id":"10u02ufb2m3-falufksgzx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection is selected","status":"pass","exception":{},"rawTitle":"a connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-i74nzeoza8-jkjlj6a2n4","code":"() => {\r\n            clientSelectedConnectionId = null;\r\n            selectedConnection = null;\r\n            availableConnections = [];\r\n            for (let i = 0; i < 2; i++) {\r\n                availableConnections.push(new AppMagic.ConnectionHub.Connection(i.toString(), \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null));\r\n            }\r\n            result = connectionClient._getSelectedConnection(clientSelectedConnectionId, selectedConnection, availableConnections);\r\n        }","duration":1},{"title":"the first available connection is selected","status":"pass","exception":{},"rawTitle":"the first available connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-i74nzeoza8-jkn66x9k5s","code":"() => {\r\n            result.should.be.eql(availableConnections[0]);\r\n        }","duration":0}],"title":"Selecting an connection where there are no user selected connections (client and server)","description":"","tags":[],"sequence":9,"id":"10u02ufb2m3-i74nzeoza8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection is selected","status":"pass","exception":{},"rawTitle":"a connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-kxycmvi6ez-jkjlj6a2n4","code":"() => {\r\n            clientSelectedConnectionId = null;\r\n            selectedConnection = null;\r\n            availableConnections = [];\r\n            result = connectionClient._getSelectedConnection(clientSelectedConnectionId, selectedConnection, availableConnections);\r\n        }","duration":0},{"title":"no connection is selected","status":"pass","exception":{},"rawTitle":"no connection is selected","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-kxycmvi6ez-jkkk9ipwcg","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0}],"title":"Selecting an connection where there are no user selected connections (client and server) and no available connections","description":"","tags":[],"sequence":10,"id":"10u02ufb2m3-kxycmvi6ez"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"performing a single sign on creation","status":"pass","exception":{},"rawTitle":"performing a single sign on creation","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-cn4h959068-6mq1e6uvzv","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: false\r\n            };\r\n            let connectionKey = \"connectionKey\";\r\n            let apiConnectionParameters = HashTableUtility.create();\r\n            apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                properties: {\r\n                    IsFirstParty: \"true\"\r\n                }\r\n            });\r\n            api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                scopes: null,\r\n                lastChangedTime: new Date(),\r\n                runtimeUrl: new Core.Url(\"\"),\r\n                capabilities: null,\r\n                connectionParameters: apiConnectionParameters,\r\n                metadata: null,\r\n                interfaces: null,\r\n                creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                swaggerJson: null\r\n            }, null);\r\n            returnedConnection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete(returnedConnection);\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api, \"dummyAppId\").then(done);\r\n        }","duration":2},{"title":"the created connection is added to the available connections","status":"pass","exception":{},"rawTitle":"the created connection is added to the available connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-cn4h959068-7lcjosx3p9","code":"() => {\r\n            availableConnections[0].should.be.eql(returnedConnection);\r\n        }","duration":0},{"title":"the api is used to create the connection","status":"pass","exception":{},"rawTitle":"the api is used to create the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-cn4h959068-16b0ipz190g","code":"() => {\r\n            addConnectionsStub.calledWith(api).should.be.eql(true);\r\n        }","duration":0}],"title":"Single sign on creation adds the newly created connection to the list","description":"","tags":[],"sequence":11,"id":"10u02ufb2m3-cn4h959068"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"performing a single sign on creation that fails","status":"pass","exception":{},"rawTitle":"performing a single sign on creation that fails","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-ph3603k0kg-6r3w6a46jn","code":"(done) => {\r\n            let api;\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: false\r\n            };\r\n            let connectionKey = \"connectionKey\";\r\n            let apiConnectionParameters = HashTableUtility.create();\r\n            apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                properties: {\r\n                    IsFirstParty: \"true\"\r\n                }\r\n            });\r\n            api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                scopes: null,\r\n                lastChangedTime: new Date(),\r\n                runtimeUrl: new Core.Url(\"\"),\r\n                capabilities: null,\r\n                connectionParameters: apiConnectionParameters,\r\n                metadata: null,\r\n                interfaces: null,\r\n                creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                swaggerJson: null\r\n            }, null);\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                return WinJS.Promise.wrapError(Core.Utility.throwInline(\"error\"));\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"the nothing should be added to the available connections","status":"pass","exception":{},"rawTitle":"the nothing should be added to the available connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-ph3603k0kg-a57i6xl9k0","code":"() => {\r\n            availableConnections.length.should.be.eql(0);\r\n        }","duration":0}],"title":"Single sign on creation is done silently","description":"","tags":[],"sequence":12,"id":"10u02ufb2m3-ph3603k0kg"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"whether the single sign on creation is skipped should be true","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-pxqne0w96l","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["testName","numberOfAvailableConnections","hasApiReference","isOnPremise","isFirstParty","skipped"],["hasConnections","2","true","false","true","true"],["hasApiReference","0","false","false","true","true"],["isOnPremise","0","true","true","true","true"],["isNotFirstParty","0","true","false","false","true"],["needsSingleSignOnCreation","0","true","false","true","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"whether the single sign on creation is skipped should be true","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-pxqne0w96l","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"example":{"testName":"hasConnections","numberOfAvailableConnections":2,"hasApiReference":true,"isOnPremise":false,"isFirstParty":true,"skipped":true},"title":"Single sign on creation is skipped if not necessary","sequence":1,"id":"10u02ufb2m3-54rxezg1r9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"whether the single sign on creation is skipped should be true","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-pxqne0w96l","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"example":{"testName":"hasApiReference","numberOfAvailableConnections":0,"hasApiReference":false,"isOnPremise":false,"isFirstParty":true,"skipped":true},"title":"Single sign on creation is skipped if not necessary","sequence":2,"id":"10u02ufb2m3-54rxezg1r9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"whether the single sign on creation is skipped should be true","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-pxqne0w96l","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"example":{"testName":"isOnPremise","numberOfAvailableConnections":0,"hasApiReference":true,"isOnPremise":true,"isFirstParty":true,"skipped":true},"title":"Single sign on creation is skipped if not necessary","sequence":3,"id":"10u02ufb2m3-54rxezg1r9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":1},{"title":"whether the single sign on creation is skipped should be true","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-pxqne0w96l","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"example":{"testName":"isNotFirstParty","numberOfAvailableConnections":0,"hasApiReference":true,"isOnPremise":false,"isFirstParty":false,"skipped":true},"title":"Single sign on creation is skipped if not necessary","sequence":4,"id":"10u02ufb2m3-54rxezg1r9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"checking to see if single sign on creation is necessary","status":"pass","exception":{},"rawTitle":"checking to see if single sign on creation is necessary","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-54rxezg1r9-l3h201ujqb","code":"(done) => {\r\n            let connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremise\r\n            };\r\n            let availableConnections = [];\r\n            // We don't actually care what is in the available connections, so we can push whatever we want onto it.\r\n            for (let i = 0; i < scenarioOutlineContext.example.numberOfAvailableConnections; i++) {\r\n                availableConnections.push({});\r\n            }\r\n            let api;\r\n            if (scenarioOutlineContext.example.hasApiReference) {\r\n                let connectionKey = \"connectionKey\";\r\n                let apiConnectionParameters = HashTableUtility.create();\r\n                if (scenarioOutlineContext.example.isFirstParty) {\r\n                    apiConnectionParameters[connectionKey] = new AppMagic.ConnectionHub.OAuthTokenConnectionParameter({\r\n                        properties: {\r\n                            IsFirstParty: \"true\"\r\n                        }\r\n                    });\r\n                }\r\n                api = new AppMagic.ConnectionHub.Api(\"apiid\", \"apiName\", {\r\n                    releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                    tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                    scopes: null,\r\n                    lastChangedTime: new Date(),\r\n                    runtimeUrl: new Core.Url(\"\"),\r\n                    capabilities: null,\r\n                    connectionParameters: apiConnectionParameters,\r\n                    metadata: null,\r\n                    interfaces: null,\r\n                    creator: { kind: AppMagic.ConnectionHub.UserKind.Default },\r\n                    swaggerJson: null\r\n                }, null);\r\n            }\r\n            addConnectionsStub = sinon.stub(Mocks_1.MockConnectionService.prototype, \"addConnectionAsync\").callsFake(() => {\r\n                let addConnectionsWinJSPromise = Core.Promise.createCompletablePromise();\r\n                addConnectionsWinJSPromise.complete();\r\n                return addConnectionsWinJSPromise.promise;\r\n            });\r\n            connectionClient._ensureSsoConnectionIsCreatedAsync(connectionReference, availableConnections, api).then(done);\r\n        }","duration":0},{"title":"whether the single sign on creation is skipped should be false","status":"pass","exception":{},"rawTitle":"whether the single sign on creation is skipped should be <skipped>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-54rxezg1r9-4ngsvq4z2b","code":"() => {\r\n            let expectedCallCount = 1;\r\n            if (scenarioOutlineContext.example.skipped) {\r\n                expectedCallCount = 0;\r\n            }\r\n            addConnectionsStub.callCount.should.be.eql(expectedCallCount);\r\n        }","duration":0}],"example":{"testName":"needsSingleSignOnCreation","numberOfAvailableConnections":0,"hasApiReference":true,"isOnPremise":false,"isFirstParty":true,"skipped":false},"title":"Single sign on creation is skipped if not necessary","sequence":5,"id":"10u02ufb2m3-54rxezg1r9"}],"title":"Single sign on creation is skipped if not necessary","description":"Rules:\n* If there is a connection already available, skip\n* If there is no api associated with the connection, skip\n* If it is an on premise connection, skip\n* If it is not a first party api, skip","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection reference is matched to the connection (idMatchOnPrem)","status":"pass","exception":{},"rawTitle":"a connection reference is matched to the connection (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-876m0krf9h-n8o990l9b7","code":"() => {\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: scenarioOutlineContext.example.connectionApiId,\r\n                isOnPremise: scenarioOutlineContext.example.connectionOnPremise,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            let connectionReference = {\r\n                id: scenarioOutlineContext.example.referenceId,\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.referenceOnPremise\r\n            };\r\n            result = connectionClient._isConnectionAvailableForReference(connection, connectionReference);\r\n        }","duration":0},{"title":"whether it matches should be true","status":"pass","exception":{},"rawTitle":"whether it matches should be <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-876m0krf9h-me0vgs9z03","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["testName","referenceId","referenceOnPremise","connectionApiId","connectionOnPremise","expectedResult"],["idMatchOnPrem","matchingId","true","matchingId","true","true"],["idMatchNotOnPrem","matchingId","false","matchingId","false","true"],["onPremNotMatching","matchingId","false","matchingId","true","false"],["notMatchingIds","id1","true","id2","true","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection reference is matched to the connection (idMatchOnPrem)","status":"pass","exception":{},"rawTitle":"a connection reference is matched to the connection (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-876m0krf9h-n8o990l9b7","code":"() => {\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: scenarioOutlineContext.example.connectionApiId,\r\n                isOnPremise: scenarioOutlineContext.example.connectionOnPremise,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            let connectionReference = {\r\n                id: scenarioOutlineContext.example.referenceId,\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.referenceOnPremise\r\n            };\r\n            result = connectionClient._isConnectionAvailableForReference(connection, connectionReference);\r\n        }","duration":0},{"title":"whether it matches should be true","status":"pass","exception":{},"rawTitle":"whether it matches should be <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-876m0krf9h-me0vgs9z03","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n        }","duration":1}],"example":{"testName":"idMatchOnPrem","referenceId":"matchingId","referenceOnPremise":true,"connectionApiId":"matchingId","connectionOnPremise":true,"expectedResult":true},"title":"Connections are matched to their corresponding connection reference","sequence":1,"id":"10u02ufb2m3-876m0krf9h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection reference is matched to the connection (idMatchNotOnPrem)","status":"pass","exception":{},"rawTitle":"a connection reference is matched to the connection (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-876m0krf9h-i79mr8yt4w","code":"() => {\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: scenarioOutlineContext.example.connectionApiId,\r\n                isOnPremise: scenarioOutlineContext.example.connectionOnPremise,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            let connectionReference = {\r\n                id: scenarioOutlineContext.example.referenceId,\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.referenceOnPremise\r\n            };\r\n            result = connectionClient._isConnectionAvailableForReference(connection, connectionReference);\r\n        }","duration":1},{"title":"whether it matches should be true","status":"pass","exception":{},"rawTitle":"whether it matches should be <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-876m0krf9h-me0vgs9z03","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n        }","duration":0}],"example":{"testName":"idMatchNotOnPrem","referenceId":"matchingId","referenceOnPremise":false,"connectionApiId":"matchingId","connectionOnPremise":false,"expectedResult":true},"title":"Connections are matched to their corresponding connection reference","sequence":2,"id":"10u02ufb2m3-876m0krf9h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection reference is matched to the connection (onPremNotMatching)","status":"pass","exception":{},"rawTitle":"a connection reference is matched to the connection (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-876m0krf9h-1yel0o5m5f","code":"() => {\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: scenarioOutlineContext.example.connectionApiId,\r\n                isOnPremise: scenarioOutlineContext.example.connectionOnPremise,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            let connectionReference = {\r\n                id: scenarioOutlineContext.example.referenceId,\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.referenceOnPremise\r\n            };\r\n            result = connectionClient._isConnectionAvailableForReference(connection, connectionReference);\r\n        }","duration":0},{"title":"whether it matches should be false","status":"pass","exception":{},"rawTitle":"whether it matches should be <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-876m0krf9h-lr01moenmw","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n        }","duration":0}],"example":{"testName":"onPremNotMatching","referenceId":"matchingId","referenceOnPremise":false,"connectionApiId":"matchingId","connectionOnPremise":true,"expectedResult":false},"title":"Connections are matched to their corresponding connection reference","sequence":3,"id":"10u02ufb2m3-876m0krf9h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a connection reference is matched to the connection (notMatchingIds)","status":"pass","exception":{},"rawTitle":"a connection reference is matched to the connection (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-876m0krf9h-i73i3vgb0g","code":"() => {\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"displayName\", {\r\n                api: null,\r\n                apiId: scenarioOutlineContext.example.connectionApiId,\r\n                isOnPremise: scenarioOutlineContext.example.connectionOnPremise,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null,\r\n                displayName: \"displayName\"\r\n            }, null);\r\n            let connectionReference = {\r\n                id: scenarioOutlineContext.example.referenceId,\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                isOnPremiseConnection: scenarioOutlineContext.example.referenceOnPremise\r\n            };\r\n            result = connectionClient._isConnectionAvailableForReference(connection, connectionReference);\r\n        }","duration":0},{"title":"whether it matches should be false","status":"pass","exception":{},"rawTitle":"whether it matches should be <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-876m0krf9h-lr01moenmw","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n        }","duration":0}],"example":{"testName":"notMatchingIds","referenceId":"id1","referenceOnPremise":true,"connectionApiId":"id2","connectionOnPremise":true,"expectedResult":false},"title":"Connections are matched to their corresponding connection reference","sequence":4,"id":"10u02ufb2m3-876m0krf9h"}],"title":"Connections are matched to their corresponding connection reference","description":"* If the api id of the connection matches the reference id and both of them have the same value for on premise, then they match","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":0,"duration":27,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameSharedConnectionAsFirst)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i775q6bx8w","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":3},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["testName","sharedConnectionId","gatewayHint","connection1Id","connection1Gateway","connection1DisplayName","connection2Id","connection2Gateway","connection2DisplayName","result"],["sameSharedConnectionAsFirst","sharedId1","","sharedId1","","a","sharedId2","","b","-1"],["sameSharedConnectionAsSecond","sharedId2","","sharedId1","","a","sharedId2","","b","1"],["sameGatewayAsFirst","sharedId3","gatewayHint1","sharedId1","gatewayHint1","a","sharedId2","gatewayHint2","b","-1"],["sameGatewayAsSecond","sharedId3","gatewayHint2","sharedId1","gatewayHint1","a","sharedId2","gatewayHint2","b","1"],["sameGatewayAsBoth","","gatewayHint","sharedId1","gatewayHint","a","sharedId2","gatewayHint","b","-1"],["firstConnectionId","","","a","","a","b","","b","-1"],["secondConnectionId","","","c","","b","b","","a","1"],["secondConnectionName","","","a","","b","b","","a","1"],["firstConnectionName","","","c","","b","b","","c","-1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameSharedConnectionAsFirst)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i775q6bx8w","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":3},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"sameSharedConnectionAsFirst","sharedConnectionId":"sharedId1","gatewayHint":"","connection1Id":"sharedId1","connection1Gateway":"","connection1DisplayName":"a","connection2Id":"sharedId2","connection2Gateway":"","connection2DisplayName":"b","result":-1},"title":"Connections are sorted according to the following rules","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameSharedConnectionAsSecond)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i71mvc0x1c","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":4},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"sameSharedConnectionAsSecond","sharedConnectionId":"sharedId2","gatewayHint":"","connection1Id":"sharedId1","connection1Gateway":"","connection1DisplayName":"a","connection2Id":"sharedId2","connection2Gateway":"","connection2DisplayName":"b","result":1},"title":"Connections are sorted according to the following rules","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameGatewayAsFirst)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-91tzb4l5x1","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":2},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"sameGatewayAsFirst","sharedConnectionId":"sharedId3","gatewayHint":"gatewayHint1","connection1Id":"sharedId1","connection1Gateway":"gatewayHint1","connection1DisplayName":"a","connection2Id":"sharedId2","connection2Gateway":"gatewayHint2","connection2DisplayName":"b","result":-1},"title":"Connections are sorted according to the following rules","sequence":3,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameGatewayAsSecond)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i7678beepc","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":1},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":1}],"example":{"testName":"sameGatewayAsSecond","sharedConnectionId":"sharedId3","gatewayHint":"gatewayHint2","connection1Id":"sharedId1","connection1Gateway":"gatewayHint1","connection1DisplayName":"a","connection2Id":"sharedId2","connection2Gateway":"gatewayHint2","connection2DisplayName":"b","result":1},"title":"Connections are sorted according to the following rules","sequence":4,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (sameGatewayAsBoth)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-3q9dc1lkcz","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":1},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"sameGatewayAsBoth","sharedConnectionId":"","gatewayHint":"gatewayHint","connection1Id":"sharedId1","connection1Gateway":"gatewayHint","connection1DisplayName":"a","connection2Id":"sharedId2","connection2Gateway":"gatewayHint","connection2DisplayName":"b","result":-1},"title":"Connections are sorted according to the following rules","sequence":5,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (firstConnectionId)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-joyngjlaq3","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":2},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"firstConnectionId","sharedConnectionId":"","gatewayHint":"","connection1Id":"a","connection1Gateway":"","connection1DisplayName":"a","connection2Id":"b","connection2Gateway":"","connection2DisplayName":"b","result":-1},"title":"Connections are sorted according to the following rules","sequence":6,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (secondConnectionId)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i72mkkhhs0","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":1},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":1}],"example":{"testName":"secondConnectionId","sharedConnectionId":"","gatewayHint":"","connection1Id":"c","connection1Gateway":"","connection1DisplayName":"b","connection2Id":"b","connection2Gateway":"","connection2DisplayName":"a","result":1},"title":"Connections are sorted according to the following rules","sequence":7,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (secondConnectionName)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-i726bxww8w","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":2},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"secondConnectionName","sharedConnectionId":"","gatewayHint":"","connection1Id":"a","connection1Gateway":"","connection1DisplayName":"b","connection2Id":"b","connection2Gateway":"","connection2DisplayName":"a","result":1},"title":"Connections are sorted according to the following rules","sequence":8,"id":"10u02ufb2m3-10wnqssm5t1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"two connections are compared (firstConnectionName)","status":"pass","exception":{},"rawTitle":"two connections are compared (<testName>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-10wnqssm5t1-cljf8yvxxf","code":"() => {\r\n            let connectionReference = {\r\n                id: \"connectionReferenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\",\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayHint\r\n            };\r\n            let connection1 = generateConnectionItem(scenarioOutlineContext.example.connection1Id, scenarioOutlineContext.example.connection1Gateway, scenarioOutlineContext.example.connection1DisplayName);\r\n            let connection2 = generateConnectionItem(scenarioOutlineContext.example.connection2Id, scenarioOutlineContext.example.connection2Gateway, scenarioOutlineContext.example.connection2DisplayName);\r\n            result = connectionClient._compareConnections(connectionReference, connection1, connection2);\r\n        }","duration":9},{"title":"the connections are sorted correctly","status":"pass","exception":{},"rawTitle":"the connections are sorted correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-10wnqssm5t1-54ryky1mel","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0}],"example":{"testName":"firstConnectionName","sharedConnectionId":"","gatewayHint":"","connection1Id":"c","connection1Gateway":"","connection1DisplayName":"b","connection2Id":"b","connection2Gateway":"","connection2DisplayName":"c","result":-1},"title":"Connections are sorted according to the following rules","sequence":9,"id":"10u02ufb2m3-10wnqssm5t1"}],"title":"Connections are sorted according to the following rules","description":"* If the shared connection id on the reference is equal to the id of the connection, that connection goes first\n* IF there is a gateway hint on the reference, then the connection with the matching gateway object goes first\n* If both connections have a display name, then they are sorted alphabetically by display name\n* Otherwise, sort it alphabetically by id","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a new connection","status":"pass","exception":{},"rawTitle":"adding a new connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-15zpkvnjjfv-15zpkvnjjfv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const api = Utilities_1.ConnectionUtilities.createApi([\"action\"], \"apiName\", \"apiid\");\r\n            apis.push(api);\r\n            addedConnectionId = \"addedConnectionId\";\r\n            addConnectionsStub = sinon.stub(AppMagic.Runtime.Client.ConnectionOperations, AppMagic.Runtime.Client.ConnectionOperations.addConnectionAsync.name).returns(Promise.resolve({ id: addedConnectionId }));\r\n            // Note that apiId and connectionRefId are all normalized to lower case in runtime.\r\n            connectionReferenceId = \"apiid\";\r\n            let connectionReference = RuntimeAppInfoGenerator.generateBaseConnectionReference(connectionReferenceId);\r\n            let connectionReferences = RuntimeAppInfoGenerator.generateBaseConnectionReferences();\r\n            connectionReferences[connectionReferenceId] = connectionReference;\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(connectionReferences);\r\n            parameters = HashTableUtility.create();\r\n            parameters[\"param1\"] = \"abc\";\r\n            gatewayObjectId = \"gatewayObjectId\";\r\n            const connections = [Utilities_1.ConnectionUtilities.createConnection(apis[0])];\r\n            appResources = new AppMagic.Runtime.Client.AppResources(appInfo, apis, connections, null);\r\n            getAppResourcesStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns(appResources);\r\n            result = yield connectionClient.addConnectionAsync(appInfo, connectionReferenceId, parameters, gatewayObjectId);\r\n        })","duration":3},{"title":"the app resources used by the connection is retrieved","status":"pass","exception":{},"rawTitle":"the app resources used by the connection is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-15zpkvnjjfv-dhysediijp","code":"() => {\r\n            getAppResourcesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connection is added","status":"pass","exception":{},"rawTitle":"the connection is added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-15zpkvnjjfv-15vnnxj10y5","code":"() => {\r\n            addConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the api retrieved is passed to add the connection","status":"pass","exception":{},"rawTitle":"the api retrieved is passed to add the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10u02ufb2m3-15zpkvnjjfv-1b5tbs5vw5","code":"() => {\r\n            addConnectionsStub.firstCall.args[1].should.be.eql(apis[0]);\r\n        }","duration":0},{"title":"the parameters are passed to add the connection","status":"pass","exception":{},"rawTitle":"the parameters are passed to add the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"10u02ufb2m3-15zpkvnjjfv-16b87w825a8","code":"() => {\r\n            HashTableUtility.areEqual(addConnectionsStub.firstCall.args[2], parameters, (t1, t2) => {\r\n                return t1 === t2;\r\n            }).should.be.eql(true);\r\n        }","duration":0},{"title":"the gateway object id is passed to add the connection","status":"pass","exception":{},"rawTitle":"the gateway object id is passed to add the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"10u02ufb2m3-15zpkvnjjfv-12k4k4yy0q3","code":"() => {\r\n            addConnectionsStub.firstCall.args[3].should.be.eql(gatewayObjectId);\r\n        }","duration":0},{"title":"the added connection id is returned","status":"pass","exception":{},"rawTitle":"the added connection id is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"10u02ufb2m3-15zpkvnjjfv-jkpmnyj5z4","code":"() => {\r\n            result.should.be.eql(addedConnectionId);\r\n        }","duration":0}],"title":"When adding a new connection","description":"","tags":[],"sequence":16,"id":"10u02ufb2m3-15zpkvnjjfv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fixing a new connection","status":"pass","exception":{},"rawTitle":"fixing a new connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-g3f1491did-dq5a4uyxnf","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            apiId = \"apiId\";\r\n            connectionId = \"connectionId\";\r\n            connectionName = \"connectionName\";\r\n            let connectionReferences = RuntimeAppInfoGenerator.generateBaseConnectionReferences();\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(connectionReferences);\r\n            const apiProps = {\r\n                releaseStatus: AppMagic.ConnectionHub.ApiReleaseStatus.Production,\r\n                tier: AppMagic.ConnectionHub.ApiTier.Standard,\r\n                scopes: null,\r\n                lastChangedTime: new Date(),\r\n                runtimeUrl: null,\r\n                capabilities: 1,\r\n                connectionParameters: null,\r\n                metadata: null,\r\n                interfaces: null,\r\n                creator: null,\r\n                swaggerJson: \"sometestjson\"\r\n            };\r\n            connectionApi = new AppMagic.ConnectionHub.Api(apiId, \"MyApi\", apiProps, null);\r\n            const connectionProp = { api: connectionApi, apiId: apiId, isOnPremise: false, status: null, environmentName: null };\r\n            const connection = new AppMagic.ConnectionHub.Connection(connectionId, connectionName, connectionProp, null);\r\n            const connection2 = new AppMagic.ConnectionHub.Connection(\"connectionId2\", \"connectionName2\", connectionProp, null);\r\n            const connection3 = new AppMagic.ConnectionHub.Connection(\"connectionId3\", \"connectionName3\", connectionProp, null);\r\n            const appResources = new AppMagic.Runtime.Client.AppResources(appInfo, /* apis */ [connectionApi], /* connections */ [connection3, connection2, connection], /* usages */ null);\r\n            getAppResourcesStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns(appResources);\r\n            fixConnectionsStub = sinon.stub(AppMagic.Runtime.Client.ConnectionOperations, AppMagic.Runtime.Client.ConnectionOperations.getConnectionConsentAsync.name).returns(connection);\r\n            yield connectionClient.fixConnectionAsync(appInfo.id, connectionId);\r\n        })","duration":11},{"title":"the app resource is retrieved","status":"pass","exception":{},"rawTitle":"the app resource is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-g3f1491did-jkkk1uyja8","code":"() => {\r\n            getAppResourcesStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connection is fixed","status":"pass","exception":{},"rawTitle":"the connection is fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"10u02ufb2m3-g3f1491did-ijzvl5pzc3","code":"() => {\r\n            fixConnectionsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connection id is passed to fix the connection","status":"pass","exception":{},"rawTitle":"the connection id is passed to fix the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"10u02ufb2m3-g3f1491did-11qggkzivf9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            fixConnectionsStub.firstCall.args[1].should.be.eql(connectionName);\r\n        })","duration":1},{"title":"the api id is passed to fix the connection","status":"pass","exception":{},"rawTitle":"the api id is passed to fix the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"10u02ufb2m3-g3f1491did-16b967he8ao","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            fixConnectionsStub.firstCall.args[2].should.be.eql(apiId);\r\n        })","duration":0},{"title":"the api retrieved is passed to fix the connection","status":"pass","exception":{},"rawTitle":"the api retrieved is passed to fix the connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"10u02ufb2m3-g3f1491did-1b5mdt9zcr","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            fixConnectionsStub.firstCall.args[3].should.be.eql(connectionApi);\r\n        })","duration":1}],"title":"When fixing connection","description":"","tags":[],"sequence":17,"id":"10u02ufb2m3-g3f1491did"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":31,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections for app","status":"pass","exception":{},"rawTitle":"saving connections for app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"10u02ufb2m3-2rqnvbgmv4-2rqnvbgmv4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters_1.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            connectionsToBeSaved = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            let connection = new AppMagic.ConnectionHub.Connection(\"connectionId\", \"connectionName\", {\r\n                api: null,\r\n                apiId: null,\r\n                isOnPremise: false,\r\n                status: {\r\n                    isAuthenticated: true,\r\n                    errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                },\r\n                environmentName: null\r\n            }, null);\r\n            allConnections = [];\r\n            allConnections.push(connection);\r\n            appResources = new AppMagic.Runtime.Client.AppResources(appInfo, /* apis */ null, allConnections, /* usages */ null);\r\n            saveDisambiguationResultStub = sinon.stub(AppMagic.PowerApps.DisambiguationResultProcessor.prototype, \"saveDisambiguationResultsAndUpdateRuntimeAsync\")\r\n                .callsFake(() => {\r\n                let winJsPromise = Core.Promise.createCompletablePromise();\r\n                winJsPromise.complete();\r\n                return winJsPromise.promise;\r\n            });\r\n            yield connectionClient.saveConnectionsAsync(appResources, connectionsToBeSaved, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, Mocks_1.TestConnectionDisplayData.showDatasets, Mocks_1.TestConnectionDisplayData.getDatasetRefId, Mocks_1.TestConnectionDisplayData.getUserSelectedDataset);\r\n        })","duration":31},{"title":"the connections are saved","status":"pass","exception":{},"rawTitle":"the connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"10u02ufb2m3-2rqnvbgmv4-itj0vxgtsb","code":"() => {\r\n            saveDisambiguationResultStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When saving connections for app","description":"","tags":[],"sequence":18,"id":"10u02ufb2m3-2rqnvbgmv4"}],"title":"When managing connections for a published app","description":"Rules:\n* Fetches the most up to date connection information for the specified app and connections\n* The connection display data is populated correctly\n* All the user's connections are filtered and sorted to determine if they can be used by the app\n* A connection is selected to be the one to be displayed as default\n* Single sign on connections can be created silently\n* Connections can be matched to their corresponding connection reference\n* Connections can be saved for the app","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/ConnectionClient.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an instance of the connection client","status":"pass","exception":{},"rawTitle":"an instance of the connection client","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"10u02ufb2m3-9pbsb4-cn4nurnops","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n            const userService = new Mocks_1.MockUserService();\r\n            connectionService = new Mocks_1.MockConnectionService();\r\n            connectionClient = new Adapters_1.ConnectionClient(connectionService, new AppMagic.PowerApps.PostConnectionUsageManager(userService), userService);\r\n        })","duration":1}],"title":"","description":"","tags":[],"id":"10u02ufb2m3-9pbsb4"},"id":"10u02ufb2m3","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":33,"failedCount":0,"pendingCount":0,"totalCount":33,"totalRuleViolations":0,"duration":31,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":32,"failedCount":0,"pendingCount":0,"totalCount":32,"totalRuleViolations":0,"duration":30,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Don't recommend with no connections","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-7lcjtzmf2d","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":7},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["scenarioName","dontRecommend","connections","serverSelectedConnectionId","clientSelectedConnectionId","expectedSelectedConnectionId"],["Don't recommend with no connections","true","[]","","",""],["Don't recomment existing connection","true","[\"con1\"]","","",""],["Select connection from server","true","[\"con1\"]","con1","","con1"],["Select connection from client","true","[\"con1\"]","","con1","con1"],["Same selected in server and client","true","[\"con1\"]","con1","con1","con1"],["Prioritize client over server","true","[\"con1\", \"con2\"]","con1","con2","con2"],["Don't recomment with no connections","false","[]","","",""],["Recommend non-selected connection","false","[\"con1\"]","","","con1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Don't recommend with no connections","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-7lcjtzmf2d","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":7},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Don't recommend with no connections","dontRecommend":true,"connections":[],"serverSelectedConnectionId":"","clientSelectedConnectionId":"","expectedSelectedConnectionId":""},"title":"Updating and getting connection information","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Don't recomment existing connection","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-12k4pj7tyit","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":1}],"example":{"scenarioName":"Don't recomment existing connection","dontRecommend":true,"connections":["con1"],"serverSelectedConnectionId":"","clientSelectedConnectionId":"","expectedSelectedConnectionId":""},"title":"Updating and getting connection information","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Select connection from server","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-a9xdz1y55n","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Select connection from server","dontRecommend":true,"connections":["con1"],"serverSelectedConnectionId":"con1","clientSelectedConnectionId":"","expectedSelectedConnectionId":"con1"},"title":"Updating and getting connection information","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Select connection from client","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-tu4yfawp0d","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":2},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Select connection from client","dontRecommend":true,"connections":["con1"],"serverSelectedConnectionId":"","clientSelectedConnectionId":"con1","expectedSelectedConnectionId":"con1"},"title":"Updating and getting connection information","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Same selected in server and client","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-1gfv5ic3bn","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":1}],"example":{"scenarioName":"Same selected in server and client","dontRecommend":true,"connections":["con1"],"serverSelectedConnectionId":"con1","clientSelectedConnectionId":"con1","expectedSelectedConnectionId":"con1"},"title":"Updating and getting connection information","sequence":5,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Prioritize client over server","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-167c2gc7y9h","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Prioritize client over server","dontRecommend":true,"connections":["con1","con2"],"serverSelectedConnectionId":"con1","clientSelectedConnectionId":"con2","expectedSelectedConnectionId":"con2"},"title":"Updating and getting connection information","sequence":6,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Don't recomment with no connections","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-1802t63clqz","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":1},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Don't recomment with no connections","dontRecommend":false,"connections":[],"serverSelectedConnectionId":"","clientSelectedConnectionId":"","expectedSelectedConnectionId":""},"title":"Updating and getting connection information","sequence":7,"id":"mn5kzvu8cb-h9uv5a2pur"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information is updated for scenario: Recommend non-selected connection","status":"pass","exception":{},"rawTitle":"the connection information is updated for scenario: <scenarioName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5kzvu8cb-h9uv5a2pur-byahl8hxi3","code":"(done) => {\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            connectionReference = {\r\n                id: \"referenceId\",\r\n                displayName: \"displayName\",\r\n                iconUri: \"iconUri\"\r\n            };\r\n            allConnections = [];\r\n            selectedConnections = [];\r\n            selectedServerConnection = null;\r\n            scenarioOutlineContext.example.connections.forEach((conId) => {\r\n                let connection = new AppMagic.ConnectionHub.Connection(conId, \"displayName\", {\r\n                    api: null,\r\n                    apiId: null,\r\n                    isOnPremise: false,\r\n                    status: {\r\n                        isAuthenticated: true,\r\n                        errorCode: AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK\r\n                    },\r\n                    environmentName: null,\r\n                    displayName: \"displayName\"\r\n                }, null);\r\n                allConnections.push(connection);\r\n                if (conId === scenarioOutlineContext.example.serverSelectedConnectionId) {\r\n                    selectedServerConnection = new AppMagic.ConnectionHub.UserConnectionForApp(connectionReferenceId, connection);\r\n                    selectedConnections.push(selectedServerConnection);\r\n                }\r\n                if (conId === scenarioOutlineContext.example.clientSelectedConnectionId) {\r\n                    selectedClientConnectionId = conId;\r\n                }\r\n            });\r\n            const usages = HashTableUtility.create();\r\n            selectedConnections.forEach(usages => {\r\n                usages[usages.reference] = usages;\r\n            });\r\n            appResources = new AppMagic.Runtime.Client.AppResources(RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(), /* apis */ null, allConnections, usages);\r\n            map = new Map();\r\n            map.set(connectionReferenceId, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData(connectionReferenceId, connectionReference));\r\n            // Set up filterAndSortStub\r\n            filterAndSortStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_filterAndSortAvailableConnections\").returns(allConnections);\r\n            // Set up ensureSsoCreatedStub\r\n            ensureSsoCreatedStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_ensureSsoConnectionIsCreatedAsync\");\r\n            // Set up getSelectedConnectionSpy\r\n            getSelectedConnectionSpy = sinon.spy(Adapters_1.ConnectionClient.prototype, \"_getSelectedConnection\");\r\n            // Set up getServerSelectedConnectionStub\r\n            getServerSelectedConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, \"_getUserSelectedConnectionFromServer\").returns(selectedServerConnection);\r\n            // Set up getClientSelectedConnectionIdStub\r\n            getClientSelectedConnectionIdStub = sinon.stub(Mocks_1.TestConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId.name).returns(selectedClientConnectionId);\r\n            connectionClient._updateAndRecommendConnectionInfoAsync(connectionReferenceId, connectionReference, appResources, map, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, scenarioOutlineContext.example.dontRecommend).then(done);\r\n        }","duration":3},{"title":"an sso connection is not attempted to be created when dontRecommend=true","status":"pass","exception":{},"rawTitle":"an sso connection is not attempted to be created when dontRecommend=true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5kzvu8cb-h9uv5a2pur-lqwndy8p5s","code":"() => {\r\n            ensureSsoCreatedStub.notCalled.should.be.eql(scenarioOutlineContext.example.dontRecommend);\r\n        }","duration":0},{"title":"the selected connection is retrieved with correct dontRecommend param","status":"pass","exception":{},"rawTitle":"the selected connection is retrieved with correct dontRecommend param","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"mn5kzvu8cb-h9uv5a2pur-vfumgk4npn","code":"() => {\r\n            getSelectedConnectionSpy.calledWith(getClientSelectedConnectionIdStub.returnValues[0], getServerSelectedConnectionStub.returnValues[0], filterAndSortStub.returnValues[0], scenarioOutlineContext.example.dontRecommend).should.be.eql(true);\r\n        }","duration":0},{"title":"the selected connection returns the right value","status":"pass","exception":{},"rawTitle":"the selected connection returns the right value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"mn5kzvu8cb-h9uv5a2pur-qpt79ld7gj","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedSelectedConnectionId) {\r\n                getSelectedConnectionSpy.returnValues[0].id.should.be.eql(scenarioOutlineContext.example.expectedSelectedConnectionId);\r\n            }\r\n            else {\r\n                should.equal(getSelectedConnectionSpy.returnValues[0], null);\r\n            }\r\n        }","duration":0}],"example":{"scenarioName":"Recommend non-selected connection","dontRecommend":false,"connections":["con1"],"serverSelectedConnectionId":"","clientSelectedConnectionId":"","expectedSelectedConnectionId":"con1"},"title":"Updating and getting connection information","sequence":8,"id":"mn5kzvu8cb-h9uv5a2pur"}],"title":"Updating and getting connection information","description":"","tags":[]}],"title":"Getting the selected connection for an app","description":"Rules:\n* Updating and getting connection information with and without a recommendation","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/ConnectionClient.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an instance of the connection client","status":"pass","exception":{},"rawTitle":"an instance of the connection client","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mn5kzvu8cb-9pbsb4-cn4nurnops","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const userService = new Mocks_1.MockUserService();\r\n            connectionClient = new Adapters_1.ConnectionClient(new Mocks_1.MockConnectionService(), new AppMagic.PowerApps.PostConnectionUsageManager(userService), userService);\r\n        })","duration":1}],"title":"","description":"","tags":[],"id":"mn5kzvu8cb-9pbsb4"},"id":"mn5kzvu8cb","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":46,"failedCount":0,"pendingCount":0,"totalCount":46,"totalRuleViolations":0,"duration":78,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the NPS feature gate is off","status":"pass","exception":{},"rawTitle":"the NPS feature gate is off","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-6g48oma1rx-ny7na5hsbk","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", () => false);\r\n        }","duration":1},{"title":"the platform OS is \"any\"","status":"pass","exception":{},"rawTitle":"the platform OS is \"any\"","description":"","docString":"","values":["any"],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-6g48oma1rx-ciiunlo5s0","code":"() => {\r\n            const os = react_native_1.Platform.OS;\r\n            restoreOS = () => {\r\n                react_native_1.Platform.__setOS(os);\r\n            };\r\n            react_native_1.Platform.__setOS(stepContext.values[0]);\r\n        }","duration":1},{"title":"check if NPS is requested","status":"pass","exception":{},"rawTitle":"check if NPS is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"16b8es7vl6o-6g48oma1rx-o53i08rlyz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter();\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":2},{"title":"nps should not be requested","status":"pass","exception":{},"rawTitle":"nps should not be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"16b8es7vl6o-6g48oma1rx-lqxqxaketx","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.false;\r\n        }","duration":1}],"title":"Ensure NPS is not triggered when the feature gate is off","description":"","tags":[],"sequence":1,"id":"16b8es7vl6o-6g48oma1rx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the NPS feature gate is on","status":"pass","exception":{},"rawTitle":"the NPS feature gate is on","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-135jhnuo6zn-16b90oisrr4","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", () => true);\r\n        }","duration":5},{"title":"the platform OS is \"ios\"","status":"pass","exception":{},"rawTitle":"the platform OS is \"ios\"","description":"","docString":"","values":["ios"],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-135jhnuo6zn-ciliowv000","code":"() => {\r\n            const os = react_native_1.Platform.OS;\r\n            restoreOS = () => {\r\n                react_native_1.Platform.__setOS(os);\r\n            };\r\n            react_native_1.Platform.__setOS(stepContext.values[0]);\r\n        }","duration":1},{"title":"the NPS feature gate for iOS is off","status":"pass","exception":{},"rawTitle":"the NPS feature gate for iOS is off","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-135jhnuo6zn-14juvm7rwd","code":"() => {\r\n            npsOniOSPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"npsOniOS\", () => false);\r\n        }","duration":0},{"title":"check if NPS is requested","status":"pass","exception":{},"rawTitle":"check if NPS is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-135jhnuo6zn-o53i08rlyz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter();\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":1},{"title":"nps should not be requested","status":"pass","exception":{},"rawTitle":"nps should not be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-135jhnuo6zn-lqxqxaketx","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.false;\r\n        }","duration":0}],"title":"Ensure NPS is not triggered on iOS when","description":"- the NPS feature gate is on\n- the platform OS is iOS\n- the NPSOnIOS feature gate is off\n\nThis is due to PowerApps pricing information being accessible\nfrom links/buttons in the NPS dialog which will cause Apple\nto reject the app when they validate the store submission.","tags":[],"sequence":2,"id":"16b8es7vl6o-135jhnuo6zn"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":36,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate on is true","status":"pass","exception":{},"rawTitle":"the nps feature gate on is <featureGateOn>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-tgo21fi671-lr0v1lt668","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", scenarioOutlineContext.example.featureGateOn);\r\n        }","duration":5},{"title":"should prompt user is false","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-tgo21fi671-lqzwgx1bog","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":0},{"title":"the nps url is \"someurl\"","status":"pass","exception":{},"rawTitle":"the nps url is \"someurl\"","description":"","docString":"","values":["someurl"],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-tgo21fi671-11dh6egqrgt","code":"() => {\r\n            npsUrl = stepContext.values[0];\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(npsUrl); }));\r\n        }","duration":0},{"title":"checking if nps is requested with force set to \"true\"","status":"pass","exception":{},"rawTitle":"checking if nps is requested with force set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-tgo21fi671-15vg0v9l1v7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter(JSON.parse(stepContext.values[0]));\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"nps should be requested","status":"pass","exception":{},"rawTitle":"nps should be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-tgo21fi671-itj7noirn1","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.true;\r\n        }","duration":1},{"title":"the nps url should match the expected url","status":"pass","exception":{},"rawTitle":"the nps url should match the expected url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"16b8es7vl6o-tgo21fi671-11l62t7nss0","code":"() => {\r\n            npsRequested.url.should.be.eql(npsUrl);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["featureGateOn","shouldPromptUser"],["true","false"],["true","true"],["false","false"],["false","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate on is true","status":"pass","exception":{},"rawTitle":"the nps feature gate on is <featureGateOn>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-tgo21fi671-lr0v1lt668","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", scenarioOutlineContext.example.featureGateOn);\r\n        }","duration":5},{"title":"should prompt user is false","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-tgo21fi671-lqzwgx1bog","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":0},{"title":"the nps url is \"someurl\"","status":"pass","exception":{},"rawTitle":"the nps url is \"someurl\"","description":"","docString":"","values":["someurl"],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-tgo21fi671-11dh6egqrgt","code":"() => {\r\n            npsUrl = stepContext.values[0];\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(npsUrl); }));\r\n        }","duration":0},{"title":"checking if nps is requested with force set to \"true\"","status":"pass","exception":{},"rawTitle":"checking if nps is requested with force set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-tgo21fi671-15vg0v9l1v7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter(JSON.parse(stepContext.values[0]));\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"nps should be requested","status":"pass","exception":{},"rawTitle":"nps should be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-tgo21fi671-itj7noirn1","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.true;\r\n        }","duration":1},{"title":"the nps url should match the expected url","status":"pass","exception":{},"rawTitle":"the nps url should match the expected url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"16b8es7vl6o-tgo21fi671-11l62t7nss0","code":"() => {\r\n            npsRequested.url.should.be.eql(npsUrl);\r\n        }","duration":0}],"example":{"featureGateOn":true,"shouldPromptUser":false},"title":"Ensure NPS is triggered when forced","sequence":1,"id":"16b8es7vl6o-tgo21fi671"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate on is true","status":"pass","exception":{},"rawTitle":"the nps feature gate on is <featureGateOn>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-tgo21fi671-lr0v1lt668","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", scenarioOutlineContext.example.featureGateOn);\r\n        }","duration":4},{"title":"should prompt user is true","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-tgo21fi671-lqxujgbu68","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":1},{"title":"the nps url is \"someurl\"","status":"pass","exception":{},"rawTitle":"the nps url is \"someurl\"","description":"","docString":"","values":["someurl"],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-tgo21fi671-11dh6egqrgt","code":"() => {\r\n            npsUrl = stepContext.values[0];\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(npsUrl); }));\r\n        }","duration":0},{"title":"checking if nps is requested with force set to \"true\"","status":"pass","exception":{},"rawTitle":"checking if nps is requested with force set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-tgo21fi671-15vg0v9l1v7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter(JSON.parse(stepContext.values[0]));\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"nps should be requested","status":"pass","exception":{},"rawTitle":"nps should be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-tgo21fi671-itj7noirn1","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.true;\r\n        }","duration":0},{"title":"the nps url should match the expected url","status":"pass","exception":{},"rawTitle":"the nps url should match the expected url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"16b8es7vl6o-tgo21fi671-11l62t7nss0","code":"() => {\r\n            npsRequested.url.should.be.eql(npsUrl);\r\n        }","duration":0}],"example":{"featureGateOn":true,"shouldPromptUser":true},"title":"Ensure NPS is triggered when forced","sequence":2,"id":"16b8es7vl6o-tgo21fi671"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate on is false","status":"pass","exception":{},"rawTitle":"the nps feature gate on is <featureGateOn>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-tgo21fi671-lqvz8jyqsg","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", scenarioOutlineContext.example.featureGateOn);\r\n        }","duration":4},{"title":"should prompt user is false","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-tgo21fi671-lqzwgx1bog","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":13},{"title":"the nps url is \"someurl\"","status":"pass","exception":{},"rawTitle":"the nps url is \"someurl\"","description":"","docString":"","values":["someurl"],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-tgo21fi671-11dh6egqrgt","code":"() => {\r\n            npsUrl = stepContext.values[0];\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(npsUrl); }));\r\n        }","duration":1},{"title":"checking if nps is requested with force set to \"true\"","status":"pass","exception":{},"rawTitle":"checking if nps is requested with force set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-tgo21fi671-15vg0v9l1v7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter(JSON.parse(stepContext.values[0]));\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"nps should be requested","status":"pass","exception":{},"rawTitle":"nps should be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-tgo21fi671-itj7noirn1","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.true;\r\n        }","duration":0},{"title":"the nps url should match the expected url","status":"pass","exception":{},"rawTitle":"the nps url should match the expected url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"16b8es7vl6o-tgo21fi671-11l62t7nss0","code":"() => {\r\n            npsRequested.url.should.be.eql(npsUrl);\r\n        }","duration":0}],"example":{"featureGateOn":false,"shouldPromptUser":false},"title":"Ensure NPS is triggered when forced","sequence":3,"id":"16b8es7vl6o-tgo21fi671"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate on is false","status":"pass","exception":{},"rawTitle":"the nps feature gate on is <featureGateOn>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-tgo21fi671-lqvz8jyqsg","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", scenarioOutlineContext.example.featureGateOn);\r\n        }","duration":6},{"title":"should prompt user is true","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-tgo21fi671-lqxujgbu68","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":1},{"title":"the nps url is \"someurl\"","status":"pass","exception":{},"rawTitle":"the nps url is \"someurl\"","description":"","docString":"","values":["someurl"],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-tgo21fi671-11dh6egqrgt","code":"() => {\r\n            npsUrl = stepContext.values[0];\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(npsUrl); }));\r\n        }","duration":0},{"title":"checking if nps is requested with force set to \"true\"","status":"pass","exception":{},"rawTitle":"checking if nps is requested with force set to \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"When","sequence":4,"id":"16b8es7vl6o-tgo21fi671-15vg0v9l1v7","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter(JSON.parse(stepContext.values[0]));\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"nps should be requested","status":"pass","exception":{},"rawTitle":"nps should be requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"16b8es7vl6o-tgo21fi671-itj7noirn1","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            npsRequested.shouldPromptUser.should.be.true;\r\n        }","duration":0},{"title":"the nps url should match the expected url","status":"pass","exception":{},"rawTitle":"the nps url should match the expected url","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"16b8es7vl6o-tgo21fi671-11l62t7nss0","code":"() => {\r\n            npsRequested.url.should.be.eql(npsUrl);\r\n        }","duration":0}],"example":{"featureGateOn":false,"shouldPromptUser":true},"title":"Ensure NPS is triggered when forced","sequence":4,"id":"16b8es7vl6o-tgo21fi671"}],"title":"Ensure NPS is triggered when forced","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate is on","status":"pass","exception":{},"rawTitle":"the nps feature gate is on","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-lr26z73n9c-ua9h2nwjtx","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", () => true);\r\n        }","duration":4},{"title":"the platform OS is \"any\"","status":"pass","exception":{},"rawTitle":"the platform OS is \"any\"","description":"","docString":"","values":["any"],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-lr26z73n9c-ciiunlo5s0","code":"() => {\r\n            const os = react_native_1.Platform.OS;\r\n            restoreOS = () => {\r\n                react_native_1.Platform.__setOS(os);\r\n            };\r\n            react_native_1.Platform.__setOS(stepContext.values[0]);\r\n        }","duration":0},{"title":"should prompt user is false","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-lr26z73n9c-lqzwgx1bog","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":1},{"title":"the nps url is stubbed","status":"pass","exception":{},"rawTitle":"the nps url is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b8es7vl6o-lr26z73n9c-ys8bszdznn","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(\"\"); }));\r\n        }","duration":0},{"title":"checking if nps is requested","status":"pass","exception":{},"rawTitle":"checking if nps is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":5,"id":"16b8es7vl6o-lr26z73n9c-jkpqjqzv9c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter();\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"should prompt user should be false","status":"pass","exception":{},"rawTitle":"should prompt user should be <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":6,"id":"16b8es7vl6o-lr26z73n9c-1j26lu5la5","code":"() => {\r\n            npsRequested.shouldPromptUser.should.be.eql(scenarioOutlineContext.example.shouldPromptUser);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["shouldPromptUser"],["false"],["true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate is on","status":"pass","exception":{},"rawTitle":"the nps feature gate is on","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-lr26z73n9c-ua9h2nwjtx","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", () => true);\r\n        }","duration":4},{"title":"the platform OS is \"any\"","status":"pass","exception":{},"rawTitle":"the platform OS is \"any\"","description":"","docString":"","values":["any"],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-lr26z73n9c-ciiunlo5s0","code":"() => {\r\n            const os = react_native_1.Platform.OS;\r\n            restoreOS = () => {\r\n                react_native_1.Platform.__setOS(os);\r\n            };\r\n            react_native_1.Platform.__setOS(stepContext.values[0]);\r\n        }","duration":0},{"title":"should prompt user is false","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-lr26z73n9c-lqzwgx1bog","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":1},{"title":"the nps url is stubbed","status":"pass","exception":{},"rawTitle":"the nps url is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b8es7vl6o-lr26z73n9c-ys8bszdznn","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(\"\"); }));\r\n        }","duration":0},{"title":"checking if nps is requested","status":"pass","exception":{},"rawTitle":"checking if nps is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":5,"id":"16b8es7vl6o-lr26z73n9c-jkpqjqzv9c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter();\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"should prompt user should be false","status":"pass","exception":{},"rawTitle":"should prompt user should be <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":6,"id":"16b8es7vl6o-lr26z73n9c-1j26lu5la5","code":"() => {\r\n            npsRequested.shouldPromptUser.should.be.eql(scenarioOutlineContext.example.shouldPromptUser);\r\n        }","duration":1}],"example":{"shouldPromptUser":false},"title":"NPS is triggered under normal circumstances where","sequence":1,"id":"16b8es7vl6o-lr26z73n9c"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the nps feature gate is on","status":"pass","exception":{},"rawTitle":"the nps feature gate is on","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-lr26z73n9c-ua9h2nwjtx","code":"() => {\r\n            npsPropertyStub = Utilities_1.SinonUtilities.stubProperty(Core.FeatureGates.playerUI, \"nps\", () => true);\r\n        }","duration":4},{"title":"the platform OS is \"any\"","status":"pass","exception":{},"rawTitle":"the platform OS is \"any\"","description":"","docString":"","values":["any"],"ruleViolations":[],"type":"and","sequence":2,"id":"16b8es7vl6o-lr26z73n9c-ciiunlo5s0","code":"() => {\r\n            const os = react_native_1.Platform.OS;\r\n            restoreOS = () => {\r\n                react_native_1.Platform.__setOS(os);\r\n            };\r\n            react_native_1.Platform.__setOS(stepContext.values[0]);\r\n        }","duration":0},{"title":"should prompt user is true","status":"pass","exception":{},"rawTitle":"should prompt user is <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b8es7vl6o-lr26z73n9c-lqxujgbu68","code":"() => {\r\n            checkNpsRequestedAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkNpsRequestedAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(scenarioOutlineContext.example.shouldPromptUser); }));\r\n        }","duration":1},{"title":"the nps url is stubbed","status":"pass","exception":{},"rawTitle":"the nps url is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b8es7vl6o-lr26z73n9c-ys8bszdznn","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getNpsUrlAsync.name)\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(\"\"); }));\r\n        }","duration":2},{"title":"checking if nps is requested","status":"pass","exception":{},"rawTitle":"checking if nps is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":5,"id":"16b8es7vl6o-lr26z73n9c-jkpqjqzv9c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const npsAdapter = new Adapters_1.NPSAdapter();\r\n            npsRequested = yield npsAdapter.checkNpsRequestedAsync();\r\n        })","duration":2},{"title":"should prompt user should be true","status":"pass","exception":{},"rawTitle":"should prompt user should be <shouldPromptUser>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":6,"id":"16b8es7vl6o-lr26z73n9c-lqytc5n84g","code":"() => {\r\n            npsRequested.shouldPromptUser.should.be.eql(scenarioOutlineContext.example.shouldPromptUser);\r\n        }","duration":1}],"example":{"shouldPromptUser":true},"title":"NPS is triggered under normal circumstances where","sequence":2,"id":"16b8es7vl6o-lr26z73n9c"}],"title":"NPS is triggered under normal circumstances where","description":"- the feature gate is on\n- force is not set","tags":[]}],"title":"NPS adapter for the NPS service calls which determine if the NPS dialog should be shown","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NPSAdapter.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an instance of the runtime adapter","status":"pass","exception":{},"rawTitle":"an instance of the runtime adapter","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"16b8es7vl6o-9pbsb4-7o0tl6fedc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            runtimeAdapter = new Adapters_1.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n        })","duration":14}],"title":"","description":"","tags":[],"id":"16b8es7vl6o-9pbsb4"},"id":"16b8es7vl6o","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":12,"totalCount":27,"totalRuleViolations":1,"duration":11,"passPercent":0.5555555555555556,"failedPercent":0,"pendingPercent":0.4444444444444444},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling getAppName","status":"pass","exception":{},"rawTitle":"calling getAppName","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"wf29s9ghhx-lr4t7wxxnk-4nh00k6y6l","code":"() => {\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            client = new Adapters_1.PublishedAppPowerAppsClient(appInfo);\r\n            appName = client.getAppName();\r\n        }","duration":1},{"title":"the correct app name should be returned","status":"pass","exception":{},"rawTitle":"the correct app name should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"wf29s9ghhx-lr4t7wxxnk-86eejghvvx","code":"() => {\r\n            appName.should.be.eql(appInfo.name);\r\n        }","duration":1}],"title":"Getting the app name","description":"","tags":[],"sequence":1,"id":"wf29s9ghhx-lr4t7wxxnk"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling getAppAuthResources","status":"pass","exception":{},"rawTitle":"calling getAppAuthResources","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"wf29s9ghhx-siugh7qhh1-z9hx0lsjpp","code":"() => {\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            client = new Adapters_1.PublishedAppPowerAppsClient(appInfo);\r\n            authResources = client.getAppAuthResources();\r\n        }","duration":1},{"title":"the correct authentication resources should be returned","status":"pass","exception":{},"rawTitle":"the correct authentication resources should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"wf29s9ghhx-siugh7qhh1-jklnz0xlpc","code":"() => {\r\n            authResources.should.be.eql(appInfo.authResources);\r\n        }","duration":0}],"title":"Getting the app authentication resources","description":"","tags":[],"sequence":2,"id":"wf29s9ghhx-siugh7qhh1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling loadAppConnectionsAsync","status":"pass","exception":{},"rawTitle":"calling loadAppConnectionsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"wf29s9ghhx-z4srx7op5f-hf24m6zz8g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            client = new Adapters_1.PublishedAppPowerAppsClient(appInfo);\r\n            loadAppConnectionStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, \"_loadAppConnectionsAsync\").returns(WinJS.Promise.wrap());\r\n            showConsentDialogStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, Adapters_1.PublishedAppPowerAppsClient.prototype._showConsentDialogAsync.name).returns(WinJS.Promise.wrap());\r\n            yield client.loadAppConnectionsAsync();\r\n        })","duration":5},{"title":"the runtime _loadAppConnectionsAsync should be called","status":"pass","exception":{},"rawTitle":"the runtime _loadAppConnectionsAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"wf29s9ghhx-z4srx7op5f-jkjy7k52ww","code":"() => {\r\n            loadAppConnectionStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id is passed to runtime","status":"pass","exception":{},"rawTitle":"the app id is passed to runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"wf29s9ghhx-z4srx7op5f-rplg9wnzwt","code":"() => {\r\n            loadAppConnectionStub.firstCall.args[0].should.be.eql(appInfo.id);\r\n        }","duration":0},{"title":"the app name is passed to runtime","status":"pass","exception":{},"rawTitle":"the app name is passed to runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"wf29s9ghhx-z4srx7op5f-17oaoynv9k5","code":"() => {\r\n            loadAppConnectionStub.firstCall.args[1].should.be.eql(appInfo.name);\r\n        }","duration":0},{"title":"the app environment is passed to runtime","status":"pass","exception":{},"rawTitle":"the app environment is passed to runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"wf29s9ghhx-z4srx7op5f-lr1su086o0","code":"() => {\r\n            loadAppConnectionStub.firstCall.args[2].should.be.eql(appInfo.environment);\r\n        }","duration":0},{"title":"the app connection references is passed to runtime","status":"pass","exception":{},"rawTitle":"the app connection references is passed to runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"wf29s9ghhx-z4srx7op5f-14wno1ts0id","code":"() => {\r\n            // For some reason the should function doesn't work on these hash tables\r\n            HashTableUtility.areEqual(loadAppConnectionStub.firstCall.args[3], appInfo.connectionReferences, (t1, t2) => {\r\n                return (t1.id === t2.id) && (t1.displayName === t2.displayName) && (t1.iconUri === t2.iconUri);\r\n            }).should.be.eql(true);\r\n        }","duration":0},{"title":"show consent dialog is not called","status":"pass","exception":{},"rawTitle":"show consent dialog is not called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"wf29s9ghhx-z4srx7op5f-6ujrclyzfv","code":"() => {\r\n            // in the case of the app having connections, the runtime is responsible for calling the function\r\n            showConsentDialogStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"Loading the app connections for an app with connections","description":"","tags":[],"sequence":3,"id":"wf29s9ghhx-z4srx7op5f"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling loadAppConnectionsAsync","status":"pass","exception":{},"rawTitle":"calling loadAppConnectionsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"wf29s9ghhx-duj4fi85hf-hf24m6zz8g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime(RuntimeAppInfoGenerator.generateEmptyConnectionReferences());\r\n            client = new Adapters_1.PublishedAppPowerAppsClient(appInfo);\r\n            loadAppConnectionStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, \"_loadAppConnectionsAsync\").returns(WinJS.Promise.wrap());\r\n            updateAfterDisambiguationStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, \"_updateAppResourcesAfterDisambiguation\").returns(WinJS.Promise.wrap());\r\n            showConsentDialogStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, Adapters_1.PublishedAppPowerAppsClient.prototype._showConsentDialogAsync.name).returns(WinJS.Promise.wrap());\r\n            yield client.loadAppConnectionsAsync();\r\n        })","duration":3},{"title":"the runtime _updateAppResourcesAfterDisambiguation should be called","status":"pass","exception":{},"rawTitle":"the runtime _updateAppResourcesAfterDisambiguation should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"wf29s9ghhx-duj4fi85hf-v8ivk6gspp","code":"() => {\r\n            updateAfterDisambiguationStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the runtime _loadAppConnectionsAsync should not be called","status":"pass","exception":{},"rawTitle":"the runtime _loadAppConnectionsAsync should not be called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Loading the app connections for an app with no connections"}],"type":"Then","sequence":3,"id":"wf29s9ghhx-duj4fi85hf-jkllpxkm6o","code":"() => {\r\n            loadAppConnectionStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"show consent dialog is called","status":"pass","exception":{},"rawTitle":"show consent dialog is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"wf29s9ghhx-duj4fi85hf-10k34g31a8z","code":"() => {\r\n            // in the case of the app having no connections, the player is responsible for showing the consent dialog\r\n            showConsentDialogStub.callCount.should.be.eql(1);\r\n        }","duration":0}],"title":"Loading the app connections for an app with no connections","description":"","tags":[],"sequence":4,"id":"wf29s9ghhx-duj4fi85hf"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":12,"totalCount":12,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"showing the permissions screen and the user responds with 0","status":"pending","exception":{},"rawTitle":"showing the permissions screen and the user responds with <permissionResponse>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"a message is sent to display the permissions screen","status":"pending","exception":{},"rawTitle":"a message is sent to display the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the connection references are passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the connection references are passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"the app id is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app id is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the app display name is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app display name is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the capabilities is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the capabilities is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0}],"tables":[{"name":"","description":"","dataTable":[["permissionResponse"],["0"],["1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":6,"totalCount":6,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"showing the permissions screen and the user responds with 0","status":"pending","exception":{},"rawTitle":"showing the permissions screen and the user responds with <permissionResponse>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"a message is sent to display the permissions screen","status":"pending","exception":{},"rawTitle":"a message is sent to display the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the connection references are passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the connection references are passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"the app id is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app id is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the app display name is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app display name is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the capabilities is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the capabilities is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0}],"example":{"permissionResponse":0},"title":"Showing the permissions screen","sequence":1,"id":"wf29s9ghhx-ktknivg0nh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":6,"totalCount":6,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"showing the permissions screen and the user responds with 1","status":"pending","exception":{},"rawTitle":"showing the permissions screen and the user responds with <permissionResponse>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"a message is sent to display the permissions screen","status":"pending","exception":{},"rawTitle":"a message is sent to display the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the connection references are passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the connection references are passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"the app id is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app id is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the app display name is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the app display name is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the capabilities is passed to the permissions screen","status":"pending","exception":{},"rawTitle":"the capabilities is passed to the permissions screen","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0}],"example":{"permissionResponse":1},"title":"Showing the permissions screen","sequence":2,"id":"wf29s9ghhx-ktknivg0nh"}],"title":"Showing the permissions screen","description":"","tags":[]}],"title":"Provide access to the PowerAppsClient for the published app","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/PublishedAppPowerAppsClient.Spec.js","id":"wf29s9ghhx","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":81,"failedCount":0,"pendingCount":53,"totalCount":134,"totalRuleViolations":3,"duration":195,"passPercent":0.6044776119402985,"failedPercent":0,"pendingPercent":0.39552238805970147},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"loading the runtime","status":"pass","exception":{},"rawTitle":"loading the runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-lqwc975thc-12cqaooryp9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            runtimeAdapter = new Adapters_1.RuntimeAdapter();\r\n            clientRuntimeStub = sinon.stub(AppMagic.Runtime.Client.ClientRuntime.prototype, \"loadAsync\");\r\n            yield Promise.all([runtimeAdapter.loadAsync(), runtimeAdapter.loadAsync()]);\r\n        })","duration":4},{"title":"the client runtime should be loaded once","status":"pass","exception":{},"rawTitle":"the client runtime should be loaded once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-lqwc975thc-lqz0zhvtzk","code":"() => {\r\n            clientRuntimeStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the track metric function should be called with the correct method name","status":"pass","exception":{},"rawTitle":"the track metric function should be called with the correct method name","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-lqwc975thc-km683e5eql","code":"() => {\r\n            RuntimeMocks.trackMetricStub.trackMetricStub.firstCall.args[0].should.be.eql(Infrastructure_1.MetricEnums[Infrastructure_1.MetricEnums.LoadRuntime]);\r\n        }","duration":1}],"title":"Loading the runtime","description":"","tags":[],"sequence":1,"id":"he8q1bhckz-lqwc975thc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"logging in","status":"pass","exception":{},"rawTitle":"logging in","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-a5bag0nhkw-1b5musb0c3","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            logInAsyncStub = sinon.stub(AppMagic.Runtime.Client.UserServiceWithNotifications.prototype, \"logInAsync\");\r\n            let callbackStub = sinon.stub(EventObject.prototype, \"addListener\");\r\n            options = { userId: \"a@a.com\" };\r\n            let result = runtimeAdapter.logInAsync(options);\r\n            // This is to call the callback on the listener. We first need to swap off the thread to allow\r\n            // logInAsync to complete.\r\n            setTimeout(function () {\r\n                callbackStub.callArg(0);\r\n            }, 1);\r\n            // Now wait for the result before verification\r\n            yield result;\r\n        })","duration":20},{"title":"the user service should be called to log in","status":"pass","exception":{},"rawTitle":"the user service should be called to log in","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-a5bag0nhkw-16b3vg0d5lc","code":"() => {\r\n            logInAsyncStub.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"authentication options should be passed to log in","status":"pass","exception":{},"rawTitle":"authentication options should be passed to log in","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-a5bag0nhkw-16azt56s1cw","code":"() => {\r\n            logInAsyncStub.calledWith(options).should.be.eql(true);\r\n        }","duration":1}],"title":"A user logging in to PowerApps","description":"","tags":[],"sequence":2,"id":"he8q1bhckz-a5bag0nhkw"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":18,"totalCount":18,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"tables":[{"name":"","description":"","dataTable":[["forceRefresh","appType","runtimeAppType"],["false","15","0"],["false","1","1"],["false","4","2"],["true","15","0"],["true","1","1"],["true","4","2"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":false,"appType":15,"runtimeAppType":0},"title":"Getting the apps","sequence":1,"id":"he8q1bhckz-a52wuxwj40"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":false,"appType":1,"runtimeAppType":1},"title":"Getting the apps","sequence":2,"id":"he8q1bhckz-a52wuxwj40"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":false,"appType":4,"runtimeAppType":2},"title":"Getting the apps","sequence":3,"id":"he8q1bhckz-a52wuxwj40"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":true,"appType":15,"runtimeAppType":0},"title":"Getting the apps","sequence":4,"id":"he8q1bhckz-a52wuxwj40"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":true,"appType":1,"runtimeAppType":1},"title":"Getting the apps","sequence":5,"id":"he8q1bhckz-a52wuxwj40"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting the app list","status":"pending","exception":{},"rawTitle":"getting the app list","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"app manager get apps should be called once","status":"pending","exception":{},"rawTitle":"app manager get apps should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"app manager get apps should be called with the correct arguments","status":"pending","exception":{},"rawTitle":"app manager get apps should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"forceRefresh":true,"appType":4,"runtimeAppType":2},"title":"Getting the apps","sequence":6,"id":"he8q1bhckz-a52wuxwj40"}],"title":"Getting the apps","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":9,"totalCount":9,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting a specific app","status":"pending","exception":{},"rawTitle":"getting a specific app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"the power apps service is called to get the app","status":"pending","exception":{},"rawTitle":"the power apps service is called to get the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the app id to retrieve is passed to the method","status":"pending","exception":{},"rawTitle":"the app id to retrieve is passed to the method","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"whether to retrieve the package url and to expand the display name is passed to the method","status":"pending","exception":{},"rawTitle":"whether to retrieve the package url and to expand the display name is passed to the method","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the environment is switched","status":"pending","exception":{},"rawTitle":"the environment is switched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the environment is switched to the one the app uses","status":"pending","exception":{},"rawTitle":"the environment is switched to the one the app uses","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0},{"title":"the app info cache should be called","status":"pending","exception":{},"rawTitle":"the app info cache should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"code":"","duration":0},{"title":"the app info should be set in the app info cache","status":"pending","exception":{},"rawTitle":"the app info should be set in the app info cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"code":"","duration":0},{"title":"the correct result should be returned","status":"pending","exception":{},"rawTitle":"the correct result should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"code":"","duration":0}],"title":"Getting a specific app with packaging","description":"","tags":[],"sequence":4,"id":"he8q1bhckz-172tvw4z8cj"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":8,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting a specific app","status":"pending","exception":{},"rawTitle":"getting a specific app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"the power apps service is called to get the app","status":"pending","exception":{},"rawTitle":"the power apps service is called to get the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the app id to retrieve is passed to the method","status":"pending","exception":{},"rawTitle":"the app id to retrieve is passed to the method","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"whether to retrieve the package url and to expand the display name is passed to the method","status":"pending","exception":{},"rawTitle":"whether to retrieve the package url and to expand the display name is passed to the method","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the environment is not switched","status":"pending","exception":{},"rawTitle":"the environment is not switched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the app info cache should be called","status":"pending","exception":{},"rawTitle":"the app info cache should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0},{"title":"the app info should be set in the app info cache","status":"pending","exception":{},"rawTitle":"the app info should be set in the app info cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"code":"","duration":0},{"title":"the correct result should be returned","status":"pending","exception":{},"rawTitle":"the correct result should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"code":"","duration":0}],"title":"Getting a specific app without packaging","description":"","tags":[],"sequence":5,"id":"he8q1bhckz-q60mb2cbzk"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":6,"totalCount":6,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"getting a specific app fails","status":"pending","exception":{},"rawTitle":"getting a specific app fails","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"the power apps service is called to get the app","status":"pending","exception":{},"rawTitle":"the power apps service is called to get the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"the app id to retrieve is passed to the method","status":"pending","exception":{},"rawTitle":"the app id to retrieve is passed to the method","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0},{"title":"the environment is switched","status":"pending","exception":{},"rawTitle":"the environment is switched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"code":"","duration":0},{"title":"the app info cache should called","status":"pending","exception":{},"rawTitle":"the app info cache should called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"code":"","duration":0},{"title":"the correct result should be returned","status":"pending","exception":{},"rawTitle":"the correct result should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"code":"","duration":0}],"title":"Getting a specific app succeeds","description":"","tags":[],"sequence":6,"id":"he8q1bhckz-a54rt40dgw"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"creating a connection client"}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"creating a connection client","status":"pass","exception":{},"rawTitle":"creating a connection client","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-a56zbw6yuo-cn95zlmue8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            messageHandlerContext = new abus_1.MessageHandlerContext(bus);\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoGetStub = sinon.stub(Adapters_1.AppInfoCache.prototype, Adapters_1.AppInfoCache.prototype.get.name).returns(appInfo);\r\n            initializeConnectionClientStub = sinon.stub(Adapters_1.PublishedAppPowerAppsClient.prototype, \"initialize\");\r\n            connectionClient = runtimeAdapter.createPublishedAppPowerAppsClientAndInitialize(appId);\r\n        })","duration":7},{"title":"the app info is retrieved","status":"pass","exception":{},"rawTitle":"the app info is retrieved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-a56zbw6yuo-o53hxexff7","code":"() => {\r\n            appInfoGetStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the connection client is initialized","status":"pass","exception":{},"rawTitle":"the connection client is initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-a56zbw6yuo-12by21zpck5","code":"() => {\r\n            initializeConnectionClientStub.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the connection client is returned","status":"pass","exception":{},"rawTitle":"the connection client is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-a56zbw6yuo-2utycoel0t","code":"() => {\r\n            should.exist(connectionClient);\r\n        }","duration":0}],"title":"Creating a connection client for loading app connections","description":"","tags":[],"sequence":7,"id":"he8q1bhckz-a56zbw6yuo"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the user connections","status":"pass","exception":{},"rawTitle":"updating the user connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-xaaeuzbrm3-a57x4aljww","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app Id\";\r\n            updateConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, Adapters_1.ConnectionClient.prototype.updateAndRecommendAllConnectionsForAppAsync.name).returns(Promise.resolve());\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            const appResources = Utilities_1.ConnectionUtilities.createAppResources(appInfo);\r\n            getAppResourcesStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns(appResources);\r\n            connectionDisplayDataMap = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            yield runtimeAdapter.updateAndRecommendAllConnectionsForAppAsync(appId, connectionDisplayDataMap, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, false);\r\n        })","duration":13},{"title":"the app resources is retrieved by runtime","status":"pass","exception":{},"rawTitle":"the app resources is retrieved by runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-xaaeuzbrm3-lr0vsy8rkg","code":"() => {\r\n            getAppResourcesStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the connections are updated","status":"pass","exception":{},"rawTitle":"the connections are updated","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-xaaeuzbrm3-pwyh1hdfq5","code":"() => {\r\n            updateConnectionStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id and connection data to update is passed along","status":"pass","exception":{},"rawTitle":"the app id and connection data to update is passed along","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-xaaeuzbrm3-q62bhsa9hc","code":"() => {\r\n            updateConnectionStub.calledWith(appId, connectionDisplayDataMap, compareFunction, Mocks_1.TestConnectionDisplayData.convertConnectionDisplayData, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId);\r\n        }","duration":0}],"title":"Updating the user's connections for the app","description":"","tags":[],"sequence":8,"id":"he8q1bhckz-xaaeuzbrm3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the user connections","status":"pass","exception":{},"rawTitle":"updating the user connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-2rmu4ygk74-a57x4aljww","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app Id\";\r\n            connectionReferenceId = \"connection reference id\";\r\n            addedConnectionId = \"addedConnectionId\";\r\n            addConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, Adapters_1.ConnectionClient.prototype.addConnectionAsync.name).returns(Promise.resolve(addedConnectionId));\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appInfoGetStub = sinon.stub(Adapters_1.AppInfoCache.prototype, Adapters_1.AppInfoCache.prototype.get.name).returns(appInfo);\r\n            parameters = HashTableUtility.create();\r\n            parameters[\"param1\"] = \"abc\";\r\n            gatewayObjectId = \"gatewayObjectId\";\r\n            result = yield runtimeAdapter.addConnectionAsync(appId, connectionReferenceId, parameters, gatewayObjectId);\r\n        })","duration":7},{"title":"the app info is retrieved from the cache","status":"pass","exception":{},"rawTitle":"the app info is retrieved from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-2rmu4ygk74-lr14ku5rc0","code":"() => {\r\n            appInfoGetStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the connection is added","status":"pass","exception":{},"rawTitle":"the connection is added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-2rmu4ygk74-15vnnxj10y5","code":"() => {\r\n            addConnectionStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id is used to retrieve the app info from the cache","status":"pass","exception":{},"rawTitle":"the app id is used to retrieve the app info from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-2rmu4ygk74-h2gnc60qed","code":"() => {\r\n            appInfoGetStub.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the app info and the connection reference id is passed to be added","status":"pass","exception":{},"rawTitle":"the app info and the connection reference id is passed to be added","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-2rmu4ygk74-17dz68lv2wd","code":"() => {\r\n            addConnectionStub.calledWith(appInfo, connectionReferenceId, parameters, gatewayObjectId).should.be.eql(true);\r\n        }","duration":1},{"title":"the added connection id is returned","status":"pass","exception":{},"rawTitle":"the added connection id is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"he8q1bhckz-2rmu4ygk74-jkpmnyj5z4","code":"() => {\r\n            result.should.be.eql(addedConnectionId);\r\n        }","duration":0}],"title":"Adding the connection for an app","description":"","tags":[],"sequence":9,"id":"he8q1bhckz-2rmu4ygk74"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fixing the user connections","status":"pass","exception":{},"rawTitle":"fixing the user connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-4wlj4wiqb7-a57ii7vgsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app Id\";\r\n            connectionId = \"connection Id\";\r\n            fixConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, Adapters_1.ConnectionClient.prototype.fixConnectionAsync.name);\r\n            yield runtimeAdapter.fixConnectionAsync(appId, connectionId);\r\n        })","duration":8},{"title":"the connection is fixed","status":"pass","exception":{},"rawTitle":"the connection is fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-4wlj4wiqb7-md8ugyh8fx","code":"() => {\r\n            fixConnectionStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app info and the connection reference id is passed to be fixed","status":"pass","exception":{},"rawTitle":"the app info and the connection reference id is passed to be fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-4wlj4wiqb7-12bxvxtaupn","code":"() => {\r\n            fixConnectionStub.calledWith(appId, connectionId).should.be.eql(true);\r\n        }","duration":0}],"title":"Fixing the connection for an app","description":"","tags":[],"sequence":10,"id":"he8q1bhckz-4wlj4wiqb7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"updating the user connections","status":"pass","exception":{},"rawTitle":"updating the user connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-53oo3xrslh-a57x4aljww","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app Id\";\r\n            connectionsToBeSaved = new Map();\r\n            connectionsToBeSaved = RuntimeAppInfoGenerator.generateBaseIConnectionDisplayData(1);\r\n            saveConnectionStub = sinon.stub(Adapters_1.ConnectionClient.prototype, Adapters_1.ConnectionClient.prototype.saveConnectionsAsync.name).returns(Promise.resolve());\r\n            appInfo = RuntimeAppInfoGenerator.generateBaseAppInfoForRuntime();\r\n            appResources = Utilities_1.ConnectionUtilities.createAppResources(appInfo);\r\n            getAppResourcesStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns(appResources);\r\n            yield runtimeAdapter.saveConnectionsAsync(appId, connectionsToBeSaved, Mocks_1.TestConnectionDisplayData.getClientSelectedConnectionId, Mocks_1.TestConnectionDisplayData.showDatasets, Mocks_1.TestConnectionDisplayData.getDatasetRefId, Mocks_1.TestConnectionDisplayData.getUserSelectedDataset);\r\n        })","duration":11},{"title":"the app resources is retrieved by runtime","status":"pass","exception":{},"rawTitle":"the app resources is retrieved by runtime","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-53oo3xrslh-lr0vsy8rkg","code":"() => {\r\n            getAppResourcesStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the connection is saved","status":"pass","exception":{},"rawTitle":"the connection is saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-53oo3xrslh-2y2epnml0l","code":"() => {\r\n            saveConnectionStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id is used to retrieve the app info from the cache","status":"pass","exception":{},"rawTitle":"the app id is used to retrieve the app info from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-53oo3xrslh-h2gnc60qed","code":"() => {\r\n            getAppResourcesStub.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the app resources and the connections are passed to be saved","status":"pass","exception":{},"rawTitle":"the app resources and the connections are passed to be saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-53oo3xrslh-jkiph0arfk","code":"() => {\r\n            saveConnectionStub.calledWith(appResources, connectionsToBeSaved).should.be.eql(true);\r\n        }","duration":0}],"title":"Saving the connections for an app","description":"","tags":[],"sequence":11,"id":"he8q1bhckz-53oo3xrslh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"A constant value is returned for the test packager profiles","status":"pass","exception":{},"rawTitle":"A constant value is returned for the test packager profiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-he8vrnawhh-he8q2k1azv","code":"() => {\r\n            testProfiles = {\r\n                \"docServerTestProfiles\": [\r\n                    {\r\n                        \"name\": \"Prod\",\r\n                        \"settings\": {\r\n                            \"playerResourcesEndpoint\": \"https://paplayercdn.azureedge.net\",\r\n                            \"docServerEnvironment\": \"Production\"\r\n                        },\r\n                        \"variants\": [\r\n                            {\r\n                                \"name\": \"Global\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"US First Release\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://preview.create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"US\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://us.create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"Europe\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://eu.create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"Asia\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://as.create.powerapps.com\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            sendHttpJsonResponseAsyncStub = sinon.stub(AppMagic.Services.HttpClient.prototype, \"sendHttpJsonResponseAsync\")\r\n                .callsFake(() => WinJS.Promise.wrap(testProfiles));\r\n        }","duration":14},{"title":"Getting the test packager profiles","status":"pass","exception":{},"rawTitle":"Getting the test packager profiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-he8vrnawhh-a5bkcg9ie8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            returnValue = yield runtimeAdapter.getTestProfilesAsync();\r\n        })","duration":2},{"title":"the sendHttpJsonResponseAsync stub should be called once","status":"pass","exception":{},"rawTitle":"the sendHttpJsonResponseAsync stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-he8vrnawhh-lqzmmuaqhc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            sendHttpJsonResponseAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the returned value should match the expected value","status":"pass","exception":{},"rawTitle":"the returned value should match the expected value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-he8vrnawhh-v9b2wo6jzx","code":"() => {\r\n            returnValue.should.eql(testProfiles);\r\n        }","duration":0}],"title":"Get test packager profiles","description":"","tags":[],"sequence":12,"id":"he8q1bhckz-he8vrnawhh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":2,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Setting the active packager profile to default","status":"pass","exception":{},"rawTitle":"Setting the active packager profile to default","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-lqzbkx2j3k-oikd0513rn","code":"() => {\r\n            runtimeAdapter.setActivePackagerProfile(null, null, null);\r\n        }","duration":7},{"title":"the clear global overrides stub should be called once","status":"pass","exception":{},"rawTitle":"the clear global overrides stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-lqzbkx2j3k-me0v3tinfn","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            clearGlobalOverridesStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"Setting the active packager profile to a valid profile","status":"pass","exception":{},"rawTitle":"Setting the active packager profile to a valid profile","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Set the active packager profile"}],"type":"When","sequence":3,"id":"he8q1bhckz-lqzbkx2j3k-lqux9a6qps","code":"() => {\r\n            runtimeAdapter.setActivePackagerProfile(validProfile.docServerEndpoint, validProfile.docServerEnvironment, validProfile.playerResourcesEndpoint);\r\n        }","duration":2},{"title":"set global overrides stub should be called once","status":"pass","exception":{},"rawTitle":"set global overrides stub should be called once","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Set the active packager profile"}],"type":"Then","sequence":4,"id":"he8q1bhckz-lqzbkx2j3k-3awysqcq5f","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setGlobalOverridesStub.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Set the active packager profile","description":"","tags":[],"sequence":13,"id":"he8q1bhckz-lqzbkx2j3k"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":31,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Switching to the Prod environment","status":"pass","exception":{},"rawTitle":"Switching to the <environmentName> environment","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-cn4so9qn7k-abpwwry4kb","code":"() => {\r\n            setCurrentEnvironmentStub = sinon.stub(AppMagic.Services.Azure.Environment, \"setCurrentEnvironment\", () => true);\r\n            refreshIdentityServiceAsyncStub = sinon.stub(AppMagic.Runtime.Client.ClientRuntime.prototype, \"refreshIdentityServiceAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); }));\r\n            runtimeAdapter.switchToEnvironmentAsync(scenarioOutlineContext.example.environmentName);\r\n        }","duration":10},{"title":"the set current environment stub should be called once","status":"pass","exception":{},"rawTitle":"the set current environment stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-cn4so9qn7k-10kvbrt6763","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setCurrentEnvironmentStub.calledOnce.should.be.true;\r\n        }","duration":1},{"title":"the name of the environment to switch to should be Prod","status":"pass","exception":{},"rawTitle":"the name of the environment to switch to should be <environmentName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-cn4so9qn7k-jklzadmccg","code":"() => {\r\n            setCurrentEnvironmentStub.args[0][0].endpointTitle.should.eql(scenarioOutlineContext.example.environmentName);\r\n        }","duration":0},{"title":"refresh identity service async stub should be called once","status":"pass","exception":{},"rawTitle":"refresh identity service async stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-cn4so9qn7k-lr4njamp34","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            refreshIdentityServiceAsyncStub.calledOnce.should.be.true;\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["environmentName"],["Prod"],["TestInProd1"],["TestInProd2"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Switching to the Prod environment","status":"pass","exception":{},"rawTitle":"Switching to the <environmentName> environment","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-cn4so9qn7k-abpwwry4kb","code":"() => {\r\n            setCurrentEnvironmentStub = sinon.stub(AppMagic.Services.Azure.Environment, \"setCurrentEnvironment\", () => true);\r\n            refreshIdentityServiceAsyncStub = sinon.stub(AppMagic.Runtime.Client.ClientRuntime.prototype, \"refreshIdentityServiceAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); }));\r\n            runtimeAdapter.switchToEnvironmentAsync(scenarioOutlineContext.example.environmentName);\r\n        }","duration":10},{"title":"the set current environment stub should be called once","status":"pass","exception":{},"rawTitle":"the set current environment stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-cn4so9qn7k-10kvbrt6763","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setCurrentEnvironmentStub.calledOnce.should.be.true;\r\n        }","duration":1},{"title":"the name of the environment to switch to should be Prod","status":"pass","exception":{},"rawTitle":"the name of the environment to switch to should be <environmentName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-cn4so9qn7k-jklzadmccg","code":"() => {\r\n            setCurrentEnvironmentStub.args[0][0].endpointTitle.should.eql(scenarioOutlineContext.example.environmentName);\r\n        }","duration":0},{"title":"refresh identity service async stub should be called once","status":"pass","exception":{},"rawTitle":"refresh identity service async stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-cn4so9qn7k-lr4njamp34","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            refreshIdentityServiceAsyncStub.calledOnce.should.be.true;\r\n        }","duration":1}],"example":{"environmentName":"Prod"},"title":"Switch to a different environment","sequence":1,"id":"he8q1bhckz-cn4so9qn7k"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Switching to the TestInProd1 environment","status":"pass","exception":{},"rawTitle":"Switching to the <environmentName> environment","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-cn4so9qn7k-6s0ikt33h1","code":"() => {\r\n            setCurrentEnvironmentStub = sinon.stub(AppMagic.Services.Azure.Environment, \"setCurrentEnvironment\", () => true);\r\n            refreshIdentityServiceAsyncStub = sinon.stub(AppMagic.Runtime.Client.ClientRuntime.prototype, \"refreshIdentityServiceAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); }));\r\n            runtimeAdapter.switchToEnvironmentAsync(scenarioOutlineContext.example.environmentName);\r\n        }","duration":10},{"title":"the set current environment stub should be called once","status":"pass","exception":{},"rawTitle":"the set current environment stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-cn4so9qn7k-10kvbrt6763","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setCurrentEnvironmentStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the name of the environment to switch to should be TestInProd1","status":"pass","exception":{},"rawTitle":"the name of the environment to switch to should be <environmentName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-cn4so9qn7k-nbh9y49zgr","code":"() => {\r\n            setCurrentEnvironmentStub.args[0][0].endpointTitle.should.eql(scenarioOutlineContext.example.environmentName);\r\n        }","duration":0},{"title":"refresh identity service async stub should be called once","status":"pass","exception":{},"rawTitle":"refresh identity service async stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-cn4so9qn7k-lr4njamp34","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            refreshIdentityServiceAsyncStub.calledOnce.should.be.true;\r\n        }","duration":1}],"example":{"environmentName":"TestInProd1"},"title":"Switch to a different environment","sequence":2,"id":"he8q1bhckz-cn4so9qn7k"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Switching to the TestInProd2 environment","status":"pass","exception":{},"rawTitle":"Switching to the <environmentName> environment","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-cn4so9qn7k-6s0ikt33h1","code":"() => {\r\n            setCurrentEnvironmentStub = sinon.stub(AppMagic.Services.Azure.Environment, \"setCurrentEnvironment\", () => true);\r\n            refreshIdentityServiceAsyncStub = sinon.stub(AppMagic.Runtime.Client.ClientRuntime.prototype, \"refreshIdentityServiceAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(true); }));\r\n            runtimeAdapter.switchToEnvironmentAsync(scenarioOutlineContext.example.environmentName);\r\n        }","duration":7},{"title":"the set current environment stub should be called once","status":"pass","exception":{},"rawTitle":"the set current environment stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-cn4so9qn7k-10kvbrt6763","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setCurrentEnvironmentStub.calledOnce.should.be.true;\r\n        }","duration":1},{"title":"the name of the environment to switch to should be TestInProd2","status":"pass","exception":{},"rawTitle":"the name of the environment to switch to should be <environmentName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-cn4so9qn7k-nbv606wjij","code":"() => {\r\n            setCurrentEnvironmentStub.args[0][0].endpointTitle.should.eql(scenarioOutlineContext.example.environmentName);\r\n        }","duration":0},{"title":"refresh identity service async stub should be called once","status":"pass","exception":{},"rawTitle":"refresh identity service async stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-cn4so9qn7k-lr4njamp34","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            refreshIdentityServiceAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"example":{"environmentName":"TestInProd2"},"title":"Switch to a different environment","sequence":3,"id":"he8q1bhckz-cn4so9qn7k"}],"title":"Switch to a different environment","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"favoriting the app","status":"pass","exception":{},"rawTitle":"<scenarioName> the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-h2gh3zcgtn-2rpj2ohgbk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            favoriteMethodStub = sinon.stub(AppMagic.PowerApps.PowerAppsService.prototype, scenarioOutlineContext.example.methodNameToStub)\r\n                .callsFake(() => Promise.resolve());\r\n            yield runtimeAdapter.toggleAppFavoriteAsync(scenarioOutlineContext.example.appId, scenarioOutlineContext.example.setAsFavorite);\r\n        })","duration":8},{"title":"the stub for setAppAsFavoriteAsync should be called once","status":"pass","exception":{},"rawTitle":"the stub for <methodNameToStub> should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-h2gh3zcgtn-lqxq1ql6wg","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            favoriteMethodStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the appId 'xyz'","status":"pass","exception":{},"rawTitle":"it should be called with the appId '<appId>'","description":"","docString":"","values":["<appId>"],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-h2gh3zcgtn-ggrvsex75c","code":"() => {\r\n            favoriteMethodStub.calledWith(scenarioOutlineContext.example.appId).should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["scenarioName","appId","methodNameToStub","setAsFavorite"],["favoriting","xyz","setAppAsFavoriteAsync","true"],["unfavoriting","xyz","unsetAppAsFavoriteAsync","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"favoriting the app","status":"pass","exception":{},"rawTitle":"<scenarioName> the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-h2gh3zcgtn-2rpj2ohgbk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            favoriteMethodStub = sinon.stub(AppMagic.PowerApps.PowerAppsService.prototype, scenarioOutlineContext.example.methodNameToStub)\r\n                .callsFake(() => Promise.resolve());\r\n            yield runtimeAdapter.toggleAppFavoriteAsync(scenarioOutlineContext.example.appId, scenarioOutlineContext.example.setAsFavorite);\r\n        })","duration":8},{"title":"the stub for setAppAsFavoriteAsync should be called once","status":"pass","exception":{},"rawTitle":"the stub for <methodNameToStub> should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-h2gh3zcgtn-lqxq1ql6wg","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            favoriteMethodStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the appId 'xyz'","status":"pass","exception":{},"rawTitle":"it should be called with the appId '<appId>'","description":"","docString":"","values":["<appId>"],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-h2gh3zcgtn-ggrvsex75c","code":"() => {\r\n            favoriteMethodStub.calledWith(scenarioOutlineContext.example.appId).should.be.eql(true);\r\n        }","duration":0}],"example":{"scenarioName":"favoriting","appId":"xyz","methodNameToStub":"setAppAsFavoriteAsync","setAsFavorite":true},"title":"Toggle whether an app is a favorite","sequence":1,"id":"he8q1bhckz-h2gh3zcgtn"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"unfavoriting the app","status":"pass","exception":{},"rawTitle":"<scenarioName> the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-h2gh3zcgtn-8gb59910oj","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            favoriteMethodStub = sinon.stub(AppMagic.PowerApps.PowerAppsService.prototype, scenarioOutlineContext.example.methodNameToStub)\r\n                .callsFake(() => Promise.resolve());\r\n            yield runtimeAdapter.toggleAppFavoriteAsync(scenarioOutlineContext.example.appId, scenarioOutlineContext.example.setAsFavorite);\r\n        })","duration":7},{"title":"the stub for unsetAppAsFavoriteAsync should be called once","status":"pass","exception":{},"rawTitle":"the stub for <methodNameToStub> should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-h2gh3zcgtn-lr2kb5lzog","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            favoriteMethodStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the appId 'xyz'","status":"pass","exception":{},"rawTitle":"it should be called with the appId '<appId>'","description":"","docString":"","values":["<appId>"],"ruleViolations":[],"type":"and","sequence":3,"id":"he8q1bhckz-h2gh3zcgtn-ggrvsex75c","code":"() => {\r\n            favoriteMethodStub.calledWith(scenarioOutlineContext.example.appId).should.be.eql(true);\r\n        }","duration":0}],"example":{"scenarioName":"unfavoriting","appId":"xyz","methodNameToStub":"unsetAppAsFavoriteAsync","setAsFavorite":false},"title":"Toggle whether an app is a favorite","sequence":2,"id":"he8q1bhckz-h2gh3zcgtn"}],"title":"Toggle whether an app is a favorite","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Getting the test environment endpoints","status":"pass","exception":{},"rawTitle":"Getting the test environment endpoints","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"he8q1bhckz-z9hwh1esgz-a59dz5pqq8","code":"() => {\r\n            endpoints = runtimeAdapter.getEnvironmentEndpoints();\r\n        }","duration":5},{"title":"the expected endpoints should be returned","status":"pass","exception":{},"rawTitle":"the expected endpoints should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"he8q1bhckz-z9hwh1esgz-jklc4taxog","code":"() => {\r\n            const expectedValues = [\r\n                \"TestInProd1\",\r\n                \"TestInProd2\",\r\n                \"Prod\",\r\n            ];\r\n            endpoints.forEach((endpoint, index) => {\r\n                endpoint.should.be.eql(expectedValues[index]);\r\n            });\r\n        }","duration":0}],"title":"Get test environment endpoints","description":"","tags":[],"sequence":16,"id":"he8q1bhckz-z9hwh1esgz"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"saving user consents for an app","status":"pending","exception":{},"rawTitle":"saving user consents for an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pending","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"it should be called with the expected arguments","status":"pending","exception":{},"rawTitle":"it should be called with the expected arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"title":"Save the user consents for an app","description":"","tags":[],"sequence":17,"id":"he8q1bhckz-2rq0wcr35s"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":9,"totalCount":9,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"calling runtime API checkEnrollmentPlanAsync for an user with Active plan","status":"pending","exception":{},"rawTitle":"calling runtime API checkEnrollmentPlanAsync for an user with <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"checkPlansAsync stub should be called once","status":"pending","exception":{},"rawTitle":"checkPlansAsync stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"result should be true","status":"pending","exception":{},"rawTitle":"result should be <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"tables":[{"name":"","description":"","dataTable":[["userPlan","apiResult"],["Active","true"],["Non-Active","false"],["ExpiredPremium","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"calling runtime API checkEnrollmentPlanAsync for an user with Active plan","status":"pending","exception":{},"rawTitle":"calling runtime API checkEnrollmentPlanAsync for an user with <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"checkPlansAsync stub should be called once","status":"pending","exception":{},"rawTitle":"checkPlansAsync stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"result should be true","status":"pending","exception":{},"rawTitle":"result should be <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"userPlan":"Active","apiResult":true},"title":"Check user enrollment with AppMagic runtime","sequence":1,"id":"he8q1bhckz-15wfqev9iir"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"calling runtime API checkEnrollmentPlanAsync for an user with Non-Active plan","status":"pending","exception":{},"rawTitle":"calling runtime API checkEnrollmentPlanAsync for an user with <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"checkPlansAsync stub should be called once","status":"pending","exception":{},"rawTitle":"checkPlansAsync stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"result should be false","status":"pending","exception":{},"rawTitle":"result should be <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"userPlan":"Non-Active","apiResult":false},"title":"Check user enrollment with AppMagic runtime","sequence":2,"id":"he8q1bhckz-15wfqev9iir"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":0,"failedCount":0,"pendingCount":3,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"steps":[{"title":"calling runtime API checkEnrollmentPlanAsync for an user with ExpiredPremium plan","status":"pending","exception":{},"rawTitle":"calling runtime API checkEnrollmentPlanAsync for an user with <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"code":"","duration":0},{"title":"checkPlansAsync stub should be called once","status":"pending","exception":{},"rawTitle":"checkPlansAsync stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"code":"","duration":0},{"title":"result should be false","status":"pending","exception":{},"rawTitle":"result should be <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"code":"","duration":0}],"example":{"userPlan":"ExpiredPremium","apiResult":false},"title":"Check user enrollment with AppMagic runtime","sequence":3,"id":"he8q1bhckz-15wfqev9iir"}],"title":"Check user enrollment with AppMagic runtime","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the NPS service indicates the NPS prompt should happen","status":"pass","exception":{},"rawTitle":"the NPS service indicates the NPS prompt should happen","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-4uv8tdyczf-utf3l9ra1v","code":"() => {\r\n            shouldDisplayDialogAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"shouldDisplayDialogAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(true);\r\n            }));\r\n        }","duration":5},{"title":"checking if NPS is requested","status":"pass","exception":{},"rawTitle":"checking if NPS is requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-4uv8tdyczf-cvnpxde22l","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            checkNpsRequestedAsyncResult = yield runtimeAdapter.checkNpsRequestedAsync();\r\n        })","duration":0},{"title":"the runtime NPS display method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS display method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-4uv8tdyczf-r2i55m92wb","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            shouldDisplayDialogAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the value returned should be \"true\"","status":"pass","exception":{},"rawTitle":"the value returned should be \"true\"","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-4uv8tdyczf-lnhn252763","code":"() => {\r\n            checkNpsRequestedAsyncResult.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Check if the NPS dialog should be shown","description":"","tags":[],"sequence":19,"id":"he8q1bhckz-4uv8tdyczf"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":0,"duration":34,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the runtime NPS service is stubbed","status":"pass","exception":{},"rawTitle":"the runtime NPS service is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-hibynol54l-jkjtr9cudc","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"getDisplayUrlAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(expectedUrl);\r\n            }));\r\n        }","duration":6},{"title":"getting the NPS url for the ios platform with the following custom data null","status":"pass","exception":{},"rawTitle":"getting the NPS url for the <platform> platform with the following custom data <customData>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-hibynol54l-11l9euqd2j4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            actualUrl = yield runtimeAdapter.getNpsUrlAsync(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        })","duration":0},{"title":"the runtime NPS get url method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS get url method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-hibynol54l-ys8br3hwkr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getNpsUrlAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the getDisplayUrlAsync method should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the getDisplayUrlAsync method should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-hibynol54l-a53gzle3nk","code":"() => {\r\n            getNpsUrlAsyncStub.calledWith(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        }","duration":0},{"title":"the actual URL should match the expected URL","status":"pass","exception":{},"rawTitle":"the actual URL should match the expected URL","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-hibynol54l-5y2r3zvtij","code":"() => {\r\n            actualUrl.should.be.eql(expectedUrl);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["platform","customData"],["ios","null"],["android","null"],["windows","null"],["ios","{\"origin\":\"some origin\"}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the runtime NPS service is stubbed","status":"pass","exception":{},"rawTitle":"the runtime NPS service is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-hibynol54l-jkjtr9cudc","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"getDisplayUrlAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(expectedUrl);\r\n            }));\r\n        }","duration":6},{"title":"getting the NPS url for the ios platform with the following custom data null","status":"pass","exception":{},"rawTitle":"getting the NPS url for the <platform> platform with the following custom data <customData>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-hibynol54l-11l9euqd2j4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            actualUrl = yield runtimeAdapter.getNpsUrlAsync(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        })","duration":0},{"title":"the runtime NPS get url method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS get url method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-hibynol54l-ys8br3hwkr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getNpsUrlAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the getDisplayUrlAsync method should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the getDisplayUrlAsync method should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-hibynol54l-a53gzle3nk","code":"() => {\r\n            getNpsUrlAsyncStub.calledWith(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        }","duration":0},{"title":"the actual URL should match the expected URL","status":"pass","exception":{},"rawTitle":"the actual URL should match the expected URL","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-hibynol54l-5y2r3zvtij","code":"() => {\r\n            actualUrl.should.be.eql(expectedUrl);\r\n        }","duration":0}],"example":{"platform":"ios","customData":null},"title":"The NPS service should be called to get the NPS url","sequence":1,"id":"he8q1bhckz-hibynol54l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the runtime NPS service is stubbed","status":"pass","exception":{},"rawTitle":"the runtime NPS service is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-hibynol54l-jkjtr9cudc","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"getDisplayUrlAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(expectedUrl);\r\n            }));\r\n        }","duration":6},{"title":"getting the NPS url for the android platform with the following custom data null","status":"pass","exception":{},"rawTitle":"getting the NPS url for the <platform> platform with the following custom data <customData>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-hibynol54l-bwla2l7yaj","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            actualUrl = yield runtimeAdapter.getNpsUrlAsync(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        })","duration":0},{"title":"the runtime NPS get url method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS get url method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-hibynol54l-ys8br3hwkr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getNpsUrlAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the getDisplayUrlAsync method should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the getDisplayUrlAsync method should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-hibynol54l-a53gzle3nk","code":"() => {\r\n            getNpsUrlAsyncStub.calledWith(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        }","duration":0},{"title":"the actual URL should match the expected URL","status":"pass","exception":{},"rawTitle":"the actual URL should match the expected URL","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-hibynol54l-5y2r3zvtij","code":"() => {\r\n            actualUrl.should.be.eql(expectedUrl);\r\n        }","duration":0}],"example":{"platform":"android","customData":null},"title":"The NPS service should be called to get the NPS url","sequence":2,"id":"he8q1bhckz-hibynol54l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the runtime NPS service is stubbed","status":"pass","exception":{},"rawTitle":"the runtime NPS service is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-hibynol54l-jkjtr9cudc","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"getDisplayUrlAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(expectedUrl);\r\n            }));\r\n        }","duration":16},{"title":"getting the NPS url for the windows platform with the following custom data null","status":"pass","exception":{},"rawTitle":"getting the NPS url for the <platform> platform with the following custom data <customData>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-hibynol54l-11l53d6679s","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            actualUrl = yield runtimeAdapter.getNpsUrlAsync(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        })","duration":0},{"title":"the runtime NPS get url method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS get url method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-hibynol54l-ys8br3hwkr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getNpsUrlAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the getDisplayUrlAsync method should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the getDisplayUrlAsync method should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-hibynol54l-a53gzle3nk","code":"() => {\r\n            getNpsUrlAsyncStub.calledWith(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        }","duration":0},{"title":"the actual URL should match the expected URL","status":"pass","exception":{},"rawTitle":"the actual URL should match the expected URL","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-hibynol54l-5y2r3zvtij","code":"() => {\r\n            actualUrl.should.be.eql(expectedUrl);\r\n        }","duration":0}],"example":{"platform":"windows","customData":null},"title":"The NPS service should be called to get the NPS url","sequence":3,"id":"he8q1bhckz-hibynol54l"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the runtime NPS service is stubbed","status":"pass","exception":{},"rawTitle":"the runtime NPS service is stubbed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-hibynol54l-jkjtr9cudc","code":"() => {\r\n            getNpsUrlAsyncStub = sinon.stub(AppMagic.PowerApps.NpsService.prototype, \"getDisplayUrlAsync\")\r\n                .callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return Promise.resolve(expectedUrl);\r\n            }));\r\n        }","duration":5},{"title":"getting the NPS url for the ios platform with the following custom data [object Object]","status":"pass","exception":{},"rawTitle":"getting the NPS url for the <platform> platform with the following custom data <customData>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"he8q1bhckz-hibynol54l-rjjo3vvel1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            actualUrl = yield runtimeAdapter.getNpsUrlAsync(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        })","duration":1},{"title":"the runtime NPS get url method should be called","status":"pass","exception":{},"rawTitle":"the runtime NPS get url method should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"he8q1bhckz-hibynol54l-ys8br3hwkr","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getNpsUrlAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"the getDisplayUrlAsync method should be called with the correct arguments","status":"pass","exception":{},"rawTitle":"the getDisplayUrlAsync method should be called with the correct arguments","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"he8q1bhckz-hibynol54l-a53gzle3nk","code":"() => {\r\n            getNpsUrlAsyncStub.calledWith(scenarioOutlineContext.example.platform, scenarioOutlineContext.example.customData);\r\n        }","duration":0},{"title":"the actual URL should match the expected URL","status":"pass","exception":{},"rawTitle":"the actual URL should match the expected URL","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"he8q1bhckz-hibynol54l-5y2r3zvtij","code":"() => {\r\n            actualUrl.should.be.eql(expectedUrl);\r\n        }","duration":0}],"example":{"platform":"ios","customData":{"origin":"some origin"}},"title":"The NPS service should be called to get the NPS url","sequence":4,"id":"he8q1bhckz-hibynol54l"}],"title":"The NPS service should be called to get the NPS url","description":"","tags":[]}],"title":"Integration of various runtime components","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/RuntimeAdapter.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an instance of the runtime adapter","status":"pass","exception":{},"rawTitle":"an instance of the runtime adapter","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"he8q1bhckz-9pbsb4-7o0tl6fedc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            runtimeAdapter = new Adapters_1.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n        })","duration":5}],"title":"","description":"","tags":[],"id":"he8q1bhckz-9pbsb4"},"id":"he8q1bhckz","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":186,"failedCount":0,"pendingCount":0,"totalCount":186,"totalRuleViolations":0,"duration":109,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a GET HTTP request is sent that is expecting a text type","status":"pass","exception":{},"rawTitle":"a <method> HTTP request is sent that is expecting a <responseType> type","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-bqw0n9rc17-15wfpjzj5l7","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":9},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-bqw0n9rc17-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":2},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-bqw0n9rc17-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-bqw0n9rc17-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-bqw0n9rc17-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":0},{"title":"the data test data should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-bqw0n9rc17-bvlcpp332b","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-bqw0n9rc17-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-bqw0n9rc17-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentType","responseType","responseData","testHeader","location","status"],["GET","http://www.testurl.com/","textContentType","text","test data","testheaderdata2","testLocation","200"],["HEAD","http://www.testurl.com/","textContentType","text","","testheaderdata2","testLocation","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a GET HTTP request is sent that is expecting a text type","status":"pass","exception":{},"rawTitle":"a <method> HTTP request is sent that is expecting a <responseType> type","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-bqw0n9rc17-15wfpjzj5l7","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":9},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-bqw0n9rc17-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":2},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-bqw0n9rc17-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-bqw0n9rc17-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-bqw0n9rc17-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":0},{"title":"the data test data should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-bqw0n9rc17-bvlcpp332b","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-bqw0n9rc17-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-bqw0n9rc17-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","contentType":"textContentType","responseType":"text","responseData":"test data","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a GET or HEAD HTTP request for a text response type","sequence":1,"id":"lr4kmmml4w-bqw0n9rc17"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a HEAD HTTP request is sent that is expecting a text type","status":"pass","exception":{},"rawTitle":"a <method> HTTP request is sent that is expecting a <responseType> type","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-bqw0n9rc17-lqv9wq58m8","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-bqw0n9rc17-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-bqw0n9rc17-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-bqw0n9rc17-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-bqw0n9rc17-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":0},{"title":"the data  should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-bqw0n9rc17-cn4tpzj2io","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-bqw0n9rc17-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-bqw0n9rc17-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"HEAD","url":"http://www.testurl.com/","contentType":"textContentType","responseType":"text","responseData":"","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a GET or HEAD HTTP request for a text response type","sequence":2,"id":"lr4kmmml4w-bqw0n9rc17"}],"title":"When sending a GET or HEAD HTTP request for a text response type","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and response type is blob","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-lqyxh546xs-fafihh5934","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"base64\",\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-lqyxh546xs-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, blob is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-lqyxh546xs-jkqzlm6qrk","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-lqyxh546xs-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-lqyxh546xs-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":1},{"title":"the response text should be undefined","status":"pass","exception":{},"rawTitle":"the response text should be undefined","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-lqyxh546xs-f9tkrmuklx","code":"() => {\r\n            (httpResponse.responseText === undefined).should.eql(true);\r\n        }","duration":1},{"title":"the response should be data:blobContentType;blob,testblobdata","status":"pass","exception":{},"rawTitle":"the response should be <response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-lqyxh546xs-o2sjthom1f","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.response);\r\n        }","duration":1},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-lqyxh546xs-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"lr4kmmml4w-lqyxh546xs-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentType","responseType","responseData","response","testHeader","location","status"],["GET","http://www.testurl.com/","blobContentType","blob","testblobdata","data:blobContentType;blob,testblobdata","testheaderdata2","testLocation","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and response type is blob","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-lqyxh546xs-fafihh5934","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"base64\",\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-lqyxh546xs-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, blob is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-lqyxh546xs-jkqzlm6qrk","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-lqyxh546xs-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-lqyxh546xs-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":1},{"title":"the response text should be undefined","status":"pass","exception":{},"rawTitle":"the response text should be undefined","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-lqyxh546xs-f9tkrmuklx","code":"() => {\r\n            (httpResponse.responseText === undefined).should.eql(true);\r\n        }","duration":1},{"title":"the response should be data:blobContentType;blob,testblobdata","status":"pass","exception":{},"rawTitle":"the response should be <response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-lqyxh546xs-o2sjthom1f","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.response);\r\n        }","duration":1},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-lqyxh546xs-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"lr4kmmml4w-lqyxh546xs-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","contentType":"blobContentType","responseType":"blob","responseData":"testblobdata","response":"data:blobContentType;blob,testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a GET HTTP request for a blob response type","sequence":1,"id":"lr4kmmml4w-lqyxh546xs"}],"title":"When sending a GET HTTP request for a blob response type","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and response type is arraybuffer","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4ngtmhcukj-s0hgtjjpwb","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"base64\",\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":2},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4ngtmhcukj-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, arraybuffer, is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType>, is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4ngtmhcukj-12bxxhg49ln","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-4ngtmhcukj-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-4ngtmhcukj-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":0},{"title":"the response text should be undefined","status":"pass","exception":{},"rawTitle":"the response text should be undefined","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-4ngtmhcukj-f9tkrmuklx","code":"() => {\r\n            (httpResponse.responseText === undefined).should.eql(true);\r\n        }","duration":0},{"title":"the response should be an array buffer","status":"pass","exception":{},"rawTitle":"the response should be an array buffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-4ngtmhcukj-7o1ggddbz4","code":"() => {\r\n            let isArrayBuffer = httpResponse.response instanceof ArrayBuffer;\r\n            isArrayBuffer.should.be.eql(true);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-4ngtmhcukj-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"lr4kmmml4w-4ngtmhcukj-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentType","responseType","responseData","testHeader","location","status"],["GET","http://www.testurl.com/","arrayBufferContentType","arraybuffer","dGVzdGRhdGE=","testheaderdata2","testLocation","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and response type is arraybuffer","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4ngtmhcukj-s0hgtjjpwb","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"base64\",\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":2},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4ngtmhcukj-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, arraybuffer, is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType>, is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4ngtmhcukj-12bxxhg49ln","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-4ngtmhcukj-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-4ngtmhcukj-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                null\r\n            ]);\r\n        }","duration":0},{"title":"the response text should be undefined","status":"pass","exception":{},"rawTitle":"the response text should be undefined","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-4ngtmhcukj-f9tkrmuklx","code":"() => {\r\n            (httpResponse.responseText === undefined).should.eql(true);\r\n        }","duration":0},{"title":"the response should be an array buffer","status":"pass","exception":{},"rawTitle":"the response should be an array buffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-4ngtmhcukj-7o1ggddbz4","code":"() => {\r\n            let isArrayBuffer = httpResponse.response instanceof ArrayBuffer;\r\n            isArrayBuffer.should.be.eql(true);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-4ngtmhcukj-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"lr4kmmml4w-4ngtmhcukj-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","contentType":"arrayBufferContentType","responseType":"arraybuffer","responseData":"dGVzdGRhdGE=","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a GET HTTP request for a arraybuffer response type","sequence":1,"id":"lr4kmmml4w-4ngtmhcukj"}],"title":"When sending a GET HTTP request for a arraybuffer response type","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-on6tcnwax9-1694luk9xot","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestBody = new Blob([scenarioOutlineContext.example.requestBody]);\r\n            requestParameters = {\r\n                bodyData: requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-on6tcnwax9-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-on6tcnwax9-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-on6tcnwax9-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-on6tcnwax9-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-on6tcnwax9-cna7yvdrw0","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-on6tcnwax9-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-on6tcnwax9-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentType","requestBody","responseType","responseData","testHeader","location","status"],["POST","http://www.testurl.com/","blobContentType","testRequestBodyData","text","testblobdata","testheaderdata2","testLocation","200"],["PUT","http://www.testurl.com/","blobContentType","testRequestBodyData","text","testblobdata","testheaderdata2","testLocation","200"],["DELETE","http://www.testurl.com/","blobContentType","testRequestBodyData","text","testblobdata","testheaderdata2","testLocation","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-on6tcnwax9-1694luk9xot","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestBody = new Blob([scenarioOutlineContext.example.requestBody]);\r\n            requestParameters = {\r\n                bodyData: requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-on6tcnwax9-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-on6tcnwax9-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-on6tcnwax9-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-on6tcnwax9-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-on6tcnwax9-cna7yvdrw0","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-on6tcnwax9-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-on6tcnwax9-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"POST","url":"http://www.testurl.com/","contentType":"blobContentType","requestBody":"testRequestBodyData","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with a Blob as the body","sequence":1,"id":"lr4kmmml4w-on6tcnwax9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is PUT and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-on6tcnwax9-k0fffkxwk5","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestBody = new Blob([scenarioOutlineContext.example.requestBody]);\r\n            requestParameters = {\r\n                bodyData: requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-on6tcnwax9-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-on6tcnwax9-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-on6tcnwax9-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-on6tcnwax9-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-on6tcnwax9-cna7yvdrw0","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-on6tcnwax9-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-on6tcnwax9-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"PUT","url":"http://www.testurl.com/","contentType":"blobContentType","requestBody":"testRequestBodyData","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with a Blob as the body","sequence":2,"id":"lr4kmmml4w-on6tcnwax9"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is DELETE and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-on6tcnwax9-505j94yaiz","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestBody = new Blob([scenarioOutlineContext.example.requestBody]);\r\n            requestParameters = {\r\n                bodyData: requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":0},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-on6tcnwax9-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-on6tcnwax9-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-on6tcnwax9-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-on6tcnwax9-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-on6tcnwax9-cna7yvdrw0","code":"() => {\r\n            httpResponse.response.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-on6tcnwax9-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-on6tcnwax9-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"DELETE","url":"http://www.testurl.com/","contentType":"blobContentType","requestBody":"testRequestBodyData","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with a Blob as the body","sequence":3,"id":"lr4kmmml4w-on6tcnwax9"}],"title":"When sending a request with a Blob as the body","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-l3h0f8ll7f-1694luk9xot","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                bodyData: scenarioOutlineContext.example.requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-l3h0f8ll7f-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-l3h0f8ll7f-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-l3h0f8ll7f-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-l3h0f8ll7f-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                scenarioOutlineContext.example.requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-l3h0f8ll7f-cna7yvdrw0","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-l3h0f8ll7f-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-l3h0f8ll7f-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentType","requestBody","responseType","responseData","testHeader","location","status"],["POST","http://www.testurl.com/","textContentType","testRequestBodyDataBrowserBlob","text","testblobdata","testheaderdata2","testLocation","200"],["PUT","http://www.testurl.com/","textContentType","testRequestBodyDataBrowserBlob","text","testblobdata","testheaderdata2","testLocation","200"],["DELETE","http://www.testurl.com/","textContentType","testRequestBodyDataBrowserBlob","text","testblobdata","testheaderdata2","testLocation","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-l3h0f8ll7f-1694luk9xot","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                bodyData: scenarioOutlineContext.example.requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-l3h0f8ll7f-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-l3h0f8ll7f-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-l3h0f8ll7f-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-l3h0f8ll7f-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                scenarioOutlineContext.example.requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-l3h0f8ll7f-cna7yvdrw0","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-l3h0f8ll7f-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-l3h0f8ll7f-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":1}],"example":{"method":"POST","url":"http://www.testurl.com/","contentType":"textContentType","requestBody":"testRequestBodyDataBrowserBlob","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with text content in the body","sequence":1,"id":"lr4kmmml4w-l3h0f8ll7f"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is PUT and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-l3h0f8ll7f-k0fffkxwk5","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                bodyData: scenarioOutlineContext.example.requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":0},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-l3h0f8ll7f-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-l3h0f8ll7f-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-l3h0f8ll7f-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-l3h0f8ll7f-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                scenarioOutlineContext.example.requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-l3h0f8ll7f-cna7yvdrw0","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":1},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-l3h0f8ll7f-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-l3h0f8ll7f-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"example":{"method":"PUT","url":"http://www.testurl.com/","contentType":"textContentType","requestBody":"testRequestBodyDataBrowserBlob","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with text content in the body","sequence":2,"id":"lr4kmmml4w-l3h0f8ll7f"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is DELETE and response type is text","status":"pass","exception":{},"rawTitle":"method is <method> and response type is <responseType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-l3h0f8ll7f-505j94yaiz","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": scenarioOutlineContext.example.contentType,\r\n                        \"test-header\": scenarioOutlineContext.example.testHeader,\r\n                        \"location\": scenarioOutlineContext.example.location,\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.status\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                bodyData: scenarioOutlineContext.example.requestBody,\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-l3h0f8ll7f-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"the expected response type, text is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-l3h0f8ll7f-kldu9aaumb","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.responseType);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-l3h0f8ll7f-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-l3h0f8ll7f-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                scenarioOutlineContext.example.method,\r\n                scenarioOutlineContext.example.url,\r\n                requestParameters.headers,\r\n                scenarioOutlineContext.example.requestBody\r\n            ]);\r\n        }","duration":0},{"title":"the data testblobdata should be returned as responseText","status":"pass","exception":{},"rawTitle":"the data <responseData> should be returned as responseText","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-l3h0f8ll7f-cna7yvdrw0","code":"() => {\r\n            httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-l3h0f8ll7f-16b7krlq90g","code":"() => {\r\n            Object.keys(httpResponse.headers).length.should.eql(Object.keys(response.respInfo.headers).length);\r\n            httpResponse.headers[\"Content-Type\"].should.eql(scenarioOutlineContext.example.contentType);\r\n            httpResponse.headers[\"Location\"].should.eql(scenarioOutlineContext.example.location);\r\n            httpResponse.headers[\"test-header\"].should.eql(scenarioOutlineContext.example.testHeader);\r\n        }","duration":0},{"title":"response status code 200 should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-l3h0f8ll7f-jkk89ngvr4","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":1}],"example":{"method":"DELETE","url":"http://www.testurl.com/","contentType":"textContentType","requestBody":"testRequestBodyDataBrowserBlob","responseType":"text","responseData":"testblobdata","testHeader":"testheaderdata2","location":"testLocation","status":200},"title":"When sending a request with text content in the body","sequence":3,"id":"lr4kmmml4w-l3h0f8ll7f"}],"title":"When sending a request with text content in the body","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                },\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type: <responseType> and the expected response is returned","status":"pass","exception":{},"rawTitle":"the expected response type: <responseType> and the expected response is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3-jkoldwt6i8","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n            }\r\n            else {\r\n                (httpResponse.responseText === undefined).should.eql(true);\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","responseStatus","requestResponseType","responseInfoType","responseData"],["GET","http://www.testurl.com/","200","json","utf8","{ a: \"b\" }"],["GET","http://www.testurl.com/","200","text","utf8","textdata"],["GET","http://www.testurl.com/","200","blob","utf8","blobdata"],["GET","http://www.testurl.com/","200","arraybuffer","utf8","arrbufdata"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                },\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type: <responseType> and the expected response is returned","status":"pass","exception":{},"rawTitle":"the expected response type: <responseType> and the expected response is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3-jkoldwt6i8","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n            }\r\n            else {\r\n                (httpResponse.responseText === undefined).should.eql(true);\r\n            }\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"json","responseInfoType":"utf8","responseData":"{ a: \"b\" }"},"title":"When sending a request and get 2xx response, responseText is only set for response type text.","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                },\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"the expected response type: <responseType> and the expected response is returned","status":"pass","exception":{},"rawTitle":"the expected response type: <responseType> and the expected response is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3-jkoldwt6i8","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n            }\r\n            else {\r\n                (httpResponse.responseText === undefined).should.eql(true);\r\n            }\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"text","responseInfoType":"utf8","responseData":"textdata"},"title":"When sending a request and get 2xx response, responseText is only set for response type text.","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                },\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":8},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type: <responseType> and the expected response is returned","status":"pass","exception":{},"rawTitle":"the expected response type: <responseType> and the expected response is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3-jkoldwt6i8","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n            }\r\n            else {\r\n                (httpResponse.responseText === undefined).should.eql(true);\r\n            }\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"blob","responseInfoType":"utf8","responseData":"blobdata"},"title":"When sending a request and get 2xx response, responseText is only set for response type text.","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-4zmc6et5c3-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                },\r\n                base64() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-4zmc6et5c3-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type: <responseType> and the expected response is returned","status":"pass","exception":{},"rawTitle":"the expected response type: <responseType> and the expected response is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-4zmc6et5c3-jkoldwt6i8","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(scenarioOutlineContext.example.responseData);\r\n            }\r\n            else {\r\n                (httpResponse.responseText === undefined).should.eql(true);\r\n            }\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"arraybuffer","responseInfoType":"utf8","responseData":"arrbufdata"},"title":"When sending a request and get 2xx response, responseText is only set for response type text.","sequence":4,"id":"lr4kmmml4w-4zmc6et5c3"}],"title":"When sending a request and get 2xx response, responseText is only set for response type text.","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-93iume537v-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-93iume537v-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":2},{"title":"the expected response type, <responseType> and expected response is returned,","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> and expected response is returned,","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-93iume537v-16s2vzl6yoj","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(\"{\\\"displayName\\\":\\\"اختبار التطبيق\\\"}\");\r\n            }\r\n            else {\r\n                httpResponse.response.should.eql({ displayName: \"اختبار التطبيق\" });\r\n            }\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["method","url","responseStatus","requestResponseType","responseInfoType","responseData"],["GET","http://www.testurl.com/","200","json","base64","eyJkaXNwbGF5TmFtZSI6Itin2K7Yqtio2KfYsSDYp9mE2KrYt9io2YrZgiJ9"],["GET","http://www.testurl.com/","200","text","base64","eyJkaXNwbGF5TmFtZSI6Itin2K7Yqtio2KfYsSDYp9mE2KrYt9io2YrZgiJ9"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-93iume537v-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-93iume537v-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":2},{"title":"the expected response type, <responseType> and expected response is returned,","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> and expected response is returned,","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-93iume537v-16s2vzl6yoj","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(\"{\\\"displayName\\\":\\\"اختبار التطبيق\\\"}\");\r\n            }\r\n            else {\r\n                httpResponse.response.should.eql({ displayName: \"اختبار التطبيق\" });\r\n            }\r\n        }","duration":1}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"json","responseInfoType":"base64","responseData":"eyJkaXNwbGF5TmFtZSI6Itin2K7Yqtio2KfYsSDYp9mE2KrYt9io2YrZgiJ9"},"title":"When sending a request and get 2xx response, can handle unicode text.","sequence":1,"id":"lr4kmmml4w-93iume537v"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-93iume537v-hzje0mm4lx","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                json() {\r\n                    return this.data;\r\n                },\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-93iume537v-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, <responseType> and expected response is returned,","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> and expected response is returned,","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-93iume537v-16s2vzl6yoj","code":"() => {\r\n            httpResponse.responseType.should.eql(scenarioOutlineContext.example.requestResponseType);\r\n            if (scenarioOutlineContext.example.requestResponseType === AppMagic.Services.ResponseTypes.Text) {\r\n                httpResponse.responseText.should.eql(\"{\\\"displayName\\\":\\\"اختبار التطبيق\\\"}\");\r\n            }\r\n            else {\r\n                httpResponse.response.should.eql({ displayName: \"اختبار التطبيق\" });\r\n            }\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":200,"requestResponseType":"text","responseInfoType":"base64","responseData":"eyJkaXNwbGF5TmFtZSI6Itin2K7Yqtio2KfYsSDYp9mE2KrYt9io2YrZgiJ9"},"title":"When sending a request and get 2xx response, can handle unicode text.","sequence":2,"id":"lr4kmmml4w-93iume537v"}],"title":"When sending a request and get 2xx response, can handle unicode text.","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":36,"failedCount":0,"pendingCount":0,"totalCount":36,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":1},{"title":"requestParameters setup with known body 'binaryBodyAppRelativeFile'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-ggtycqtnj4","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["requestBodyName","headers","expectedContentTypeHeader","expectedFetchBodyArg"],["binaryBodyAppRelativeFile","{}","\"image/png\"","\"RNFetchBlob-file://testApp/0/TestAssets/SampleWithUnicodeChars.json\""],["binaryBodyBase64","{}","\"image/png;base64\"","\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\""],["binaryBodyArrayBuffer","{}","\"image/png;base64\"","\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\""],["binaryBodyBlobOfPlainText","{}","\"text/plain;base64\"","\"text: binaryBodyBlobOfPlainText\""],["binaryBodyBlobOfJson","{}","\"application/json;base64\"","\"{\"prop1\":\"json: binaryBodyBlobOfJson\"}\""]]},{"name":"","description":"","dataTable":[["requestBodyName","headers","expectedContentTypeHeader","expectedFetchBodyArg"],["arrayBuffer","{}","\"application/octet-stream;base64\"","\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\""]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":1},{"title":"requestParameters setup with known body 'binaryBodyAppRelativeFile'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-ggtycqtnj4","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"binaryBodyAppRelativeFile","headers":{},"expectedContentTypeHeader":"image/png","expectedFetchBodyArg":"RNFetchBlob-file://testApp/0/TestAssets/SampleWithUnicodeChars.json"},"title":"When sending a request with a PABinary body","sequence":1,"id":"lr4kmmml4w-185loea6l7h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":0},{"title":"requestParameters setup with known body 'binaryBodyBase64'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-ggqa6vkxuo","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":1},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"binaryBodyBase64","headers":{},"expectedContentTypeHeader":"image/png;base64","expectedFetchBodyArg":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="},"title":"When sending a request with a PABinary body","sequence":2,"id":"lr4kmmml4w-185loea6l7h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":1},{"title":"requestParameters setup with known body 'binaryBodyArrayBuffer'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-ggq1u2s47k","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"binaryBodyArrayBuffer","headers":{},"expectedContentTypeHeader":"image/png;base64","expectedFetchBodyArg":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="},"title":"When sending a request with a PABinary body","sequence":3,"id":"lr4kmmml4w-185loea6l7h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":0},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":0},{"title":"requestParameters setup with known body 'binaryBodyBlobOfPlainText'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-ggrxevkn6o","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"binaryBodyBlobOfPlainText","headers":{},"expectedContentTypeHeader":"text/plain;base64","expectedFetchBodyArg":"text: binaryBodyBlobOfPlainText"},"title":"When sending a request with a PABinary body","sequence":4,"id":"lr4kmmml4w-185loea6l7h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":1},{"title":"requestParameters setup with known body 'binaryBodyBlobOfJson'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-lg76v38ov9","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"binaryBodyBlobOfJson","headers":{},"expectedContentTypeHeader":"application/json;base64","expectedFetchBodyArg":"\"{\"prop1\":\"json: binaryBodyBlobOfJson\"}\""},"title":"When sending a request with a PABinary body","sequence":5,"id":"lr4kmmml4w-185loea6l7h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setup data store for accessing the app's installedAppPath","status":"pass","exception":{},"rawTitle":"setup data store for accessing the app's installedAppPath","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-185loea6l7h-mgfbbz6vfh","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            const store = Utilities_1.createMockStore(() => {\r\n                const state = {\r\n                    PublishedAppHostState: {\r\n                        publishedAppHostRequiredInfo: {\r\n                            installedAppPath: \"testApp/0\"\r\n                        },\r\n                    },\r\n                };\r\n                return state;\r\n            });\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            // FileReader is not supported in Node, so just stub out the conversion\r\n            convertBlobToBase64AsyncStub = sinon.stub(Utilities_2.ReactNativeTypesConversionUtilities.prototype, Utilities_2.ReactNativeTypesConversionUtilities.prototype.convertBlobToBase64Async.name).returns(Promise.resolve(scenarioOutlineContext.example.expectedFetchBodyArg));\r\n        }","duration":1},{"title":"RNFetchBlob.fetch is stubbed to return a no-body response","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch is stubbed to return a no-body response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"lr4kmmml4w-185loea6l7h-lqvqp5kpc0","code":"() => {\r\n            response = {\r\n                data: \"\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n        }","duration":0},{"title":"requestParameters setup with known body 'arrayBuffer'","status":"pass","exception":{},"rawTitle":"requestParameters setup with known body '<requestBodyName>'","description":"","docString":"","values":["<requestBodyName>"],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-185loea6l7h-lg70q7dmsz","code":"() => {\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.requestBodyName);\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfPlainText.contentType, \"text/plain\");\r\n            DebugContracts.assertStrictEqual(MockData.binaryBodyBlobOfJson.contentType, \"application/json\");\r\n            const requestBody = MockImage[scenarioOutlineContext.example.requestBodyName] ||\r\n                MockData[scenarioOutlineContext.example.requestBodyName];\r\n            DebugContracts.assert(requestBody instanceof Core.PABinary || requestBody instanceof ArrayBuffer);\r\n            requestParameters = {\r\n                method: \"POST\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: \"text\",\r\n            };\r\n            if (scenarioOutlineContext.example.headers)\r\n                requestParameters.headers = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            if (requestBody)\r\n                requestParameters.bodyData = requestBody;\r\n        }","duration":0},{"title":"sendHttpAsync is called with the requestParameters","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called with the requestParameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"lr4kmmml4w-185loea6l7h-14gd7he4u3f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":0},{"title":"RNFetchBlob.fetch should have been called with the correct parameters","status":"pass","exception":{},"rawTitle":"RNFetchBlob.fetch should have been called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"lr4kmmml4w-185loea6l7h-12oie992dk3","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n            const expectedHeaders = HashTableUtility.create(scenarioOutlineContext.example.headers);\r\n            expectedHeaders[\"Accept-Language\"] = Localization_1.localization.supportedDeviceLocale;\r\n            // The pipeline should explicitly set the 'Content-Type' header from the PABinary body so that\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedContentTypeHeader);\r\n            expectedHeaders[\"Content-Type\"] = scenarioOutlineContext.example.expectedContentTypeHeader;\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\"POST\", \"http://www.testurl.com/\", expectedHeaders, scenarioOutlineContext.example.expectedFetchBodyArg]);\r\n        }","duration":0},{"title":"our stubbed response should have been successful","status":"pass","exception":{},"rawTitle":"our stubbed response should have been successful","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-185loea6l7h-1624zrldhhf","code":"() => {\r\n            httpResponse.status.should.eql(200);\r\n            httpResponse.responseType.should.eql(\"text\");\r\n        }","duration":0}],"example":{"requestBodyName":"arrayBuffer","headers":{},"expectedContentTypeHeader":"application/octet-stream;base64","expectedFetchBodyArg":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="},"title":"When sending a request with a PABinary body","sequence":6,"id":"lr4kmmml4w-185loea6l7h"}],"title":"When sending a request with a PABinary body","description":"- Make sure we explicitly set the Content-Type header according to whatever is in the PABinary.contentType.\n- Support the sourceTypes currently supported by the SendHttpPipelinePlugin v1.\n\nWhen the body is an ArrayBuffer, and no default Content-Type, the base content type will get set to an octet-stream.","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and status 300","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsfc8tin4-lj918q5rwd","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsfc8tin4-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":3},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsfc8tin4-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error message should be the same as the responsebody","status":"pass","exception":{},"rawTitle":"error message should be the same as the responsebody","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsfc8tin4-agc5yih30j","code":"() => {\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsfc8tin4-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwsfc8tin4-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["method","url","responseStatus","requestResponseType","responseInfoType","responseData"],["POST","http://www.testurl.com/","300","blob","utf8","errrorInfoText"],["PUT","http://www.testurl.com/","100","arraybuffer","utf8","errrorInfoText"],["DELETE","http://www.testurl.com/","500","text","utf8","errrorInfoText"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is POST and status 300","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsfc8tin4-lj918q5rwd","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsfc8tin4-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":3},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsfc8tin4-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error message should be the same as the responsebody","status":"pass","exception":{},"rawTitle":"error message should be the same as the responsebody","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsfc8tin4-agc5yih30j","code":"() => {\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsfc8tin4-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwsfc8tin4-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":1}],"example":{"method":"POST","url":"http://www.testurl.com/","responseStatus":300,"requestResponseType":"blob","responseInfoType":"utf8","responseData":"errrorInfoText"},"title":"When sending a request and get non 2xx repsonse, the sendHttpPipeline should throw errors with the right format.","sequence":1,"id":"lr4kmmml4w-mwsfc8tin4"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is PUT and status 100","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsfc8tin4-oy2fohhbeo","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsfc8tin4-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":1},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsfc8tin4-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error message should be the same as the responsebody","status":"pass","exception":{},"rawTitle":"error message should be the same as the responsebody","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsfc8tin4-agc5yih30j","code":"() => {\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsfc8tin4-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwsfc8tin4-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":0}],"example":{"method":"PUT","url":"http://www.testurl.com/","responseStatus":100,"requestResponseType":"arraybuffer","responseInfoType":"utf8","responseData":"errrorInfoText"},"title":"When sending a request and get non 2xx repsonse, the sendHttpPipeline should throw errors with the right format.","sequence":2,"id":"lr4kmmml4w-mwsfc8tin4"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is DELETE and status 500","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsfc8tin4-oy3tg2zjb4","code":"() => {\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        // The body text will only show up if the Content-Type is whitelisted.\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.requestResponseType\r\n            };\r\n        }","duration":1},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsfc8tin4-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":1},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsfc8tin4-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error message should be the same as the responsebody","status":"pass","exception":{},"rawTitle":"error message should be the same as the responsebody","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsfc8tin4-agc5yih30j","code":"() => {\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.responseData);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsfc8tin4-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwsfc8tin4-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":0}],"example":{"method":"DELETE","url":"http://www.testurl.com/","responseStatus":500,"requestResponseType":"text","responseInfoType":"utf8","responseData":"errrorInfoText"},"title":"When sending a request and get non 2xx repsonse, the sendHttpPipeline should throw errors with the right format.","sequence":3,"id":"lr4kmmml4w-mwsfc8tin4"}],"title":"When sending a request and get non 2xx repsonse, the sendHttpPipeline should throw errors with the right format.","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"RNFetchBlob throws","status":"pass","exception":{},"rawTitle":"RNFetchBlob throws","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-ohnze9kh1v-a5bge2etz4","code":"() => {\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.reject(new Error(\"Some RNFetchBlobError\")));\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: \"GET\",\r\n                url: \"http://www.tempuri.org/\"\r\n            };\r\n        }","duration":1},{"title":"sendHttpAsync is called.","status":"pass","exception":{},"rawTitle":"sendHttpAsync is called.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-ohnze9kh1v-avdo397kcb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let httpPipeline = createPipelineForTesting();\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":3},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-ohnze9kh1v-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpError","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpError","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-ohnze9kh1v-7nv6us2w0w","code":"() => {\r\n            (actualError instanceof Core.SendHttpError).should.be.eql(true);\r\n            actualError.message.should.be.eql(AppMagic.Strings.RESTHttpErrorReturned);\r\n        }","duration":1}],"title":"We handle RNFetchBlob exceptions","description":"","tags":[],"sequence":10,"id":"lr4kmmml4w-ohnze9kh1v"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a HTTP request that comes from published app with expected response type as array buffer","status":"pass","exception":{},"rawTitle":"a HTTP request that comes from published app with expected response type as array buffer","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-6q7rgnfjfn-7nxeia0e6o","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            response = {\r\n                data: \"testarraybufferdata\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": AppMagic.Services.ResponseTypes.ArrayBuffer,\r\n                        // The response property will only be set if the Content-Length response header is specified.\r\n                        \"Content-Length\": \"0\",\r\n                        \"location\": \"testLocation\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: \"200\"\r\n                },\r\n                type: \"base64\"\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\",\r\n                }),\r\n                method: \"GET\",\r\n                url: \"http://www.testurl.com/\",\r\n                responseType: AppMagic.Services.ResponseTypes.ArrayBuffer,\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n        }","duration":2},{"title":"the request is sent","status":"pass","exception":{},"rawTitle":"the request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-6q7rgnfjfn-c3kw613eot","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":2},{"title":"the response type, arraybuffer is returned","status":"pass","exception":{},"rawTitle":"the response type, arraybuffer is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-6q7rgnfjfn-itj1w0yr0j","code":"() => {\r\n            httpResponse.responseType.should.eql(AppMagic.Services.ResponseTypes.ArrayBuffer);\r\n        }","duration":0},{"title":"a HTTP request should be made","status":"pass","exception":{},"rawTitle":"a HTTP request should be made","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-6q7rgnfjfn-lqwq7sezog","code":"() => {\r\n            RNFetchBlobFetchStub.calledOnce.should.eql(true);\r\n        }","duration":0},{"title":"the correct parameters are passed to fetch","status":"pass","exception":{},"rawTitle":"the correct parameters are passed to fetch","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-6q7rgnfjfn-sep0qt7t28","code":"() => {\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                \"GET\",\r\n                \"http://www.testurl.com/\",\r\n                {\r\n                    [AppMagic.Services.HttpConstants.HeaderName.AcceptLanguage]: Localization_1.localization.supportedDeviceLocale,\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\",\r\n                },\r\n                null\r\n            ]);\r\n        }","duration":1},{"title":"the response should be a string containing TempFiles/","status":"pass","exception":{},"rawTitle":"the response should be a string containing TempFiles/","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-6q7rgnfjfn-v8pys21wf7","code":"() => {\r\n            httpResponse.response.indexOf(`${Config_1.Constants.FolderNames.TempFiles}/`).should.eql(0);\r\n        }","duration":0},{"title":"the response should have the right headers with location header key changed to Location and special processing header set to true","status":"pass","exception":{},"rawTitle":"the response should have the right headers with location header key changed to Location and special processing header set to true","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"lr4kmmml4w-6q7rgnfjfn-2vlzgih1rn","code":"() => {\r\n            httpResponse.headers[\"Content-Type\"].should.eql(AppMagic.Services.ResponseTypes.ArrayBuffer);\r\n            httpResponse.headers[\"Location\"].should.eql(\"testLocation\");\r\n            httpResponse.headers[AppMagic.Runtime.App.Plugins.Serialized.HeaderName_ResponseContentType].should.eql(AppMagic.Runtime.App.Plugins.Serialized.ResponseContentType_FilePath);\r\n        }","duration":0},{"title":"response status code <status> should be returned","status":"pass","exception":{},"rawTitle":"response status code <status> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"lr4kmmml4w-6q7rgnfjfn-143sw5yga9p","code":"() => {\r\n            httpResponse.status.should.eql(response.respInfo.status);\r\n        }","duration":0}],"title":"User requests a large external file which requires RNSendHttpPipeline to download the file to local file system and send the path to the file as the body of the response to the caller","description":"","tags":[],"sequence":11,"id":"lr4kmmml4w-6q7rgnfjfn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"RequestParameters built using BodilessHttpRequestBuilder","status":"pass","exception":{},"rawTitle":"RequestParameters built using BodilessHttpRequestBuilder","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-7nssmd75og-s0hmdolhqd","code":"() => {\r\n            response = {\r\n                data: \"test response text.\",\r\n                respInfo: {\r\n                    headers: {\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: 200\r\n                },\r\n                type: \"utf8\",\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            let sendHttpPipeline = new Adapters_1.RNSendHttpPipeline();\r\n            httpClient = new AppMagic.Services.HttpClient(sendHttpPipeline);\r\n            const httpReqBuilder = new AppMagic.Services.BodilessHttpRequestBuilder();\r\n            httpReqBuilder.setBaseUrl(new Core.Url(\"https://www.tempuri.org/providers/Microsoft.PowerApps/features\"));\r\n            httpReqBuilder.setMethod(AppMagic.Services.HttpConstants.Method.GET);\r\n            requestParameters = httpReqBuilder.generateSendHttpRequestParameters();\r\n        }","duration":3},{"title":"the request is sent using sendHttpIgnoreResponseAsync","status":"pass","exception":{},"rawTitle":"the request is sent using sendHttpIgnoreResponseAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-7nssmd75og-hf2afj074w","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield httpClient.sendHttpIgnoreResponseAsync(requestParameters);\r\n        })","duration":2},{"title":"fetch should've been called with expected args","status":"pass","exception":{},"rawTitle":"fetch should've been called with expected args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"lr4kmmml4w-7nssmd75og-a58zevpwao","code":"() => {\r\n            RNFetchBlobFetchStub.callCount.should.be.eql(1);\r\n            RNFetchBlobFetchStub.firstCall.args.should.eql([\r\n                \"GET\",\r\n                \"https://www.tempuri.org/providers/Microsoft.PowerApps/features\",\r\n                /* headers */ {\r\n                    [AppMagic.Services.HttpConstants.HeaderName.AcceptLanguage]: Localization_1.localization.supportedDeviceLocale,\r\n                },\r\n                /* bodyData */ null\r\n            ]);\r\n        }","duration":1}],"title":"Sending when constructing request using HttpRequestBuilder","description":"","tags":[],"sequence":12,"id":"lr4kmmml4w-7nssmd75og"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and status 300","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsc739t8g-151npcgqq9n","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Content-Length\": \"18\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobConfigStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.config.name).returns(new RNFetchBlobMock_1.RNFetchBlobMock());\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType,\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n        }","duration":2},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsc739t8g-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":1},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsc739t8g-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsc739t8g-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsc739t8g-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.response.should.eql(scenarioOutlineContext.example.responseData);\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n            error.response.responseType.should.eql(AppMagic.Services.ResponseTypes.Text);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["method","url","responseStatus","responseInfoType","responseData","responseType"],["GET","http://www.testurl.com/","300","\"path\"","errrorInfoText","pabinary"],["GET","http://www.testurl.com/","403","\"path\"","errrorInfoText","arraybuffer"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and status 300","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsc739t8g-151npcgqq9n","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Content-Length\": \"18\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobConfigStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.config.name).returns(new RNFetchBlobMock_1.RNFetchBlobMock());\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType,\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n        }","duration":2},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsc739t8g-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":1},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsc739t8g-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsc739t8g-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsc739t8g-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.response.should.eql(scenarioOutlineContext.example.responseData);\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n            error.response.responseType.should.eql(AppMagic.Services.ResponseTypes.Text);\r\n        }","duration":0}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":300,"responseInfoType":"path","responseData":"errrorInfoText","responseType":"pabinary"},"title":"When sending a request from that requires special processing and get non 2xx repsonse, the sendHttpPipeline should throw errors with the response type being text.","sequence":1,"id":"lr4kmmml4w-mwsc739t8g"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is GET and status 403","status":"pass","exception":{},"rawTitle":"method is <method> and status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwsc739t8g-152tdiomdn7","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            response = {\r\n                data: scenarioOutlineContext.example.responseData,\r\n                respInfo: {\r\n                    respType: scenarioOutlineContext.example.responseInfoType,\r\n                    headers: {\r\n                        \"location\": \"somelocation\",\r\n                        \"Content-Type\": \"text/plain\",\r\n                        \"Content-Length\": \"18\",\r\n                        \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                    },\r\n                    status: scenarioOutlineContext.example.responseStatus\r\n                },\r\n                type: scenarioOutlineContext.example.responseInfoType,\r\n                text() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobConfigStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.config.name).returns(new RNFetchBlobMock_1.RNFetchBlobMock());\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = createPipelineForTesting();\r\n            requestParameters = {\r\n                headers: HashTableUtility.create({\r\n                    \"testHeader\": \"requestHeader1\",\r\n                    \"testHeader2\": \"requestHeader2\"\r\n                }),\r\n                method: scenarioOutlineContext.example.method,\r\n                url: scenarioOutlineContext.example.url,\r\n                responseType: scenarioOutlineContext.example.responseType,\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n        }","duration":12},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwsc739t8g-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield httpPipeline.sendHttpAsync(requestParameters);\r\n            }\r\n            catch (e) {\r\n                actualError = e;\r\n            }\r\n        })","duration":1},{"title":"sendHttpAsync should have thrown an error.","status":"pass","exception":{},"rawTitle":"sendHttpAsync should have thrown an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwsc739t8g-slxovhk3ub","code":"() => {\r\n            (actualError !== null).should.be.eql(true);\r\n        }","duration":0},{"title":"error is instance of Core.SendHttpErrorWithResponse","status":"pass","exception":{},"rawTitle":"error is instance of Core.SendHttpErrorWithResponse","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwsc739t8g-lqw3pspmv4","code":"() => {\r\n            (actualError instanceof Core.SendHttpErrorWithResponse).should.be.eql(true);\r\n        }","duration":0},{"title":"error has the info we need","status":"pass","exception":{},"rawTitle":"error has the info we need","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwsc739t8g-4moqt8julh","code":"() => {\r\n            let error = actualError;\r\n            error.response.response.should.eql(scenarioOutlineContext.example.responseData);\r\n            error.response.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n            error.response.responseType.should.eql(AppMagic.Services.ResponseTypes.Text);\r\n        }","duration":1}],"example":{"method":"GET","url":"http://www.testurl.com/","responseStatus":403,"responseInfoType":"path","responseData":"errrorInfoText","responseType":"arraybuffer"},"title":"When sending a request from that requires special processing and get non 2xx repsonse, the sendHttpPipeline should throw errors with the response type being text.","sequence":2,"id":"lr4kmmml4w-mwsc739t8g"}],"title":"When sending a request from that requires special processing and get non 2xx repsonse, the sendHttpPipeline should throw errors with the response type being text.","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is DELETE status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwmyy1ckzk-cnyu2qoso3","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            requestParameters = {\r\n                url: scenarioOutlineContext.example.url,\r\n                method: scenarioOutlineContext.example.method,\r\n                headers: HashTableUtility.create({}),\r\n                requestSource: \"PublishedApp\",\r\n                responseType: scenarioOutlineContext.example.responseType,\r\n            };\r\n            let responseHeader;\r\n            if (scenarioOutlineContext.example.contentLength) {\r\n                responseHeader = {\r\n                    \"Content-Length\": scenarioOutlineContext.example.contentLength,\r\n                    \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                };\r\n            }\r\n            response = {\r\n                data: MockImage.relativeUrl,\r\n                type: \"path\",\r\n                respInfo: {\r\n                    headers: responseHeader,\r\n                    status: scenarioOutlineContext.example.responseStatus,\r\n                    respType: \"text\"\r\n                },\r\n                path() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = new Adapters_1.RNSendHttpPipeline();\r\n        }","duration":2},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwmyy1ckzk-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, pabinary is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwmyy1ckzk-jkp54f5g68","code":"() => {\r\n            httpResponse.responseType.should.eql(AppMagic.Services.ResponseTypes.PABinary);\r\n        }","duration":0},{"title":"the expected response is null","status":"pass","exception":{},"rawTitle":"the expected response is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwmyy1ckzk-j00q11gwut","code":"() => {\r\n            (httpResponse.response === null).should.eql(true);\r\n        }","duration":0},{"title":"the expected content-length is 0","status":"pass","exception":{},"rawTitle":"the expected content-length is <httpResponseContentLength>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwmyy1ckzk-5kjsn5ivfp","code":"() => {\r\n            httpResponse.headers[\"Content-Length\"].should.eql(scenarioOutlineContext.example.httpResponseContentLength);\r\n        }","duration":0},{"title":"the expected response status is 200","status":"pass","exception":{},"rawTitle":"the expected response status is <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwmyy1ckzk-5kjmi9nuwz","code":"() => {\r\n            httpResponse.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["method","url","contentLength","httpResponseContentLength","responseType","responseStatus"],["DELETE","http://www.testurl.com/","\"0\"","\"0\"","pabinary","200"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"method is DELETE status 200","status":"pass","exception":{},"rawTitle":"method is <method> status <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-mwmyy1ckzk-cnyu2qoso3","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n            requestParameters = {\r\n                url: scenarioOutlineContext.example.url,\r\n                method: scenarioOutlineContext.example.method,\r\n                headers: HashTableUtility.create({}),\r\n                requestSource: \"PublishedApp\",\r\n                responseType: scenarioOutlineContext.example.responseType,\r\n            };\r\n            let responseHeader;\r\n            if (scenarioOutlineContext.example.contentLength) {\r\n                responseHeader = {\r\n                    \"Content-Length\": scenarioOutlineContext.example.contentLength,\r\n                    \"Date\": \"Mon, 18 Jun 2018 20:11:59 GMT\"\r\n                };\r\n            }\r\n            response = {\r\n                data: MockImage.relativeUrl,\r\n                type: \"path\",\r\n                respInfo: {\r\n                    headers: responseHeader,\r\n                    status: scenarioOutlineContext.example.responseStatus,\r\n                    respType: \"text\"\r\n                },\r\n                path() {\r\n                    return this.data;\r\n                }\r\n            };\r\n            RNFetchBlobFetchStub = sinon.stub(RNFetchBlobMock_1.RNFetchBlobMock.prototype, RNFetchBlobMock_1.RNFetchBlobMock.prototype.fetch.name).returns(Promise.resolve(response));\r\n            httpPipeline = new Adapters_1.RNSendHttpPipeline();\r\n        }","duration":2},{"title":"the request is sent by calling sendHttpAsync","status":"pass","exception":{},"rawTitle":"the request is sent by calling sendHttpAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lr4kmmml4w-mwmyy1ckzk-15uvmt5pnnv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            httpResponse = yield httpPipeline.sendHttpAsync(requestParameters);\r\n        })","duration":1},{"title":"the expected response type, pabinary is returned","status":"pass","exception":{},"rawTitle":"the expected response type, <responseType> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lr4kmmml4w-mwmyy1ckzk-jkp54f5g68","code":"() => {\r\n            httpResponse.responseType.should.eql(AppMagic.Services.ResponseTypes.PABinary);\r\n        }","duration":0},{"title":"the expected response is null","status":"pass","exception":{},"rawTitle":"the expected response is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lr4kmmml4w-mwmyy1ckzk-j00q11gwut","code":"() => {\r\n            (httpResponse.response === null).should.eql(true);\r\n        }","duration":0},{"title":"the expected content-length is 0","status":"pass","exception":{},"rawTitle":"the expected content-length is <httpResponseContentLength>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"lr4kmmml4w-mwmyy1ckzk-5kjsn5ivfp","code":"() => {\r\n            httpResponse.headers[\"Content-Length\"].should.eql(scenarioOutlineContext.example.httpResponseContentLength);\r\n        }","duration":0},{"title":"the expected response status is 200","status":"pass","exception":{},"rawTitle":"the expected response status is <responseStatus>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"lr4kmmml4w-mwmyy1ckzk-5kjmi9nuwz","code":"() => {\r\n            httpResponse.status.should.eql(scenarioOutlineContext.example.responseStatus);\r\n        }","duration":1}],"example":{"method":"DELETE","url":"http://www.testurl.com/","contentLength":"0","httpResponseContentLength":"0","responseType":"pabinary","responseStatus":200},"title":"When sending a request and get 2xx response with empty payload body, content length to 0, and content type is not set.","sequence":1,"id":"lr4kmmml4w-mwmyy1ckzk"}],"title":"When sending a request and get 2xx response with empty payload body, content length to 0, and content type is not set.","description":"","tags":[]}],"title":"A service that sends HTTP requests and processes response","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/SendHttpPipeline.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lr4kmmml4w-9pbsb4-j3fzkukkqr","code":"() => {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"lr4kmmml4w-9pbsb4"},"id":"lr4kmmml4w","path":"Services/Adapters"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":56,"failedCount":0,"pendingCount":0,"totalCount":56,"totalRuleViolations":0,"duration":47,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":42,"failedCount":0,"pendingCount":0,"totalCount":42,"totalRuleViolations":0,"duration":42,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":5},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":5},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":1},{"title":"When true the install service should fetch installed app ids for My apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-o5vof9ed0z","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 3","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-a4vuy2hm3","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["isConnected","appType","appTypeName","calledWithAppType","NameOfTypeCalled","timesCalled","shouldFetchInstalledIds","expectedAppCount"],["true","1","My","1","My","1","false","3"],["false","1","My","1","My","1","true","0"],["true","4","Sample","4","Sample","1","false","0"],["true","15","All","15","All","1","false","3"],["true","2","Favorite","1","My","1","false","1"],["true","8","Featured","1","My","1","false","2"],["false","8","Featured","1","My","1","true","0"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":5},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":5},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":1},{"title":"When true the install service should fetch installed app ids for My apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-o5vof9ed0z","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 3","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-a4vuy2hm3","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"example":{"isConnected":true,"appType":1,"appTypeName":"My","calledWithAppType":1,"NameOfTypeCalled":"My","timesCalled":1,"shouldFetchInstalledIds":false,"expectedAppCount":3},"title":"Get all apps the user has access to online and offline","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":1},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":1},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":1},{"title":"When false the install service should fetch installed app ids for My apps to compare? true","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-lqw67dm04g","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":1},{"title":"the number of apps should be 0","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-8z7oq6u8j","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"example":{"isConnected":false,"appType":1,"appTypeName":"My","calledWithAppType":1,"NameOfTypeCalled":"My","timesCalled":1,"shouldFetchInstalledIds":true,"expectedAppCount":0},"title":"Get all apps the user has access to online and offline","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":2},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":1},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":0},{"title":"When true the install service should fetch installed app ids for Sample apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-144kxayyc6z","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being Sample","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-144kwb0rdlf","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 0","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-8z7oq6u8j","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":1}],"example":{"isConnected":true,"appType":4,"appTypeName":"Sample","calledWithAppType":4,"NameOfTypeCalled":"Sample","timesCalled":1,"shouldFetchInstalledIds":false,"expectedAppCount":0},"title":"Get all apps the user has access to online and offline","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":3},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":1},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":0},{"title":"When true the install service should fetch installed app ids for All apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-183li4kyszn","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being All","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-dluki5m1d7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 3","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-a4vuy2hm3","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":1}],"example":{"isConnected":true,"appType":15,"appTypeName":"All","calledWithAppType":15,"NameOfTypeCalled":"All","timesCalled":1,"shouldFetchInstalledIds":false,"expectedAppCount":3},"title":"Get all apps the user has access to online and offline","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":4},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":1},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":0},{"title":"When true the install service should fetch installed app ids for Favorite apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-bqw1idz8zn","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 1","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-9ctn4edwr","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"example":{"isConnected":true,"appType":2,"appTypeName":"Favorite","calledWithAppType":1,"NameOfTypeCalled":"My","timesCalled":1,"shouldFetchInstalledIds":false,"expectedAppCount":1},"title":"Get all apps the user has access to online and offline","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":11},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":0},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":0},{"title":"When true the install service should fetch installed app ids for Featured apps to compare? false","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-15wfp4ff7hv","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":1},{"title":"the number of apps should be 2","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-9qpp70x6r","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"example":{"isConnected":true,"appType":8,"appTypeName":"Featured","calledWithAppType":1,"NameOfTypeCalled":"My","timesCalled":1,"shouldFetchInstalledIds":false,"expectedAppCount":2},"title":"Get all apps the user has access to online and offline","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has apps available to him/her","status":"pass","exception":{},"rawTitle":"the user has apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-15wfwbmcc79-36i71olkwj","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IInstallAppRepository);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(new Mocks_1.MockDeviceInfoProvider());\r\n            getIdsSpy = sinon.spy(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getAllInstalledAppIdsAsync.name);\r\n            let mockInstallService = new Mocks_1.MockInstallAppRepository();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IInstallAppRepository).toConstantValue(mockInstallService);\r\n            if (scenarioOutlineContext.example.isConnected)\r\n                Utilities_1.mockKernelInternetConnection();\r\n            else\r\n                Utilities_1.mockKernelOfflineConnection();\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let environmentName = \"environmentName\";\r\n            let userEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\",\r\n                properties: {\r\n                    displayName: environmentName\r\n                }\r\n            };\r\n            let appInfoProperties = {\r\n                isFirstPublish: false,\r\n                lastDraft: null,\r\n                lastDraftVersion: null,\r\n                lastPublishDate: 0,\r\n                lifeCycleId: null,\r\n                commitMessage: null,\r\n                screenshots: [],\r\n                embeddedApp: null,\r\n                userConsents: [],\r\n                rawServerRepresentation: {},\r\n                globalAppDocumentUri: null\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"User App 1\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"323\", \"458\", \"103\", \"Lots\", tags, userEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, false, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing4\", \"126\", \"UserApp2\", \"this is the fourth test\", 722017, 722017, null, null, null, null, \"User App 2\", \"purple\", null, [], \"test publisher\", true, true, 350, 260, \"any\", \"324\", \"459\", \"104\", \"Lots\", tags, userEnvRef, null, 122, 15, owner, owner, owner, null, null, \"3217\", \"5435\", null, true /* isFavorite */, 732017, true /* isFeaturedApp */, false, false, \"split\", null, null, appInfoProperties);\r\n            apps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(apps));\r\n        }","duration":1},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-15wfwbmcc79-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(scenarioOutlineContext.example.appType, false);\r\n        })","duration":0},{"title":"Runtime Adapter getAppsAsync should be called 1 times","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsAsync should be called <timesCalled> times","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-15wfwbmcc79-a57l54r9y8","code":"() => {\r\n            getAppsStub.callCount.should.be.eql(scenarioOutlineContext.example.timesCalled);\r\n        }","duration":0},{"title":"When false the install service should fetch installed app ids for Featured apps to compare? true","status":"pass","exception":{},"rawTitle":"When <isConnected> the install service should fetch installed app ids for <appTypeName> apps to compare? <shouldFetchInstalledIds>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-15wfwbmcc79-me116cilgd","code":"() => {\r\n            getIdsSpy.called.should.be.eql(scenarioOutlineContext.example.shouldFetchInstalledIds);\r\n        }","duration":0},{"title":"Runtime Adapter getAppsSync should be called with the correct appType, that being My","status":"pass","exception":{},"rawTitle":"Runtime Adapter getAppsSync should be called with the correct appType, that being <NameOfTypeCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"15oqg7rpcrn-15wfwbmcc79-jbm905t3l7","code":"() => {\r\n            getAppsStub.calledWith(scenarioOutlineContext.example.calledWithAppType).should.be.eql(true);\r\n        }","duration":0},{"title":"the number of apps should be 0","status":"pass","exception":{},"rawTitle":"the number of apps should be <expectedAppCount>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"15oqg7rpcrn-15wfwbmcc79-8z7oq6u8j","code":"() => {\r\n            result.length.should.eql(Number(scenarioOutlineContext.example.expectedAppCount));\r\n        }","duration":0}],"example":{"isConnected":false,"appType":8,"appTypeName":"Featured","calledWithAppType":1,"NameOfTypeCalled":"My","timesCalled":1,"shouldFetchInstalledIds":true,"expectedAppCount":0},"title":"Get all apps the user has access to online and offline","sequence":7,"id":"15oqg7rpcrn-15wfwbmcc79"}],"title":"Get all apps the user has access to online and offline","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is on a phone device and has sample apps available to him/her","status":"pass","exception":{},"rawTitle":"the user is on a <formFactor> device and has sample apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-tscfy2yqe5-svizgzacbf","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            Utilities_1.mockKernelInternetConnection();\r\n            const infoProvider = new Mocks_1.MockDeviceInfoProvider(scenarioOutlineContext.example.formFactor === \"tablet\");\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(infoProvider);\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let globalEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\"\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing\", \"123\", \"globalApp1\", \"this is a test\", 752017, 752017, null, null, null, null, \"Global App 1 (phone)\", \"blue\", null, [], \"test publisher\", true, true, 350, 260, \"phone\", \"321\", \"456\", \"100\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3214\", \"5432\", null, false, 752017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing2\", \"124\", \"globalApp2\", \"this is another test\", 742017, 742017, null, null, null, null, \"Global App 2 (tablet)\", \"yellow\", null, [], \"test publisher\", true, true, 350, 260, \"tablet\", \"322\", \"457\", \"101\", \"Lots\", tags, globalEnvRef, null, 121, 21, owner, owner, owner, null, null, \"3215\", \"5433\", null, false, 742017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"Global App 3 (invalid)\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"invalid\", \"323\", \"458\", \"103\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            globalApps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(globalApps));\r\n        }","duration":1},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-tscfy2yqe5-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(_1.AppType.Sample, false);\r\n        })","duration":1},{"title":"there should be one element in the result array","status":"pass","exception":{},"rawTitle":"there should be one element in the result array","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"15oqg7rpcrn-tscfy2yqe5-1l2c2s0jxp","code":"() => {\r\n            result.length.should.be.eql(1);\r\n        }","duration":0},{"title":"appInfo should match the ID of the sample test data","status":"pass","exception":{},"rawTitle":"appInfo should match the ID of the sample test data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-tscfy2yqe5-4kduloe6vh","code":"() => {\r\n            result[0].appId.should.be.eql(globalApps[scenarioOutlineContext.example.matchingAppIndex].id);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["formFactor","matchingAppIndex"],["phone","0"],["tablet","1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is on a phone device and has sample apps available to him/her","status":"pass","exception":{},"rawTitle":"the user is on a <formFactor> device and has sample apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-tscfy2yqe5-svizgzacbf","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            Utilities_1.mockKernelInternetConnection();\r\n            const infoProvider = new Mocks_1.MockDeviceInfoProvider(scenarioOutlineContext.example.formFactor === \"tablet\");\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(infoProvider);\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let globalEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\"\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing\", \"123\", \"globalApp1\", \"this is a test\", 752017, 752017, null, null, null, null, \"Global App 1 (phone)\", \"blue\", null, [], \"test publisher\", true, true, 350, 260, \"phone\", \"321\", \"456\", \"100\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3214\", \"5432\", null, false, 752017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing2\", \"124\", \"globalApp2\", \"this is another test\", 742017, 742017, null, null, null, null, \"Global App 2 (tablet)\", \"yellow\", null, [], \"test publisher\", true, true, 350, 260, \"tablet\", \"322\", \"457\", \"101\", \"Lots\", tags, globalEnvRef, null, 121, 21, owner, owner, owner, null, null, \"3215\", \"5433\", null, false, 742017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"Global App 3 (invalid)\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"invalid\", \"323\", \"458\", \"103\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            globalApps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(globalApps));\r\n        }","duration":1},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-tscfy2yqe5-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(_1.AppType.Sample, false);\r\n        })","duration":1},{"title":"there should be one element in the result array","status":"pass","exception":{},"rawTitle":"there should be one element in the result array","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"15oqg7rpcrn-tscfy2yqe5-1l2c2s0jxp","code":"() => {\r\n            result.length.should.be.eql(1);\r\n        }","duration":0},{"title":"appInfo should match the ID of the sample test data","status":"pass","exception":{},"rawTitle":"appInfo should match the ID of the sample test data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-tscfy2yqe5-4kduloe6vh","code":"() => {\r\n            result[0].appId.should.be.eql(globalApps[scenarioOutlineContext.example.matchingAppIndex].id);\r\n        }","duration":0}],"example":{"formFactor":"phone","matchingAppIndex":0},"title":"Sample apps match form factor","sequence":1,"id":"15oqg7rpcrn-tscfy2yqe5"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is on a tablet device and has sample apps available to him/her","status":"pass","exception":{},"rawTitle":"the user is on a <formFactor> device and has sample apps available to him/her","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"15oqg7rpcrn-tscfy2yqe5-1enjxyf68l","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            Utilities_1.mockKernelInternetConnection();\r\n            const infoProvider = new Mocks_1.MockDeviceInfoProvider(scenarioOutlineContext.example.formFactor === \"tablet\");\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(infoProvider);\r\n            let tags = HashTableUtility.create();\r\n            let owner = {\r\n                displayName: \"testUser\",\r\n                type: \"User\",\r\n                id: \"1010\"\r\n            };\r\n            let globalEnvRef = {\r\n                id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                name: \"env1\"\r\n            };\r\n            let app1 = new AppMagic.PowerApps.AppInfo(\"testing\", \"123\", \"globalApp1\", \"this is a test\", 752017, 752017, null, null, null, null, \"Global App 1 (phone)\", \"blue\", null, [], \"test publisher\", true, true, 350, 260, \"phone\", \"321\", \"456\", \"100\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3214\", \"5432\", null, false, 752017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app2 = new AppMagic.PowerApps.AppInfo(\"testing2\", \"124\", \"globalApp2\", \"this is another test\", 742017, 742017, null, null, null, null, \"Global App 2 (tablet)\", \"yellow\", null, [], \"test publisher\", true, true, 350, 260, \"tablet\", \"322\", \"457\", \"101\", \"Lots\", tags, globalEnvRef, null, 121, 21, owner, owner, owner, null, null, \"3215\", \"5433\", null, false, 742017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            let app3 = new AppMagic.PowerApps.AppInfo(\"testing3\", \"125\", \"UserApp1\", \"this is the third test\", 732017, 732017, null, null, null, null, \"Global App 3 (invalid)\", \"red\", null, [], \"test publisher\", true, true, 350, 260, \"invalid\", \"323\", \"458\", \"103\", \"Lots\", tags, globalEnvRef, null, 101, 20, owner, owner, owner, null, null, \"3216\", \"5434\", null, false, 732017, false, false, false, \"split\", null, null, appInfoProperties);\r\n            globalApps = [app1, app2, app3];\r\n            getAppsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"getAppsAsync\").returns(WinJS.Promise.wrap(globalApps));\r\n        }","duration":1},{"title":"calling getAppsAsync","status":"pass","exception":{},"rawTitle":"calling getAppsAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"15oqg7rpcrn-tscfy2yqe5-oxssei4lqb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let catalogService = new Services_1.AppCatalogService(InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IDeviceInfoProvider), InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IInstallAppRepository));\r\n            result = yield catalogService.getAppsAsync(_1.AppType.Sample, false);\r\n        })","duration":0},{"title":"there should be one element in the result array","status":"pass","exception":{},"rawTitle":"there should be one element in the result array","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"15oqg7rpcrn-tscfy2yqe5-1l2c2s0jxp","code":"() => {\r\n            result.length.should.be.eql(1);\r\n        }","duration":0},{"title":"appInfo should match the ID of the sample test data","status":"pass","exception":{},"rawTitle":"appInfo should match the ID of the sample test data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"15oqg7rpcrn-tscfy2yqe5-4kduloe6vh","code":"() => {\r\n            result[0].appId.should.be.eql(globalApps[scenarioOutlineContext.example.matchingAppIndex].id);\r\n        }","duration":0}],"example":{"formFactor":"tablet","matchingAppIndex":1},"title":"Sample apps match form factor","sequence":2,"id":"15oqg7rpcrn-tscfy2yqe5"}],"title":"Sample apps match form factor","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app isFavorite is true","status":"pass","exception":{},"rawTitle":"an app isFavorite is <isFavorite>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"15oqg7rpcrn-h2gh3zcgtn-4ngtn2kmrv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            app = new _1.AppInfo();\r\n            app.appId = \"unique\";\r\n            app.isFavorite = scenarioOutlineContext.example.isFavorite;\r\n            toggleAppFavoriteAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"toggleAppFavoriteAsync\");\r\n            const catalogService = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IAppCatalogService);\r\n            updatedApp = yield catalogService.toggleAppFavoriteAsync(app);\r\n        })","duration":1},{"title":"the returned AppInfo should be a copy of the original app","status":"pass","exception":{},"rawTitle":"the returned AppInfo should be a copy of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"15oqg7rpcrn-h2gh3zcgtn-njs8tymjhp","code":"() => {\r\n            updatedApp.should.not.eql(app);\r\n            updatedApp.appId.should.eql(app.appId);\r\n        }","duration":0},{"title":"the returned app info favorite should be the opposite of the original app","status":"pass","exception":{},"rawTitle":"the returned app info favorite should be the opposite of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-h2gh3zcgtn-2rvxy9xnc0","code":"() => {\r\n            updatedApp.isFavorite.should.eql(!app.isFavorite);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["isFavorite"],["true"],["false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app isFavorite is true","status":"pass","exception":{},"rawTitle":"an app isFavorite is <isFavorite>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"15oqg7rpcrn-h2gh3zcgtn-4ngtn2kmrv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            app = new _1.AppInfo();\r\n            app.appId = \"unique\";\r\n            app.isFavorite = scenarioOutlineContext.example.isFavorite;\r\n            toggleAppFavoriteAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"toggleAppFavoriteAsync\");\r\n            const catalogService = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IAppCatalogService);\r\n            updatedApp = yield catalogService.toggleAppFavoriteAsync(app);\r\n        })","duration":1},{"title":"the returned AppInfo should be a copy of the original app","status":"pass","exception":{},"rawTitle":"the returned AppInfo should be a copy of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"15oqg7rpcrn-h2gh3zcgtn-njs8tymjhp","code":"() => {\r\n            updatedApp.should.not.eql(app);\r\n            updatedApp.appId.should.eql(app.appId);\r\n        }","duration":0},{"title":"the returned app info favorite should be the opposite of the original app","status":"pass","exception":{},"rawTitle":"the returned app info favorite should be the opposite of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-h2gh3zcgtn-2rvxy9xnc0","code":"() => {\r\n            updatedApp.isFavorite.should.eql(!app.isFavorite);\r\n        }","duration":0}],"example":{"isFavorite":true},"title":"Toggle whether an app is a favorite","sequence":1,"id":"15oqg7rpcrn-h2gh3zcgtn"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app isFavorite is false","status":"pass","exception":{},"rawTitle":"an app isFavorite is <isFavorite>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"15oqg7rpcrn-h2gh3zcgtn-lqw6u0ctwg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            app = new _1.AppInfo();\r\n            app.appId = \"unique\";\r\n            app.isFavorite = scenarioOutlineContext.example.isFavorite;\r\n            toggleAppFavoriteAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"toggleAppFavoriteAsync\");\r\n            const catalogService = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IAppCatalogService);\r\n            updatedApp = yield catalogService.toggleAppFavoriteAsync(app);\r\n        })","duration":1},{"title":"the returned AppInfo should be a copy of the original app","status":"pass","exception":{},"rawTitle":"the returned AppInfo should be a copy of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"15oqg7rpcrn-h2gh3zcgtn-njs8tymjhp","code":"() => {\r\n            updatedApp.should.not.eql(app);\r\n            updatedApp.appId.should.eql(app.appId);\r\n        }","duration":0},{"title":"the returned app info favorite should be the opposite of the original app","status":"pass","exception":{},"rawTitle":"the returned app info favorite should be the opposite of the original app","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"15oqg7rpcrn-h2gh3zcgtn-2rvxy9xnc0","code":"() => {\r\n            updatedApp.isFavorite.should.eql(!app.isFavorite);\r\n        }","duration":0}],"example":{"isFavorite":false},"title":"Toggle whether an app is a favorite","sequence":2,"id":"15oqg7rpcrn-h2gh3zcgtn"}],"title":"Toggle whether an app is a favorite","description":"","tags":[]}],"title":"Get a list of apps or an individual app the user has access to","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/AppCatalog/AppCatalogService.Spec.js","id":"15oqg7rpcrn","path":"Services/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"trying to convert an AppMagic AppInfo","status":"pass","exception":{},"rawTitle":"trying to convert an AppMagic AppInfo","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-mmab2qelzn-cqt8uibz4","code":"() => {\r\n            let appInfoOverrides = {\r\n                environment: {\r\n                    id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                    name: \"env1\",\r\n                    properties: {\r\n                        displayName: environmentName\r\n                    }\r\n                },\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the environment name should be set","status":"pass","exception":{},"rawTitle":"the environment name should be set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"j2kotzu4bn-mmab2qelzn-484296bsyd","code":"() => {\r\n            result.environment.should.be.eql(environmentName);\r\n        }","duration":0}],"title":"Converting a user AppMagic App Info into a display AppInfo","description":"","tags":[],"sequence":1,"id":"j2kotzu4bn-mmab2qelzn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"trying to convert an AppMagic AppInfo","status":"pass","exception":{},"rawTitle":"trying to convert an AppMagic AppInfo","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-q6032g4s85-cqt8uibz4","code":"() => {\r\n            const appInfoOverrides = {\r\n                environment: {\r\n                    id: \"providers/Microsoft.BusinessAppPlatform/environments/env1\",\r\n                    name: \"env1\"\r\n                },\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the environment name should not be set","status":"pass","exception":{},"rawTitle":"the environment name should not be set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"j2kotzu4bn-q6032g4s85-hpezcwdzd1","code":"() => {\r\n            result.environment.should.be.eql(\"\");\r\n        }","duration":0}],"title":"Converting a sample AppMagic App Info into a display AppInfo","description":"","tags":[],"sequence":2,"id":"j2kotzu4bn-q6032g4s85"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color blue","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-4nh0drfrgl","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match blue","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-lqwb406by8","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["color","expectedColor"],["blue","blue"],["BLUE","blue"],["#fff","#fff"],["rgba(0,0,0,1)","rgba(0,0,0,1)"],["rgba(0;0;0;1)","rgba(0,0,0,1)"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color blue","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-4nh0drfrgl","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match blue","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-lqwb406by8","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":1}],"example":{"color":"blue","expectedColor":"blue"},"title":"Ensure the backgroundColor is valid","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color BLUE","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-gh9cdmre45","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match blue","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-lqwb406by8","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":0}],"example":{"color":"BLUE","expectedColor":"blue"},"title":"Ensure the backgroundColor is valid","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color #fff","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-ny701rc4sg","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match #fff","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-ny6n9lnsow","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":1}],"example":{"color":"#fff","expectedColor":"#fff"},"title":"Ensure the backgroundColor is valid","sequence":3,"id":"j2kotzu4bn-jkm8k6jgts"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color rgba(0,0,0,1)","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-16r3am4d1gd","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match rgba(0,0,0,1)","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-i76y5nx4tc","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":0}],"example":{"color":"rgba(0,0,0,1)","expectedColor":"rgba(0,0,0,1)"},"title":"Ensure the backgroundColor is valid","sequence":4,"id":"j2kotzu4bn-jkm8k6jgts"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Converting an AppMagic AppInfo with the color rgba(0;0;0;1)","status":"pass","exception":{},"rawTitle":"Converting an AppMagic AppInfo with the color <color>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"j2kotzu4bn-jkm8k6jgts-joymcgvup7","code":"() => {\r\n            const appInfoOverrides = {\r\n                backgroundColor: scenarioOutlineContext.example.color,\r\n                appPackageResourcesKind: \"split\",\r\n                documentServerVersion: null\r\n            };\r\n            let app = Mocks_1.createAppMagicAppInfo(appInfoOverrides);\r\n            result = _1.convertAppInfo(app);\r\n        }","duration":0},{"title":"the background color should match rgba(0,0,0,1)","status":"pass","exception":{},"rawTitle":"the background color should match <expectedColor>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"j2kotzu4bn-jkm8k6jgts-i76y5nx4tc","code":"() => {\r\n            result.backgroundColor.should.be.eql(scenarioOutlineContext.example.expectedColor);\r\n        }","duration":0}],"example":{"color":"rgba(0;0;0;1)","expectedColor":"rgba(0,0,0,1)"},"title":"Ensure the backgroundColor is valid","sequence":5,"id":"j2kotzu4bn-jkm8k6jgts"}],"title":"Ensure the backgroundColor is valid","description":"","tags":[]}],"title":"Converting an AppMagic AppInfo into a display AppInfo","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/AppCatalog/AppInfoConverter.Spec.js","id":"j2kotzu4bn","path":"Services/AppCatalog"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application package exists","status":"pass","exception":{},"rawTitle":"the application package exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"dtmzyd218z-fp12ohqanh-siufscenmj","code":"() => {\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name)\r\n                .returns(Promise.resolve(installedAppInfo));\r\n            mockInstallAppRepository = new Mocks_1.MockInstallAppRepository();\r\n            getRNFileSystemStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.zipAndRenameAsync.name)\r\n                .returns(Promise.resolve(filePath));\r\n            getRNPowerAppsFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSaveFilePicker.name)\r\n                .returns(Promise.resolve());\r\n        }","duration":9},{"title":"calling AppPackageImportExportService.exportAppPackageAsync","status":"pass","exception":{},"rawTitle":"calling AppPackageImportExportService.exportAppPackageAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"dtmzyd218z-fp12ohqanh-hf51dz61n4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let importExportService = new Services_1.AppPackageImportExportService(mockInstallAppRepository, new Services_1.PlayerResourcesRepository());\r\n            yield importExportService.exportAppPackageAsync(appInfo);\r\n            succeeded = true;\r\n        })","duration":3},{"title":"the operation succeeds","status":"pass","exception":{},"rawTitle":"the operation succeeds","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"dtmzyd218z-fp12ohqanh-he8q4oewk3","code":"() => {\r\n            succeeded.should.be.eql(true);\r\n        }","duration":0},{"title":"RNFileSystem.zipAndRenameAsync should be called","status":"pass","exception":{},"rawTitle":"RNFileSystem.zipAndRenameAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"dtmzyd218z-fp12ohqanh-vbraq0nnnh","code":"() => {\r\n            getRNFileSystemStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"RNPowerAppsFilePicker.launchSaveFilePicker() should be called","status":"pass","exception":{},"rawTitle":"RNPowerAppsFilePicker.launchSaveFilePicker() should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"dtmzyd218z-fp12ohqanh-jkkbawzjwg","code":"() => {\r\n            getRNPowerAppsFilePickerStub.called.should.be.eql(true);\r\n        }","duration":0}],"title":"Application package installed","description":"","tags":[],"sequence":1,"id":"dtmzyd218z-fp12ohqanh"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application package does not exist","status":"pass","exception":{},"rawTitle":"the application package does not exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"dtmzyd218z-jks41iwgkg-cn6a3vls5c","code":"() => {\r\n            installedAppInfo = null;\r\n            getInstalledAppInfoStub = sinon.stub(Mocks_1.MockInstallAppRepository.prototype, Mocks_1.MockInstallAppRepository.prototype.getInstalledAppInfoAsync.name)\r\n                .returns(Promise.resolve(installedAppInfo));\r\n            mockInstallAppRepository = new Mocks_1.MockInstallAppRepository();\r\n            getRNFileSystemStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.zipAndRenameAsync.name)\r\n                .returns(Promise.resolve(filePath));\r\n            getRNPowerAppsFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSaveFilePicker.name)\r\n                .returns(Promise.resolve());\r\n        }","duration":4},{"title":"calling AppPackageImportExportService.exportAppPackageAsync","status":"pass","exception":{},"rawTitle":"calling AppPackageImportExportService.exportAppPackageAsync","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"dtmzyd218z-jks41iwgkg-hf51dz61n4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let importExportService = new Services_1.AppPackageImportExportService(mockInstallAppRepository, new Services_1.PlayerResourcesRepository());\r\n            try {\r\n                yield importExportService.exportAppPackageAsync(appInfo);\r\n                succeeded = true;\r\n            }\r\n            catch (e) {\r\n                exceptionThrown = e;\r\n            }\r\n        })","duration":0},{"title":"the operation fails due to undefined application package (defined upon installation)","status":"pass","exception":{},"rawTitle":"the operation fails due to undefined application package (defined upon installation)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"dtmzyd218z-jks41iwgkg-i72o1dfsxs","code":"() => {\r\n            succeeded.should.be.eql(false);\r\n        }","duration":0},{"title":"error message is 'AppPackageImportExportService.exportAppPackageAsync failed: Could not find appInfo'","status":"pass","exception":{},"rawTitle":"error message is 'AppPackageImportExportService.exportAppPackageAsync failed: Could not find appInfo'","description":"","docString":"","values":["AppPackageImportExportService.exportAppPackageAsync failed: Could not find appInfo"],"ruleViolations":[],"type":"and","sequence":4,"id":"dtmzyd218z-jks41iwgkg-1nnq85t1ub","code":"() => {\r\n            exceptionThrown.message.should.be.eql(stepContext.values[0]);\r\n        }","duration":1},{"title":"RNFileSystem.zipAndRenameAsync should not be called","status":"pass","exception":{},"rawTitle":"RNFileSystem.zipAndRenameAsync should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"dtmzyd218z-jks41iwgkg-jkqtd70n0g","code":"() => {\r\n            getRNFileSystemStub.called.should.be.eql(false);\r\n        }","duration":1},{"title":"RNPowerAppsFilePicker.launchSaveFilePicker() should not be called","status":"pass","exception":{},"rawTitle":"RNPowerAppsFilePicker.launchSaveFilePicker() should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"dtmzyd218z-jks41iwgkg-6ejl9glivx","code":"() => {\r\n            getRNPowerAppsFilePickerStub.called.should.be.eql(false);\r\n        }","duration":0}],"title":"Application package not installed","description":"","tags":[],"sequence":2,"id":"dtmzyd218z-jks41iwgkg"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is imported","status":"pass","exception":{},"rawTitle":"the app is imported","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"dtmzyd218z-lr14sdqp9c-12bxvyirddv","code":"() => {\r\n            // dont need to perform counterpart test (\"given the app is not imported\") because\r\n            // the app will only reach this service if it is imported\r\n            Utilities_1.mockImportedApplicationState();\r\n            getNextFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name)\r\n                .returns(nextAppFolderNumber);\r\n            getDownloadRNFileSystemStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadZipToFolderAsync.name)\r\n                .returns(Promise.resolve());\r\n            getJSONRNFileSystemStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.readTextFromFileAsync.name)\r\n                .returns(Promise.resolve(JSON.stringify({})));\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.downloadPlayerResourcesAsync.name)\r\n                .returns(Promise.resolve());\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n        }","duration":3},{"title":"importing an app","status":"pass","exception":{},"rawTitle":"importing an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"dtmzyd218z-lr14sdqp9c-6ogdul360r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let importExportService = new Services_1.AppPackageImportExportService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository());\r\n            yield importExportService.importAppPackageAsync(url);\r\n            succeeded = true;\r\n        })","duration":2},{"title":"the operation succeeds","status":"pass","exception":{},"rawTitle":"the operation succeeds","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"dtmzyd218z-lr14sdqp9c-he8q4oewk3","code":"() => {\r\n            succeeded.should.be.eql(true);\r\n        }","duration":0},{"title":"RNFileSystem.zipAndRenameAsync() should be called","status":"pass","exception":{},"rawTitle":"RNFileSystem.zipAndRenameAsync() should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"dtmzyd218z-lr14sdqp9c-9y91m9sgsb","code":"() => {\r\n            getNextFolderNumberStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"RNPowerAppsFilePicker.launchSaveFilePicker() should be called","status":"pass","exception":{},"rawTitle":"RNPowerAppsFilePicker.launchSaveFilePicker() should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"dtmzyd218z-lr14sdqp9c-jkkbawzjwg","code":"() => {\r\n            getDownloadRNFileSystemStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"getJSONRNFileSystemStub() should be called twice","status":"pass","exception":{},"rawTitle":"getJSONRNFileSystemStub() should be called twice","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"dtmzyd218z-lr14sdqp9c-bqw1gz25bv","code":"() => {\r\n            getJSONRNFileSystemStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"downloadPlayerResources() should be called","status":"pass","exception":{},"rawTitle":"downloadPlayerResources() should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"dtmzyd218z-lr14sdqp9c-167lol5jp1","code":"() => {\r\n            downloadPlayerResourcesStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"copyPlatformSpecificStaticResources() should be called","status":"pass","exception":{},"rawTitle":"copyPlatformSpecificStaticResources() should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"dtmzyd218z-lr14sdqp9c-jkka3nnrpc","code":"() => {\r\n            copyPlatformSpecificStaticResourcesStub.called.should.be.eql(true);\r\n        }","duration":0}],"title":"Importing an msappk package","description":"","tags":[],"sequence":3,"id":"dtmzyd218z-lr14sdqp9c"}],"title":"Importing and exporting an application package of a user","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/AppPackageImportExport/AppPackageImportExportService.Spec.js","id":"dtmzyd218z","path":"Services/AppPackageImportExport"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"logging in","status":"pass","exception":{},"rawTitle":"logging in","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7ny715973k-10s9x4jks11-1b5musb0c3","code":"() => {\r\n            loginStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.logInAsync.name);\r\n            trackScenarioStub = new TrackScenarioStub_1.TrackScenarioStub();\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            let authService = new Services_1.AuthenticationService();\r\n            authService.loginAsync(email);\r\n        }","duration":4},{"title":"starts the scenario once","status":"pass","exception":{},"rawTitle":"starts the scenario once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7ny715973k-10s9x4jks11-876linscct","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"starts the LogInPowerApps scenario","status":"pass","exception":{},"rawTitle":"starts the LogInPowerApps scenario","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"7ny715973k-10s9x4jks11-17wk0fv0axn","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.LogInPowerApps).should.be.eql(true);\r\n        }","duration":0},{"title":"the runtime login function should be called","status":"pass","exception":{},"rawTitle":"the runtime login function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"7ny715973k-10s9x4jks11-6ejlpq5znh","code":"() => {\r\n            loginStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the provided email address should be used as an authentication option","status":"pass","exception":{},"rawTitle":"the provided email address should be used as an authentication option","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"7ny715973k-10s9x4jks11-16b8mpxjlk0","code":"() => {\r\n            loginStub.calledWith({ userId: email }).should.be.eql(true);\r\n        }","duration":0},{"title":"ends the scenario once","status":"pass","exception":{},"rawTitle":"ends the scenario once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"7ny715973k-10s9x4jks11-yt0id6q22r","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"ends the LogInPowerApps scenario","status":"pass","exception":{},"rawTitle":"ends the LogInPowerApps scenario","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"7ny715973k-10s9x4jks11-164pdttbfx9","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0}],"title":"User logs in","description":"","tags":[],"sequence":1,"id":"7ny715973k-10s9x4jks11"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"logging in","status":"pass","exception":{},"rawTitle":"logging in","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"7ny715973k-rwzws2t39h-1b5musb0c3","code":"() => {\r\n            loginStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.logInAsync.name).returns(Promise.reject(\"error\"));\r\n            trackScenarioStub = new TrackScenarioStub_1.TrackScenarioStub();\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            let authService = new Services_1.AuthenticationService();\r\n            authService.loginAsync(email);\r\n        }","duration":2},{"title":"starts the scenario once","status":"pass","exception":{},"rawTitle":"starts the scenario once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"7ny715973k-rwzws2t39h-876linscct","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"starts the LogInPowerApps scenario","status":"pass","exception":{},"rawTitle":"starts the LogInPowerApps scenario","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"7ny715973k-rwzws2t39h-17wk0fv0axn","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.LogInPowerApps).should.be.eql(true);\r\n        }","duration":0},{"title":"the runtime login function should be called","status":"pass","exception":{},"rawTitle":"the runtime login function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"7ny715973k-rwzws2t39h-6ejlpq5znh","code":"() => {\r\n            loginStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the provided email address should be used as an authentication option","status":"pass","exception":{},"rawTitle":"the provided email address should be used as an authentication option","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"7ny715973k-rwzws2t39h-16b8mpxjlk0","code":"() => {\r\n            loginStub.calledWith({ userId: email }).should.be.eql(true);\r\n        }","duration":0},{"title":"fails the scenario once","status":"pass","exception":{},"rawTitle":"fails the scenario once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"7ny715973k-rwzws2t39h-lqv6vce068","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"fails the LogInPowerApps scenario","status":"pass","exception":{},"rawTitle":"fails the LogInPowerApps scenario","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"7ny715973k-rwzws2t39h-15zsofl5haz","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":1}],"title":"User cancels login","description":"","tags":[],"sequence":2,"id":"7ny715973k-rwzws2t39h"}],"title":"Authentication of a user","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Authentication/AuthenticationService.Spec.js","id":"7ny715973k","path":"Services/Authentication"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the basicConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-v8iw8839ol","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":5},{"title":"the data is converted correctly for basicConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-fi08ehlbid","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["connectionName","sharedConnectionId","dataSources","id","gatewayObjectIdHint","isOnPremiseConnection","availableConnectionsCount","hasSelectedConnection","errorCode","getScopesWillCount","getScopesWontCount","apiCreatorDisplayName","isRuntimeServiceApi","releaseStatus","tier","serverSelectedConnectionId","clientSelectedConnectionId","hasTermsOfUse","expectedResultDiff"],["basicConnection","","","","","","0","false","","0","0","","false","Production","Standard","","","false","{ }"],["basicSharedConnection","sharedConnectionId","","","","","0","false","","0","0","","false","Production","Standard","","","false","{ \"showAddButton\": false, \"sharedConnectionId\": \"sharedConnectionId\" }"],["connectionWithAvailable","","","app1","","","1","false","","0","0","","false","Production","Standard","","","false","{ \"showAddButton\": false, \"showChangeButton\": true, \"availableConnections\": [{\"connectionId\": \"connectionId\", \"displayName\": \"displayName\"}], \"id\": \"app1\" }"],["sharedConnectionWithAvailable","sharedConnectionId","","","","","1","false","","0","0","","false","Production","Standard","","","false","{ \"showAddButton\": false, \"showChangeButton\": true, \"availableConnections\": [{\"connectionId\": \"connectionId\", \"displayName\": \"displayName\"}], \"sharedConnectionId\": \"sharedConnectionId\"}"],["runtimeServiceApiConnection","","","","","","0","false","","0","0","","true","Production","Standard","","","false","{ }"],["runtimeServiceApiConnectionWithAvailable","","","","","","1","false","","0","0","","true","Production","Standard","","","false","{ \"showAddButton\": false, \"showChangeButton\": false, \"availableConnections\": [{\"connectionId\": \"connectionId\", \"displayName\": \"displayName\"}]}"],["authenticatedSelectedConnection","","","","","","0","true","OK","0","0","","false","Production","Standard","id1","","false","{ \"hasSelectedConnection\": true, \"isSelectedConnectionAuthenticated\": true, \"selectedConnectionDisplayName\": \"selectedConnectionName\", \"serverSelectedConnectionId\": \"id1\" }"],["unAuthenticatedSelectedConnection","","","","","","0","true","Unauthenticated","0","0","","false","Production","Standard","id2","id3","false","{ \"hasSelectedConnection\": true, \"isSelectedConnectionAuthenticated\": false, \"selectedConnectionDisplayName\": \"selectedConnectionName\", \"serverSelectedConnectionId\": \"id2\", \"clientSelectedConnectionId\": \"id3\"}"],["connectionWithAvailableWithObjectGateway","","","","hint","","1","false","","0","0","","false","Production","Standard","","","false","{ \"showAddButton\": false, \"showChangeButton\": true, \"availableConnections\": [{\"connectionId\": \"connectionId\", \"displayName\": \"displayName\"}],\"gatewayObjectIdHint\": \"hint\"}"],["onPremiseConnectionWithAvailable","","","app2","","true","1","false","","0","0","","false","Production","Standard","","","false","{ \"showAddButton\": false, \"showChangeButton\": true, \"availableConnections\": [{\"connectionId\": \"connectionId\", \"displayName\": \"displayName\"}],\"isOnPremiseConnection\" : true, \"id\": \"app2\"}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the basicConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-v8iw8839ol","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":5},{"title":"the data is converted correctly for basicConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-fi08ehlbid","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":1}],"example":{"connectionName":"basicConnection","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":0,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{}},"title":"Converting runtime connection results into data to be displayed","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the basicSharedConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-jkp97ipr2o","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for basicSharedConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-12k4krlnesz","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"basicSharedConnection","sharedConnectionId":"sharedConnectionId","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":0,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"sharedConnectionId":"sharedConnectionId"}},"title":"Converting runtime connection results into data to be displayed","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the connectionWithAvailable to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-bq3t1ckzy3","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for connectionWithAvailable","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-thg916y5xp","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"connectionWithAvailable","sharedConnectionId":"","dataSources":"","id":"app1","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":1,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"showChangeButton":true,"availableConnections":[{"connectionId":"connectionId","displayName":"displayName"}],"id":"app1"}},"title":"Converting runtime connection results into data to be displayed","sequence":3,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the sharedConnectionWithAvailable to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-jkn619la5c","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for sharedConnectionWithAvailable","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-lqwi5czutc","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"sharedConnectionWithAvailable","sharedConnectionId":"sharedConnectionId","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":1,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"showChangeButton":true,"availableConnections":[{"connectionId":"connectionId","displayName":"displayName"}],"sharedConnectionId":"sharedConnectionId"}},"title":"Converting runtime connection results into data to be displayed","sequence":4,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the runtimeServiceApiConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-6ejkydqbxx","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for runtimeServiceApiConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-rwzoxs7kab","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":1}],"example":{"connectionName":"runtimeServiceApiConnection","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":0,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":true,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{}},"title":"Converting runtime connection results into data to be displayed","sequence":5,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the runtimeServiceApiConnectionWithAvailable to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-jkr5klwqow","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for runtimeServiceApiConnectionWithAvailable","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-v9b2zqi899","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":1}],"example":{"connectionName":"runtimeServiceApiConnectionWithAvailable","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":1,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":true,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"showChangeButton":false,"availableConnections":[{"connectionId":"connectionId","displayName":"displayName"}]}},"title":"Converting runtime connection results into data to be displayed","sequence":6,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the authenticatedSelectedConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-pwyexc8939","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for authenticatedSelectedConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-13v30ye73od","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"authenticatedSelectedConnection","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":0,"hasSelectedConnection":true,"errorCode":"OK","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"id1","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"hasSelectedConnection":true,"isSelectedConnectionAuthenticated":true,"selectedConnectionDisplayName":"selectedConnectionName","serverSelectedConnectionId":"id1"}},"title":"Converting runtime connection results into data to be displayed","sequence":7,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the unAuthenticatedSelectedConnection to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-13lndgs6jel","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for unAuthenticatedSelectedConnection","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-d98xcet8ur","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"unAuthenticatedSelectedConnection","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"","isOnPremiseConnection":"","availableConnectionsCount":0,"hasSelectedConnection":true,"errorCode":"Unauthenticated","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"id2","clientSelectedConnectionId":"id3","hasTermsOfUse":false,"expectedResultDiff":{"hasSelectedConnection":true,"isSelectedConnectionAuthenticated":false,"selectedConnectionDisplayName":"selectedConnectionName","serverSelectedConnectionId":"id2","clientSelectedConnectionId":"id3"}},"title":"Converting runtime connection results into data to be displayed","sequence":8,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the connectionWithAvailableWithObjectGateway to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-we2ky1qafh","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":3},{"title":"the data is converted correctly for connectionWithAvailableWithObjectGateway","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-tyr10b4ijn","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":1}],"example":{"connectionName":"connectionWithAvailableWithObjectGateway","sharedConnectionId":"","dataSources":"","id":"","gatewayObjectIdHint":"hint","isOnPremiseConnection":"","availableConnectionsCount":1,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"showChangeButton":true,"availableConnections":[{"connectionId":"connectionId","displayName":"displayName"}],"gatewayObjectIdHint":"hint"}},"title":"Converting runtime connection results into data to be displayed","sequence":9,"id":"mg8yk2eflf-kldtqfdp0j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting the onPremiseConnectionWithAvailable to the data to be displayed","status":"pass","exception":{},"rawTitle":"converting the <connectionName> to the data to be displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"mg8yk2eflf-kldtqfdp0j-h1o9llguqb","code":"() => {\r\n            isRuntimeServiceApiStub = sinon.stub(AppMagic.ConnectionHub.PowerAppsConnectionService, \"isRuntimeServiceApi\").returns(scenarioOutlineContext.example.isRuntimeServiceApi);\r\n            // set up the getScopesWill stub to return an array with the specified number of items in it\r\n            let getScopesWill = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWillCount; i++) {\r\n                getScopesWill.push(\"\");\r\n            }\r\n            getScopesWillCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWill\").returns(getScopesWill);\r\n            let getScopesWont = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.getScopesWontCount; i++) {\r\n                getScopesWont.push(\"\");\r\n            }\r\n            getScopesWontCountStub = sinon.stub(AppMagic.ConnectionHub.Api.prototype, \"getScopesWont\").returns(getScopesWont);\r\n            // Set up the connection to override the shared connection id, gatewayObjectIdHint, dataSources, isOnPremiseConnection,id\r\n            let connection = Object.assign({}, baseConnection, {\r\n                sharedConnectionId: scenarioOutlineContext.example.sharedConnectionId,\r\n                gatewayObjectIdHint: scenarioOutlineContext.example.gatewayObjectIdHint,\r\n                dataSources: scenarioOutlineContext.example.dataSources,\r\n                isOnPremiseConnection: scenarioOutlineContext.example.isOnPremiseConnection,\r\n                id: scenarioOutlineContext.example.id\r\n            });\r\n            // Determine if selected connection should be set\r\n            let setSelectedConnection = scenarioOutlineContext.example.hasSelectedConnection;\r\n            // Override status error code\r\n            let errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK;\r\n            if (setSelectedConnection) {\r\n                errorCode = AppMagic.ConnectionHub.ConnectionStatusErrorCode[scenarioOutlineContext.example.errorCode];\r\n            }\r\n            let connectionProperties = Object.assign({}, baseConnectionProperties, {\r\n                status: {\r\n                    isAuthenticated: errorCode === AppMagic.ConnectionHub.ConnectionStatusErrorCode.OK,\r\n                    errorCode: errorCode\r\n                },\r\n                displayName: selectedConnectionName\r\n            });\r\n            // Set up selected connection to override whether it is authenticated\r\n            let selectedConnection = setSelectedConnection ?\r\n                new AppMagic.ConnectionHub.Connection(selectedConnectionId, selectedConnectionName, connectionProperties, null)\r\n                : null;\r\n            // Determine if api should be null\r\n            let releaseStatus = AppMagic.ConnectionHub.ApiReleaseStatus[scenarioOutlineContext.example.releaseStatus];\r\n            let tier = AppMagic.ConnectionHub.ApiTier[scenarioOutlineContext.example.tier];\r\n            let setApi = scenarioOutlineContext.example.getScopesWillCount > 0 // This triggers showing the scope link\r\n                || scenarioOutlineContext.example.apiCreatorDisplayName // This triggers having a custom api creator\r\n                || releaseStatus === AppMagic.ConnectionHub.ApiReleaseStatus.Preview // This triggers showing the preview tag\r\n                || tier !== AppMagic.ConnectionHub.ApiTier.Standard // This triggers whether to show enterprise or premium tag\r\n                || scenarioOutlineContext.example.hasTermsOfUse; // This triggers whether to show the terms of use when adding a connection\r\n            // Set the creator correctly\r\n            let creator = scenarioOutlineContext.example.apiCreatorDisplayName ? {\r\n                kind: AppMagic.ConnectionHub.UserKind.Custom,\r\n                createdBy: {\r\n                    displayName: scenarioOutlineContext.example.apiCreatorDisplayName\r\n                }\r\n            } : {\r\n                kind: AppMagic.ConnectionHub.UserKind.Default\r\n            };\r\n            // Set up the api properties, overriding the creator\r\n            let apiProperties = Object.assign({}, baseApiProperties, {\r\n                creator: creator,\r\n                releaseStatus: releaseStatus,\r\n                tier: tier,\r\n                termsOfUseUrl: scenarioOutlineContext.example.hasTermsOfUse ? termsOfUseUri : null\r\n            });\r\n            let api = setApi ? new AppMagic.ConnectionHub.Api(apiId, apiName, apiProperties, null) : null;\r\n            // Set up the available connections based on the specified count\r\n            let availableConnections = [];\r\n            for (let i = 0; i < scenarioOutlineContext.example.availableConnectionsCount; i++) {\r\n                availableConnections.push({ id: \"connectionId\", displayName: \"displayName\" });\r\n            }\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData(connectionId, connection, selectedConnection, scenarioOutlineContext.example.serverSelectedConnectionId, scenarioOutlineContext.example.clientSelectedConnectionId, api, availableConnections);\r\n        }","duration":2},{"title":"the data is converted correctly for onPremiseConnectionWithAvailable","status":"pass","exception":{},"rawTitle":"the data is converted correctly for <connectionName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mg8yk2eflf-kldtqfdp0j-lr404aw1gg","code":"() => {\r\n            let expectedResult = Object.assign({}, baseExpectedResult, scenarioOutlineContext.example.expectedResultDiff);\r\n            result.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"connectionName":"onPremiseConnectionWithAvailable","sharedConnectionId":"","dataSources":"","id":"app2","gatewayObjectIdHint":"","isOnPremiseConnection":true,"availableConnectionsCount":1,"hasSelectedConnection":false,"errorCode":"","getScopesWillCount":0,"getScopesWontCount":0,"apiCreatorDisplayName":"","isRuntimeServiceApi":false,"releaseStatus":"Production","tier":"Standard","serverSelectedConnectionId":"","clientSelectedConnectionId":"","hasTermsOfUse":false,"expectedResultDiff":{"showAddButton":false,"showChangeButton":true,"availableConnections":[{"connectionId":"connectionId","displayName":"displayName"}],"isOnPremiseConnection":true,"id":"app2"}},"title":"Converting runtime connection results into data to be displayed","sequence":10,"id":"mg8yk2eflf-kldtqfdp0j"}],"title":"Converting runtime connection results into data to be displayed","description":"These examples currently fail and need to be fixed see #1590998","tags":[]}],"title":"Converting connection data","description":"Rules:\n* Data from runtime can be converted into a format for display","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Connection/ConnectionDisplayDataConverter.Spec.js","id":"mg8yk2eflf","path":"Services/Connection"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fetching the most up to date connection information","status":"pass","exception":{},"rawTitle":"fetching the most up to date connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-16b7853qen4-16azzu3wncw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connectionDisplayMap = new Map();\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.updateAndRecommendAllConnectionsForAppAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.updateConnectionDisplayDataMapAsync(appId, connectionDisplayMap, false);\r\n        })","duration":3},{"title":"the updated connection information for provided app id and connections are requested","status":"pass","exception":{},"rawTitle":"the updated connection information for provided app id and connections are requested","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-16b7853qen4-jkruaqy2m8","code":"() => {\r\n            runtimeAdapterStub.calledWith(appId, connectionDisplayMap, Services_1.ConnectionDisplayDataConverter.convertIntoIConnectionDisplayData, connectionService.getClientSelectedConnectionId).should.be.eql(true);\r\n        }","duration":0}],"title":"Fetching the most up to date connection information","description":"","tags":[],"sequence":1,"id":"13r881az6b-16b7853qen4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"adding a connection","status":"pass","exception":{},"rawTitle":"adding a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-17vp5a8e0z1-16b1eod839c","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connectionReferenceId = \"connectionReferenceId\";\r\n            addedConnectionId = \"addedConnectionId\";\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.addConnectionAsync.name).returns(Promise.resolve(addedConnectionId));\r\n            connectionService = new Services_1.ConnectionService();\r\n            result = yield connectionService.addConnectionAsync(appId, connectionReferenceId);\r\n        })","duration":1},{"title":"the connection is added","status":"pass","exception":{},"rawTitle":"the connection is added","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-17vp5a8e0z1-10k3b8d6om5","code":"() => {\r\n            runtimeAdapterStub.calledWith(appId, connectionReferenceId).should.be.eql(true);\r\n        }","duration":0},{"title":"the connection added is returned","status":"pass","exception":{},"rawTitle":"the connection added is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"13r881az6b-17vp5a8e0z1-15vnp4fkoal","code":"() => {\r\n            result.should.be.eql(addedConnectionId);\r\n        }","duration":0}],"title":"Adding a connection","description":"","tags":[],"sequence":2,"id":"13r881az6b-17vp5a8e0z1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"fix a connection","status":"pass","exception":{},"rawTitle":"fix a connection","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-17voz3p4crn-vgpcho2x6z","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connectionId = \"connectionId\";\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.fixConnectionAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.fixConnectionAsync(appId, connectionId);\r\n        })","duration":1},{"title":"the connection is fixed","status":"pass","exception":{},"rawTitle":"the connection is fixed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-17voz3p4crn-md8ugyh8fx","code":"() => {\r\n            runtimeAdapterStub.calledWith(appId, connectionId).should.be.eql(true);\r\n        }","duration":0}],"title":"Fixing a connection","description":"","tags":[],"sequence":3,"id":"13r881az6b-17voz3p4crn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections","status":"pass","exception":{},"rawTitle":"saving connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-c2oca9fkkb-a54v05f8s0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connections = null;\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.saveConnectionsAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.saveConnectionsForAppAsync(appId, connections);\r\n        })","duration":1},{"title":"no connections are saved","status":"pass","exception":{},"rawTitle":"no connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-c2oca9fkkb-jkq2ypf74w","code":"() => {\r\n            runtimeAdapterStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"Saving a connections for an app with no connections","description":"","tags":[],"sequence":4,"id":"13r881az6b-c2oca9fkkb"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections","status":"pass","exception":{},"rawTitle":"saving connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-a597l2vcyo-a54v05f8s0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connections = new Map();\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.saveConnectionsAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.saveConnectionsForAppAsync(appId, connections);\r\n        })","duration":1},{"title":"no connections are saved","status":"pass","exception":{},"rawTitle":"no connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-a597l2vcyo-jkq2ypf74w","code":"() => {\r\n            runtimeAdapterStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"Saving a connections for an app with zero connections","description":"","tags":[],"sequence":5,"id":"13r881az6b-a597l2vcyo"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections","status":"pass","exception":{},"rawTitle":"saving connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-q9iwpol5e5-a54v05f8s0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connections = new Map();\r\n            for (let i = 0; i < 5; i++) {\r\n                connections.set(i.toString(), {\r\n                    connectionReferenceId: \"connectionReferenceId\",\r\n                    iconUri: \"iconUri\",\r\n                    displayName: \"displayName\",\r\n                    showScopeLink: false,\r\n                    hasSelectedConnection: true,\r\n                    hasApiCreator: false,\r\n                    showAddButton: false,\r\n                    showChangeButton: true,\r\n                    showPremiumTag: false,\r\n                    showPreviewTag: false,\r\n                    showEnterpriseTag: false,\r\n                    showDataSets: false,\r\n                    availableConnections: [],\r\n                    serverSelectedConnectionId: i.toString(),\r\n                    clientSelectedConnectionId: i.toString(),\r\n                    sharedConnectionId: \"\",\r\n                    gatewayObjectIdHint: \"\",\r\n                    isOnPremiseConnection: false,\r\n                    dataSources: [],\r\n                    id: \"\"\r\n                });\r\n            }\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.saveConnectionsAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.saveConnectionsForAppAsync(appId, connections);\r\n        })","duration":1},{"title":"no connections are saved","status":"pass","exception":{},"rawTitle":"no connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-q9iwpol5e5-jkq2ypf74w","code":"() => {\r\n            runtimeAdapterStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"Saving a connections for an app with no unchanged connections","description":"","tags":[],"sequence":6,"id":"13r881az6b-q9iwpol5e5"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections","status":"pass","exception":{},"rawTitle":"saving connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-a57z2b3400-a54v05f8s0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connections = new Map();\r\n            expectedConnectionsToBeSaved = new Map();\r\n            for (let i = 0; i < 5; i++) {\r\n                connections.set(i.toString(), {\r\n                    connectionReferenceId: \"connectionReferenceId\",\r\n                    iconUri: \"iconUri\",\r\n                    displayName: \"displayName\",\r\n                    showScopeLink: false,\r\n                    hasSelectedConnection: true,\r\n                    hasApiCreator: false,\r\n                    showAddButton: false,\r\n                    showChangeButton: true,\r\n                    showPremiumTag: false,\r\n                    showPreviewTag: false,\r\n                    showEnterpriseTag: false,\r\n                    showDataSets: false,\r\n                    availableConnections: [],\r\n                    serverSelectedConnectionId: null,\r\n                    clientSelectedConnectionId: i.toString(),\r\n                    sharedConnectionId: \"\",\r\n                    gatewayObjectIdHint: \"\",\r\n                    isOnPremiseConnection: false,\r\n                    dataSources: [],\r\n                    id: \"\"\r\n                });\r\n                expectedConnectionsToBeSaved.set(i.toString(), i.toString());\r\n            }\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.saveConnectionsAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.saveConnectionsForAppAsync(appId, connections);\r\n        })","duration":1},{"title":"connections are saved","status":"pass","exception":{},"rawTitle":"connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-a57z2b3400-15qx7bg0cww","code":"() => {\r\n            runtimeAdapterStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connections that need to be saved are passed in","status":"pass","exception":{},"rawTitle":"the connections that need to be saved are passed in","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"13r881az6b-a57z2b3400-j1pv5n64fp","code":"() => {\r\n            runtimeAdapterStub.calledWith(appId, expectedConnectionsToBeSaved).should.be.eql(true);\r\n        }","duration":0}],"title":"Saving a connections for an app with changes in all connections","description":"","tags":[],"sequence":7,"id":"13r881az6b-a57z2b3400"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"saving connections","status":"pass","exception":{},"rawTitle":"saving connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"13r881az6b-55kbo03h1-a54v05f8s0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            connections = new Map();\r\n            expectedConnectionsToBeSaved = new Map();\r\n            for (let i = 0; i < 2; i++) {\r\n                connections.set(i.toString(), {\r\n                    connectionReferenceId: \"connectionReferenceId\",\r\n                    iconUri: \"iconUri\",\r\n                    displayName: \"displayName\",\r\n                    showScopeLink: false,\r\n                    hasSelectedConnection: true,\r\n                    hasApiCreator: false,\r\n                    showAddButton: false,\r\n                    showChangeButton: true,\r\n                    showPremiumTag: false,\r\n                    showPreviewTag: false,\r\n                    showEnterpriseTag: false,\r\n                    showDataSets: false,\r\n                    availableConnections: [],\r\n                    serverSelectedConnectionId: null,\r\n                    clientSelectedConnectionId: i.toString(),\r\n                    sharedConnectionId: \"\",\r\n                    gatewayObjectIdHint: \"\",\r\n                    isOnPremiseConnection: false,\r\n                    dataSources: [],\r\n                    id: \"\"\r\n                });\r\n                expectedConnectionsToBeSaved.set(i.toString(), i.toString());\r\n            }\r\n            for (let i = 3; i < 6; i++) {\r\n                connections.set(i.toString(), {\r\n                    connectionReferenceId: \"connectionReferenceId\",\r\n                    iconUri: \"iconUri\",\r\n                    displayName: \"displayName\",\r\n                    showScopeLink: false,\r\n                    hasSelectedConnection: true,\r\n                    hasApiCreator: false,\r\n                    showAddButton: false,\r\n                    showChangeButton: true,\r\n                    showPremiumTag: false,\r\n                    showPreviewTag: false,\r\n                    showEnterpriseTag: false,\r\n                    showDataSets: false,\r\n                    availableConnections: [],\r\n                    serverSelectedConnectionId: i.toString(),\r\n                    clientSelectedConnectionId: i.toString(),\r\n                    sharedConnectionId: \"\",\r\n                    gatewayObjectIdHint: \"\",\r\n                    isOnPremiseConnection: false,\r\n                    dataSources: [],\r\n                    id: \"\"\r\n                });\r\n            }\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.saveConnectionsAsync.name);\r\n            connectionService = new Services_1.ConnectionService();\r\n            yield connectionService.saveConnectionsForAppAsync(appId, connections);\r\n        })","duration":1},{"title":"connections are saved","status":"pass","exception":{},"rawTitle":"connections are saved","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"13r881az6b-55kbo03h1-15qx7bg0cww","code":"() => {\r\n            runtimeAdapterStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the connections that need to be saved are passed in","status":"pass","exception":{},"rawTitle":"the connections that need to be saved are passed in","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"13r881az6b-55kbo03h1-j1pv5n64fp","code":"() => {\r\n            runtimeAdapterStub.calledWith(appId, expectedConnectionsToBeSaved).should.be.eql(true);\r\n        }","duration":0}],"title":"Saving a connections for an app with changes in some connections","description":"","tags":[],"sequence":8,"id":"13r881az6b-55kbo03h1"}],"title":"Getting connection data from the service","description":"Rules:\n* Fetches the most up to date connection information for the specified app and connections\n* Connections can be sorted\n* Connections can be added\n* Connections can be saved\n* Connections can be fixed","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Connection/ConnectionService.Spec.js","id":"13r881az6b","path":"Services/Connection"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":79,"failedCount":0,"pendingCount":0,"totalCount":79,"totalRuleViolations":0,"duration":186,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":78,"failedCount":0,"pendingCount":0,"totalCount":78,"totalRuleViolations":0,"duration":174,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":2},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is Error,extra arg","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-dkc3nzfsjn","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":16},{"title":"the request should have resulted in a call to controller action function: false","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-10kvidsb0ol","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionArgs","errorTypesSetVersion","shouldCallController","errorName","reasonName","reasonMessage","expectedSerializedVersion"],["[\"Error\", \"extra arg\"]","0","false","LocalPlugins.Platform.LocalPluginError","InvalidActionArgs","Too many arguments specified. Allowed: 1. Got: 2.","1"],["[]","0","false","LocalPlugins.Platform.LocalPluginError","InvalidActionArgs","The value for argument 'errorKind' (index 0) is invalid.","1"],["[\"\"]","0","false","LocalPlugins.Platform.LocalPluginError","InvalidActionArgs","The value for argument 'errorKind' (index 0) is invalid.","1"]]},{"name":"","description":"","dataTable":[["actionArgs","errorTypesSetVersion","shouldCallController","errorName","errorMessage","expectedSerializedVersion"],["[\"Error\"]","null","true","Error","Throwing an Error error.","0"],["[\"Error\"]","0","true","Error","Throwing an Error error.","0"],["[\"Error\"]","1","true","Error","Throwing an Error error.","0"]]},{"name":"","description":"","dataTable":[["actionArgs","errorTypesSetVersion","shouldCallController","errorName","errorMessage","expectedSerializedVersion"],["[\"ApplicationError\"]","null","true","Core.ApplicationError","Throwing an ApplicationError error.","0"],["[\"ApplicationError\"]","0","true","Core.ApplicationError","Throwing an ApplicationError error.","0"],["[\"ApplicationError\"]","1","true","Core.ApplicationError","Throwing an ApplicationError error.","0"]]},{"name":"","description":"","dataTable":[["actionArgs","errorTypesSetVersion","shouldCallController","errorName","errorMessage","expectedSerializedVersion"],["[\"ServiceError\"]","null","true","AppMagic.Services.ServiceError","Throwing a ServiceError error.","0"],["[\"ServiceError\"]","0","true","AppMagic.Services.ServiceError","Throwing a ServiceError error.","0"],["[\"ServiceError\"]","1","true","AppMagic.Services.ServiceError","Throwing a ServiceError error.","0"],["[\"ServiceError\"]","2","true","AppMagic.Services.ServiceError","Throwing a ServiceError error.","1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":19,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":2},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is Error,extra arg","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-dkc3nzfsjn","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":16},{"title":"the request should have resulted in a call to controller action function: false","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-10kvidsb0ol","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["Error","extra arg"],"errorTypesSetVersion":0,"shouldCallController":false,"errorName":"LocalPlugins.Platform.LocalPluginError","reasonName":"InvalidActionArgs","reasonMessage":"Too many arguments specified. Allowed: 1. Got: 2.","expectedSerializedVersion":1},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":1,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":7},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is ","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-134tcdw2obn","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the request should have resulted in a call to controller action function: false","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-10kvidsb0ol","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":[],"errorTypesSetVersion":0,"shouldCallController":false,"errorName":"LocalPlugins.Platform.LocalPluginError","reasonName":"InvalidActionArgs","reasonMessage":"The value for argument 'errorKind' (index 0) is invalid.","expectedSerializedVersion":1},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":2,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":21},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":2},{"title":"actionArgs for action 'mockActionThatThrows' is ","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-134tcdw2obn","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":1},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":4},{"title":"the request should have resulted in a call to controller action function: false","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-10kvidsb0ol","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":[""],"errorTypesSetVersion":0,"shouldCallController":false,"errorName":"LocalPlugins.Platform.LocalPluginError","reasonName":"InvalidActionArgs","reasonMessage":"The value for argument 'errorKind' (index 0) is invalid.","expectedSerializedVersion":1},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":3,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":8},{"title":"errorTypesSetVersion is set to null","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-obl3zxp2b9","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is Error","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-7nsz2kfby8","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["Error"],"errorTypesSetVersion":null,"shouldCallController":true,"errorName":"Error","errorMessage":"Throwing an Error error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":4,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":6},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is Error","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-7nsz2kfby8","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":1}],"example":{"actionArgs":["Error"],"errorTypesSetVersion":0,"shouldCallController":true,"errorName":"Error","errorMessage":"Throwing an Error error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":5,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":6},{"title":"errorTypesSetVersion is set to 1","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-pzrsb441ps","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is Error","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-7nsz2kfby8","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["Error"],"errorTypesSetVersion":1,"shouldCallController":true,"errorName":"Error","errorMessage":"Throwing an Error error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":6,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":6},{"title":"errorTypesSetVersion is set to null","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-obl3zxp2b9","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is ApplicationError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-c7a8a12cgt","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ApplicationError"],"errorTypesSetVersion":null,"shouldCallController":true,"errorName":"Core.ApplicationError","errorMessage":"Throwing an ApplicationError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":7,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":7},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is ApplicationError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-c7a8a12cgt","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ApplicationError"],"errorTypesSetVersion":0,"shouldCallController":true,"errorName":"Core.ApplicationError","errorMessage":"Throwing an ApplicationError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":8,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":25},{"title":"errorTypesSetVersion is set to 1","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-pzrsb441ps","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":2},{"title":"actionArgs for action 'mockActionThatThrows' is ApplicationError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-c7a8a12cgt","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ApplicationError"],"errorTypesSetVersion":1,"shouldCallController":true,"errorName":"Core.ApplicationError","errorMessage":"Throwing an ApplicationError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":9,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":12},{"title":"errorTypesSetVersion is set to null","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-obl3zxp2b9","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is ServiceError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-vk7275walv","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ServiceError"],"errorTypesSetVersion":null,"shouldCallController":true,"errorName":"AppMagic.Services.ServiceError","errorMessage":"Throwing a ServiceError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":10,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":8},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is ServiceError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-vk7275walv","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":3},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":1}],"example":{"actionArgs":["ServiceError"],"errorTypesSetVersion":0,"shouldCallController":true,"errorName":"AppMagic.Services.ServiceError","errorMessage":"Throwing a ServiceError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":11,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":11},{"title":"errorTypesSetVersion is set to 1","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-pzrsb441ps","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"actionArgs for action 'mockActionThatThrows' is ServiceError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-vk7275walv","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ServiceError"],"errorTypesSetVersion":1,"shouldCallController":true,"errorName":"AppMagic.Services.ServiceError","errorMessage":"Throwing a ServiceError error.","expectedSerializedVersion":0},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":12,"id":"mwp699z42w-88tjcio6z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","status":"pass","exception":{},"rawTitle":"ActionsControllerPluginHandler created as part of RuntimePluginCreator._registerKnownPlugins","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-88tjcio6z-fme37scfed","code":"() => {\r\n            controllerActionSpy = sinon.spy(Controller.prototype, \"mockActionThatThrows\");\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                // Setup plugin Version Manager to exchange versions\r\n                const pluginVersionMgr = this.pluginVersionManager;\r\n                pluginVersionMgr.setAppPluginVersionHashTable();\r\n                pluginVersionMgr.setClientPluginVersionHashTable();\r\n                this.registerServicePluginFactory(pluginDefinition.serviceName, commChannel => this.createLocalPluginHandler(commChannel, new Controller()));\r\n            });\r\n        }","duration":6},{"title":"errorTypesSetVersion is set to 2","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"mwp699z42w-88tjcio6z-r2cu2erm0w","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"actionArgs for action 'mockActionThatThrows' is ServiceError","status":"pass","exception":{},"rawTitle":"actionArgs for action 'mockActionThatThrows' is <actionArgs>","description":"","docString":"","values":["mockActionThatThrows"],"ruleViolations":[],"type":"and","sequence":3,"id":"mwp699z42w-88tjcio6z-vk7275walv","code":"() => {\r\n            request.action = \"mockActionThatThrows\";\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n        }","duration":0},{"title":"the action request is sent","status":"pass","exception":{},"rawTitle":"the action request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"mwp699z42w-88tjcio6z-cn75hizj40","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":1},{"title":"the request should have resulted in a call to controller action function: true","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to controller action function: <shouldCallController>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"mwp699z42w-88tjcio6z-lr2rrw8yao","code":"() => {\r\n            controllerActionSpy.callCount.should.be.eql(scenarioOutlineContext.example.shouldCallController ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"mwp699z42w-88tjcio6z-7o1erwlilc","code":"() => {\r\n            let expectedErrorMessage;\r\n            if (scenarioOutlineContext.example.errorName === \"LocalPlugins.Platform.LocalPluginError\")\r\n                expectedErrorMessage = `Error occurred executing action 'mockActionThatThrows' for plugin with serviceName '${pluginDefinition.serviceName}'. ${scenarioOutlineContext.example.reasonMessage}`;\r\n            else\r\n                expectedErrorMessage = scenarioOutlineContext.example.errorMessage;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.errorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"actionArgs":["ServiceError"],"errorTypesSetVersion":2,"shouldCallController":true,"errorName":"AppMagic.Services.ServiceError","errorMessage":"Throwing a ServiceError error.","expectedSerializedVersion":1},"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","sequence":13,"id":"mwp699z42w-88tjcio6z"}],"title":"Controller action should be able to throw an error and the handler should automatically serialize it.","description":"Errors thrown by the actual controller should get serialized too.\nDefault serialization is done even if the plugin metadata hasn't been swapped yet.\nMessage-only errors end up getting serialized the same no matter the errorTypesSetVersion used.\nCustom serialized errors should get default serialization when the errorTypesSetVersion is not at least the first version which the error was serialized.\ne.g. ServiceError should only get serialized with the custom serializedVersion if the errorTypesSetVersion is at least 2.","tags":[]}],"title":"ActionsControllerPluginHandler should serialize plugin Errors as Cordova error results.","description":"The ActionsControllerPluginHandler represents a CordovaPlugin implementation that acts as a service router\nfor one or more LocalPlugin Controller instances. Each Controller is bound to a single major version.\nThe handler provides common overhead tasks like:\n- Routing messages based on service version and actionName.\n- Validating action args and result values against the serviceDefinition.\n- Provide generalized error handling and serialization; the controller only needs to throw an error.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/ActionsControllerPluginHandler.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the MockCordovaPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the MockCordovaPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"mwp699z42w-9pbsb4-vl36bta48j","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            messageSpy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            messageSpy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            messageSpy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Mocks_1.MockCordovaPluginService);\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            // Setup the base request with a valid call to our mockAction.\r\n            request = new Mocks_1.MockCordovaPluginServiceRequest();\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            request.service = pluginDefinition.serviceName;\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":12}],"title":"","description":"","tags":[],"id":"mwp699z42w-9pbsb4"},"id":"mwp699z42w","path":"Services/CordovaPlugin"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":23,"failedCount":0,"pendingCount":0,"totalCount":23,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"sending a plugin result","status":"pass","exception":{},"rawTitle":"sending a plugin result","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-2rqjkob6bk-fnadh9biln","code":"() => {\r\n            contextSendStub = sinon.stub(abus_1.MessageHandlerContext.prototype, \"send\");\r\n            mapDeleteSpy = sinon.spy(Map.prototype, Map.prototype.delete.name);\r\n            inputResult = new Modules.ApiHost.CordovaPluginResult(Modules.ApiHost.Status.JsonException, \"test message\");\r\n            callbackId = \"test callback id\";\r\n            communicationChannel.setupContext(callbackId, messageHandlerContext);\r\n            communicationChannel.sendPluginResult(inputResult, callbackId);\r\n            resultSent = contextSendStub.firstCall.args[0];\r\n        }","duration":6},{"title":"a message should be sent","status":"pass","exception":{},"rawTitle":"a message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-2rqjkob6bk-j6zyzcwtor","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the message should have isPluginCall set to true","status":"pass","exception":{},"rawTitle":"the message should have isPluginCall set to true","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a58wwcw5sw-2rqjkob6bk-lr239aqf4w","code":"() => {\r\n            resultSent.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"the message should have the callbackId set to the provided callbackId","status":"pass","exception":{},"rawTitle":"the message should have the callbackId set to the provided callbackId","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"a58wwcw5sw-2rqjkob6bk-tgnx1qnqk3","code":"() => {\r\n            resultSent.callbackId.should.be.eql(callbackId);\r\n        }","duration":0},{"title":"the message should have the status set to the provided status","status":"pass","exception":{},"rawTitle":"the message should have the status set to the provided status","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"a58wwcw5sw-2rqjkob6bk-10wnlaayzcb","code":"() => {\r\n            resultSent.status.should.be.eql(inputResult.status);\r\n        }","duration":0},{"title":"the message should have the args set to the provided message in an array","status":"pass","exception":{},"rawTitle":"the message should have the args set to the provided message in an array","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"a58wwcw5sw-2rqjkob6bk-7gky8o1qob","code":"() => {\r\n            resultSent.args.should.be.eql([inputResult.rowMessage]);\r\n        }","duration":0},{"title":"the message should have keepCallback set to the provided keepCallback value","status":"pass","exception":{},"rawTitle":"the message should have keepCallback set to the provided keepCallback value","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"a58wwcw5sw-2rqjkob6bk-lr1faz35i8","code":"() => {\r\n            resultSent.keepCallback.should.be.eql(inputResult.keepCallback);\r\n        }","duration":0},{"title":"the context should be deleted","status":"pass","exception":{},"rawTitle":"the context should be deleted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"a58wwcw5sw-2rqjkob6bk-jkrjm0zqbk","code":"() => {\r\n            mapDeleteSpy.returned(true).should.be.eql(true);\r\n        }","duration":1}],"title":"Sending a plugin result from the runtime plugin to the published app","description":"","tags":[],"sequence":1,"id":"a58wwcw5sw-2rqjkob6bk"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the appLoadedEvent","status":"pass","exception":{},"rawTitle":"getting the appLoadedEvent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-kle1danjtp-pehyburs0t","code":"() => {\r\n            try {\r\n                const appLoadedEvent = communicationChannel.appLoadedEvent;\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":0},{"title":"an exception with description 'Not implemented: appLoadedEvent' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: appLoadedEvent' should be thrown","description":"","docString":"","values":["Not implemented: appLoadedEvent"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-kle1danjtp-4175mls06t","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Accessing the event indicating whether the app was loaded","description":"","tags":[],"sequence":2,"id":"a58wwcw5sw-kle1danjtp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the appFailedEvent","status":"pass","exception":{},"rawTitle":"getting the appFailedEvent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-yixow3ozz9-cn3rl23fkw","code":"() => {\r\n            try {\r\n                const appFailedEvent = communicationChannel.appFailedEvent;\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":1},{"title":"an exception with description 'Not implemented: appFailedEvent' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: appFailedEvent' should be thrown","description":"","docString":"","values":["Not implemented: appFailedEvent"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-yixow3ozz9-16b92azeps0","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Accessing the event indicating whether the app failed loading","description":"","tags":[],"sequence":3,"id":"a58wwcw5sw-yixow3ozz9"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the toggleNavbarEvent","status":"pass","exception":{},"rawTitle":"getting the toggleNavbarEvent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-7o1l1dwp0g-cn63tkj874","code":"() => {\r\n            try {\r\n                const toggleNavbarEvent = communicationChannel.toggleNavbarEvent;\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":0},{"title":"an exception with description 'Not implemented: toggleNavbarEvent' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: toggleNavbarEvent' should be thrown","description":"","docString":"","values":["Not implemented: toggleNavbarEvent"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-7o1l1dwp0g-touhxwqkgb","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Accessing the event indicating whether to toggle the nav bar","description":"","tags":[],"sequence":4,"id":"a58wwcw5sw-7o1l1dwp0g"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"sending an app exit event","status":"pass","exception":{},"rawTitle":"sending an app exit event","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-167loxvtf1-1694kep8sth","code":"() => {\r\n            try {\r\n                communicationChannel.sendAppExitEvent();\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":0},{"title":"an exception with description 'Not implemented: sendAppExitEvent' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: sendAppExitEvent' should be thrown","description":"","docString":"","values":["Not implemented: sendAppExitEvent"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-167loxvtf1-un18m92b85","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Sending an event to the published app indicating that an app exit was requested","description":"","tags":[],"sequence":5,"id":"a58wwcw5sw-167loxvtf1"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling proxyWin","status":"pass","exception":{},"rawTitle":"calling proxyWin","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-cn6gzefokg-byai113fmb","code":"() => {\r\n            try {\r\n                communicationChannel.proxyWin(null);\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":1},{"title":"an exception with description 'Not implemented: proxyWin' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: proxyWin' should be thrown","description":"","docString":"","values":["Not implemented: proxyWin"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-cn6gzefokg-16b2vxdjaog","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Wrapping the callback id in a successful CordovaPluginResult object","description":"","tags":[],"sequence":6,"id":"a58wwcw5sw-cn6gzefokg"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"calling proxyFail","status":"pass","exception":{},"rawTitle":"calling proxyFail","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-cncymy7074-11l4xbl3q80","code":"() => {\r\n            try {\r\n                communicationChannel.proxyFail(null);\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":0},{"title":"an exception with description 'Not implemented: proxyFail' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: proxyFail' should be thrown","description":"","docString":"","values":["Not implemented: proxyFail"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-cncymy7074-16b5f7ji3i8","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Wrapping the callback id in a failed CordovaPluginResult object","description":"","tags":[],"sequence":7,"id":"a58wwcw5sw-cncymy7074"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the app host element","status":"pass","exception":{},"rawTitle":"getting the app host element","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a58wwcw5sw-c7gorgmf1x-mar2etdydp","code":"() => {\r\n            try {\r\n                communicationChannel.appHostElement();\r\n            }\r\n            catch (exception) {\r\n                error = exception;\r\n            }\r\n        }","duration":0},{"title":"an exception with description 'Not implemented: appHostElement' should be thrown","status":"pass","exception":{},"rawTitle":"an exception with description 'Not implemented: appHostElement' should be thrown","description":"","docString":"","values":["Not implemented: appHostElement"],"ruleViolations":[],"type":"Then","sequence":2,"id":"a58wwcw5sw-c7gorgmf1x-x8kbsc5az9","code":"() => {\r\n            error.should.be.eql(stepContext.values[0]);\r\n        }","duration":1}],"title":"Accessing the html object that contains the app host element","description":"","tags":[],"sequence":8,"id":"a58wwcw5sw-c7gorgmf1x"}],"title":"Provide a communication channel between the published app and the runtime host plugins","description":"Existing runtime plugins in the host require an implementation of the ICommunicationChannel.\nThe CordovaCommunicationChannel implements this interface and is a wrapper over the message pipeline","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/CordovaCommunicationChannel.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a new instance of the CordovaCommunicationChannel is set up with a message handler context","status":"pass","exception":{},"rawTitle":"a new instance of the CordovaCommunicationChannel is set up with a message handler context","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a58wwcw5sw-9pbsb4-mqpqop8dyt","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            messageHandlerContext = new abus_1.MessageHandlerContext(bus);\r\n            communicationChannel = new Services.CordovaCommunicationChannel();\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"a58wwcw5sw-9pbsb4"},"id":"a58wwcw5sw","path":"Services/CordovaPlugin"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"converting a CordovaPluginRequest to an ICommandInfo","status":"pass","exception":{},"rawTitle":"converting a CordovaPluginRequest to an ICommandInfo","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"6s0gn12u5h-xcy64mt4yd-147xvbqynfv","code":"() => {\r\n            cordovaPluginRequest = new Services.CordovaPluginRequest();\r\n            cordovaPluginRequest.action = \"some action\";\r\n            cordovaPluginRequest.actionArgs = [\"arg1\", \"arg2\"];\r\n            cordovaPluginRequest.antiCSRFToken = \"some token\";\r\n            cordovaPluginRequest.callbackId = \"some callback id\";\r\n            cordovaPluginRequest.isPluginCall = true;\r\n            cordovaPluginRequest.service = \"some service\";\r\n            convertedCommandInfo = Services.CordovaPluginRequest.convertToICommandInfo(cordovaPluginRequest);\r\n        }","duration":1},{"title":"a converted ICommandInfo should be returned","status":"pass","exception":{},"rawTitle":"a converted ICommandInfo should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"6s0gn12u5h-xcy64mt4yd-15vnpb9ok99","code":"() => {\r\n            should.exist(convertedCommandInfo);\r\n        }","duration":0},{"title":"the actionName on the ICommandInfo should be set to the action on the CordovaPluginRequest","status":"pass","exception":{},"rawTitle":"the actionName on the ICommandInfo should be set to the action on the CordovaPluginRequest","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"6s0gn12u5h-xcy64mt4yd-vlzr5aik5p","code":"() => {\r\n            convertedCommandInfo.actionName.should.be.eql(cordovaPluginRequest.action);\r\n        }","duration":0},{"title":"the serviceName on the ICommandInfo should be set to the service on the CordovaPluginRequest","status":"pass","exception":{},"rawTitle":"the serviceName on the ICommandInfo should be set to the service on the CordovaPluginRequest","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"6s0gn12u5h-xcy64mt4yd-dvfp4z6tod","code":"() => {\r\n            convertedCommandInfo.serviceName.should.be.eql(cordovaPluginRequest.service);\r\n        }","duration":0},{"title":"the args on the ICommandInfo should be set to the actionArgs on the CordovaPluginRequest","status":"pass","exception":{},"rawTitle":"the args on the ICommandInfo should be set to the actionArgs on the CordovaPluginRequest","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"6s0gn12u5h-xcy64mt4yd-s2a06comfn","code":"() => {\r\n            convertedCommandInfo.args.should.be.eql(cordovaPluginRequest.actionArgs);\r\n        }","duration":0},{"title":"the callbackId on the ICommandInfo should be set to the callbackId on the CordovaPluginRequest","status":"pass","exception":{},"rawTitle":"the callbackId on the ICommandInfo should be set to the callbackId on the CordovaPluginRequest","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"6s0gn12u5h-xcy64mt4yd-e3evmtg8x7","code":"() => {\r\n            convertedCommandInfo.callbackId.should.be.eql(cordovaPluginRequest.callbackId);\r\n        }","duration":0}],"title":"When converting the request object to an ICommandInfo for the runtime plugins","description":"","tags":[],"sequence":1,"id":"6s0gn12u5h-xcy64mt4yd"}],"title":"Request object sent by the published app to the app host","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/CordovaPluginRequest.Spec.js","id":"6s0gn12u5h","path":"Services/CordovaPlugin"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":298,"failedCount":0,"pendingCount":0,"totalCount":298,"totalRuleViolations":1,"duration":133,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"'24' plugins should be registered","status":"pass","exception":{},"rawTitle":"'24' plugins should be registered","description":"","docString":"","values":[24],"ruleViolations":[{"rule":5,"title":"Setting up the cordova plugin router"}],"type":"Then","sequence":1,"id":"xcy5hj4qol-ogrtdfglgr-jklqwmvxr4","code":"() => {\r\n            Services.findAllDecoratedClasses(Plugins).length.should.be.eql(stepContext.values[0], \"If this test fails, then you need to change the value mentioned in the then description and also add/remove the plugin from the routing test below\");\r\n        }","duration":0}],"title":"Setting up the cordova plugin router","description":"","tags":[],"sequence":1,"id":"xcy5hj4qol-ogrtdfglgr"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":286,"failedCount":0,"pendingCount":0,"totalCount":286,"totalRuleViolations":0,"duration":122,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Device service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-yt0hdtqwgb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":7},{"title":"the Device service is registered with message type CordovaDeviceRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn6ovp6s80","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the CordovaDeviceRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-t8dyl12sg3","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":1},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a CordovaDeviceRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-12by1zvbpgd","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["service","messageType","capability","accessGranted"],["Device","CordovaDeviceRequest","","true"],["AppLifecycle","AppLifecycleRequest","","true"],["AppPowerAppsClientPlugin","AppPowerAppsClientRequest","","true"],["Keyboard","KeyboardRequest","","true"],["NetworkStatus","NetworkStatusRequest","","true"],["PowerAppsServicePlugin","PowerAppsServiceRequest","","true"],["PublishedAppTelemetry","PublishedAppTelemetryRequest","","true"],["StatusBar","StatusBarRequest","","true"],["UniversalLinks","UniversalLinksRequest","","true"],["Geolocation","GeoLocationRequest","2","true"],["Geolocation","GeoLocationRequest","2","false"],["AppIdentityServicePlugin","AppIdentityServiceRequest","","true"],["AppHttpClientPlugin","AppHttpClientRequest","","true"],["SendHttpPipelinePlugin","SendHttpPipelineRequest","","true"],["UrlLauncherPlugin","UrlLauncherRequest","","true"],["VersionSupport","VersionSupportRequest","","true"],["CanvasCamera","CanvasCameraPluginRequest","0","true"],["CanvasCamera","CanvasCameraPluginRequest","0","false"],["SienaMicPlugin","SienaMicPluginRequest","1","true"],["SienaMicPlugin","SienaMicPluginRequest","1","false"],["SienaFilePickerPlugin","FilePickerRequest","","true"],["Camera","AddMediaCameraRequest","","true"],["ActionSheet","AndroidActionSheetRequest","","true"],["RuntimeFunctionsPlugin","RuntimeFunctionsRequest","","true"],["Accelerometer","AccelerometerRequest","","true"],["Compass","CompassRequest","","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Device service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-yt0hdtqwgb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":7},{"title":"the Device service is registered with message type CordovaDeviceRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn6ovp6s80","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the CordovaDeviceRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-t8dyl12sg3","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":1},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a CordovaDeviceRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-12by1zvbpgd","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Device","messageType":"CordovaDeviceRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the AppLifecycle service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqyc9cu2mo","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the AppLifecycle service is registered with message type AppLifecycleRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn6ecmv07k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AppLifecycleRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-j63pg1xvbx","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AppLifecycleRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jkldlmbe00","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"AppLifecycle","messageType":"AppLifecycleRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the AppPowerAppsClientPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lr0esz9uxs","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the AppPowerAppsClientPlugin service is registered with message type AppPowerAppsClientRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn45q8yw68","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AppPowerAppsClientRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a56i77h5g0","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":1},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AppPowerAppsClientRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-v8iw71nnqd","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"AppPowerAppsClientPlugin","messageType":"AppPowerAppsClientRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Keyboard service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lr4kl7pof4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":4},{"title":"the Keyboard service is registered with message type KeyboardRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn3i1tpzk0","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the KeyboardRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-xcy4vlvv9x","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a KeyboardRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-s4tfe4aqmz","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Keyboard","messageType":"KeyboardRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the NetworkStatus service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-6fbqzhnq9x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the NetworkStatus service is registered with message type NetworkStatusRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-tu4y391aal","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the NetworkStatusRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-vl3dz9rs0t","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a NetworkStatusRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-ol3u57oiit","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"NetworkStatus","messageType":"NetworkStatusRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the PowerAppsServicePlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-iubfv315k5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the PowerAppsServicePlugin service is registered with message type PowerAppsServiceRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-8azbbifol1","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the PowerAppsServiceRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-13visljr5kb","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a PowerAppsServiceRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-tgo2py3o4l","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"PowerAppsServicePlugin","messageType":"PowerAppsServiceRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the PublishedAppTelemetry service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqvr80gwzk","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the PublishedAppTelemetry service is registered with message type PublishedAppTelemetryRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cna2gupwao","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the PublishedAppTelemetryRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a58iot5zts","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a PublishedAppTelemetryRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jkrrzrq4ww","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"PublishedAppTelemetry","messageType":"PublishedAppTelemetryRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the StatusBar service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqxzfbacww","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":12},{"title":"the StatusBar service is registered with message type StatusBarRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-xdujhlwlu5","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the StatusBarRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-z4st68lxab","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a StatusBarRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jkkz542iio","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"StatusBar","messageType":"StatusBarRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the UniversalLinks service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-pxqm86jgjp","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":4},{"title":"the UniversalLinks service is registered with message type UniversalLinksRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cncev0xm3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the UniversalLinksRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a57ysn58fk","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a UniversalLinksRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-h1ofr6sg8l","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"UniversalLinks","messageType":"UniversalLinksRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Geolocation service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lr23r7q4f4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":7},{"title":"the Geolocation service is registered with message type GeoLocationRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-8jvaayqs19","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the GeoLocationRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-1802ywu0ru5","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a GeoLocationRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-tgo31qfeil","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":1}],"example":{"service":"Geolocation","messageType":"GeoLocationRequest","capability":2,"accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Geolocation service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lr23r7q4f4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":5},{"title":"the Geolocation service is registered with message type GeoLocationRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-8jvaayqs19","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the GeoLocationRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-1802ywu0ru5","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":1},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a GeoLocationRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-tgo31qfeil","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is false","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-lr27ltsbvk","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Geolocation","messageType":"GeoLocationRequest","capability":2,"accessGranted":false},"title":"Routing the messages to the Cordova Plugins Service","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the AppIdentityServicePlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-km689rac1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the AppIdentityServicePlugin service is registered with message type AppIdentityServiceRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-38aqbnwd7f","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AppIdentityServiceRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-8iyv5ecdyt","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AppIdentityServiceRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-5byg5pc40t","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"AppIdentityServicePlugin","messageType":"AppIdentityServiceRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":12,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the AppHttpClientPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqwk351cw0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the AppHttpClientPlugin service is registered with message type AppHttpClientRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-z5pdi9uahp","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AppHttpClientRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a5ajrmk98g","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AppHttpClientRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-8z6brq672j","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"AppHttpClientPlugin","messageType":"AppHttpClientRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":13,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the SendHttpPipelinePlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-6fbsxz4i9p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the SendHttpPipelinePlugin service is registered with message type SendHttpPipelineRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cnbtcv7nuo","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the SendHttpPipelineRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-1k8l8r8bgz","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a SendHttpPipelineRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-143sox8danv","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"SendHttpPipelinePlugin","messageType":"SendHttpPipelineRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":14,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the UrlLauncherPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-6fbt2ouso5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the UrlLauncherPlugin service is registered with message type UrlLauncherRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn668bls0w","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the UrlLauncherRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a53zeyi1wg","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a UrlLauncherRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jkorh599fk","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":1}],"example":{"service":"UrlLauncherPlugin","messageType":"UrlLauncherRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":15,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the VersionSupport service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-qpt82l7ji5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the VersionSupport service is registered with message type VersionSupportRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-z5p7bh0xyj","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the VersionSupportRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-11qw8vavrs5","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a VersionSupportRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jko97wvhk0","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"VersionSupport","messageType":"VersionSupportRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":16,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the CanvasCamera service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqxhaslkdc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":10},{"title":"the CanvasCamera service is registered with message type CanvasCameraPluginRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-abq3bbr951","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the CanvasCameraPluginRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a56nszxi00","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a CanvasCameraPluginRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jknm9w4q0g","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"CanvasCamera","messageType":"CanvasCameraPluginRequest","capability":0,"accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":17,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the CanvasCamera service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqxhaslkdc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the CanvasCamera service is registered with message type CanvasCameraPluginRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-abq3bbr951","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the CanvasCameraPluginRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a56nszxi00","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a CanvasCameraPluginRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jknm9w4q0g","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is false","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-lr27ltsbvk","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"CanvasCamera","messageType":"CanvasCameraPluginRequest","capability":0,"accessGranted":false},"title":"Routing the messages to the Cordova Plugins Service","sequence":18,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the SienaMicPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-4ngy756qb9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the SienaMicPlugin service is registered with message type SienaMicPluginRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-180z7enmz0b","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":1},{"title":"the SienaMicPluginRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a57zsy2gr4","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a SienaMicPluginRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-6ejdpw4vl7","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"SienaMicPlugin","messageType":"SienaMicPluginRequest","capability":1,"accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":19,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the SienaMicPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-4ngy756qb9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the SienaMicPlugin service is registered with message type SienaMicPluginRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-180z7enmz0b","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the SienaMicPluginRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a57zsy2gr4","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a SienaMicPluginRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-6ejdpw4vl7","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is false","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-lr27ltsbvk","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"SienaMicPlugin","messageType":"SienaMicPluginRequest","capability":1,"accessGranted":false},"title":"Routing the messages to the Cordova Plugins Service","sequence":20,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the SienaFilePickerPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lr23fwdcog","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the SienaFilePickerPlugin service is registered with message type FilePickerRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn90p4j9kw","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the FilePickerRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-cylr7ygho3","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a FilePickerRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-12bxw3xy8rv","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"SienaFilePickerPlugin","messageType":"FilePickerRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":21,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Camera service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-12cqaiwuud1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the Camera service is registered with message type AddMediaCameraRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-oikelw85rf","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AddMediaCameraRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-mpt5h2t2ub","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AddMediaCameraRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-itj77dw3hh","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":1},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Camera","messageType":"AddMediaCameraRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":22,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the ActionSheet service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqvkme28g0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the ActionSheet service is registered with message type AndroidActionSheetRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-z5p6foeo6b","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AndroidActionSheetRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-b525wharfh","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":1},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AndroidActionSheetRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-17nigzaylpp","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"ActionSheet","messageType":"AndroidActionSheetRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":23,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the RuntimeFunctionsPlugin service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqynd5xvcg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the RuntimeFunctionsPlugin service is registered with message type RuntimeFunctionsRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-cn3kignpa8","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the RuntimeFunctionsRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-he8q02xe63","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a RuntimeFunctionsRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jkj9wi7hog","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"RuntimeFunctionsPlugin","messageType":"RuntimeFunctionsRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":24,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Accelerometer service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-lqy74jerts","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"the Accelerometer service is registered with message type AccelerometerRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-38apd8v8qj","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":0},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the AccelerometerRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a531u3n4gw","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a AccelerometerRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-86e7f8pwcz","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Accelerometer","messageType":"AccelerometerRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":25,"id":"xcy5hj4qol-lqwcc0zmww"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for the Compass service","status":"pass","exception":{},"rawTitle":"receiving a message for the <service> service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lqwcc0zmww-me10jpt7dh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            accessGranted = scenarioOutlineContext.example.accessGranted;\r\n            capabilityString = convertCapabilityToString(scenarioOutlineContext.example.capability);\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            let returnedCapability = [];\r\n            if (scenarioOutlineContext.example.accessGranted && (scenarioOutlineContext.example.capability === 0 || scenarioOutlineContext.example.capability)) {\r\n                returnedCapability = [capabilityString];\r\n            }\r\n            getCapabilityStub = sinon.stub(Services.PublishedAppConsentService.prototype, Services.PublishedAppConsentService.prototype.getConsentedCapabilitiesAsync.name)\r\n                .returns(Promise.resolve(returnedCapability));\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            request = new Services[scenarioOutlineContext.example.messageType]();\r\n            request.service = scenarioOutlineContext.example.service;\r\n            request.callbackId = \"callbackId\" + scenarioOutlineContext.example.service;\r\n            request.antiCSRFToken = csrfToken;\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"the Compass service is registered with message type CompassRequest","status":"pass","exception":{},"rawTitle":"the <service> service is registered with message type <messageType>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lqwcc0zmww-14h9t8kxu9p","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            MessageSpy_1.MessageSpy.getMessageType(registration.request).should.be.eql(scenarioOutlineContext.example.messageType);\r\n        }","duration":1},{"title":"the correct capability is registered","status":"pass","exception":{},"rawTitle":"the correct capability is registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lqwcc0zmww-jkn0sodq3k","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            convertCapabilityToString(registration.capability).should.be.eql(capabilityString);\r\n        }","duration":0},{"title":"the CompassRequest is registered with the message bus","status":"pass","exception":{},"rawTitle":"the <messageType> is registered with the message bus","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-lqwcc0zmww-a53b8z1a1s","code":"() => {\r\n            const registration = Services.CordovaPluginRegistry.instance.getCordovaPlugin(scenarioOutlineContext.example.service);\r\n            const key = scenarioOutlineContext.example.messageType;\r\n            bus.subscriberCount(key).should.be.eql(1);\r\n        }","duration":0},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xcy5hj4qol-lqwcc0zmww-z5p8lxxhwz","code":"() => {\r\n            contextSendStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a CompassRequest message should be sent if the message was allowed","status":"pass","exception":{},"rawTitle":"a <messageType> message should be sent if the message was allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"xcy5hj4qol-lqwcc0zmww-jks538r11c","code":"() => {\r\n            const sentMessage = contextSendStub.getCall(0).args[0];\r\n            (scenarioOutlineContext.example.messageType === sentMessage.constructor.name).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the message should contain the app id when access granted is true","status":"pass","exception":{},"rawTitle":"the message should contain the app id when access granted is <accessGranted>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"xcy5hj4qol-lqwcc0zmww-10kvaef8v9n","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.appId === appId).should.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the status should be IllegalAccessException when access is not granted","status":"pass","exception":{},"rawTitle":"the status should be IllegalAccessException when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"xcy5hj4qol-lqwcc0zmww-jkkyqyw528","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.status === Modules_1.ApiHost.Status.IllegalAccessException).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the callback id should be passed on in the message","status":"pass","exception":{},"rawTitle":"the callback id should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"xcy5hj4qol-lqwcc0zmww-lr41ei8280","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            messageSent.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the keepCallback should be 'false' when access is not granted","status":"pass","exception":{},"rawTitle":"the keepCallback should be 'false' when access is not granted","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":10,"id":"xcy5hj4qol-lqwcc0zmww-rot7yepaet","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (messageSent.keepCallback === stepContext.values[0]).should.not.be.eql(accessGranted);\r\n        }","duration":0},{"title":"the args should be set to the correct value when access is not granted","status":"pass","exception":{},"rawTitle":"the args should be set to the correct value when access is not granted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"xcy5hj4qol-lqwcc0zmww-bgko5vef51","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            // args are only set on the disallowed messages\r\n            let expectedValue = [`Your app has no access to : ${capabilityString}`];\r\n            // we have to stringify the values because the equality operator between arrays make sure they are the same object which they are not\r\n            (JSON.stringify(messageSent.args) === JSON.stringify(expectedValue)).should.not.be.eql(accessGranted);\r\n        }","duration":0}],"example":{"service":"Compass","messageType":"CompassRequest","capability":"","accessGranted":true},"title":"Routing the messages to the Cordova Plugins Service","sequence":26,"id":"xcy5hj4qol-lqwcc0zmww"}],"title":"Routing the messages to the Cordova Plugins Service","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message for an unknown service","status":"pass","exception":{},"rawTitle":"receiving a message for an unknown service","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-lr1jpv0mhs-lr4gdvfaio","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            const request = new Services.CordovaPluginRequest();\r\n            request.service = \"unknown\";\r\n            request.antiCSRFToken = csrfToken;\r\n            contextWorkflowResultStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.workflowResult.name);\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":3},{"title":"only one message should be sent","status":"pass","exception":{},"rawTitle":"only one message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-lr1jpv0mhs-cn9o606su8","code":"() => {\r\n            contextWorkflowResultStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"a workflowResult error message is sent","status":"pass","exception":{},"rawTitle":"a workflowResult error message is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-lr1jpv0mhs-cna4majekw","code":"() => {\r\n            contextWorkflowResultStub.calledWith(\"error\").should.be.eql(true);\r\n        }","duration":1}],"title":"Routing a message for an unknown service","description":"","tags":[],"sequence":3,"id":"xcy5hj4qol-lr1jpv0mhs"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message with an invalid csrf token","status":"pass","exception":{},"rawTitle":"receiving a message with an invalid csrf token","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-6mq2u1w2er-h5qbcmua0d","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            telemetryStub = sinon.stub(Core.Telemetry.Log, \"trackEvent\");\r\n            appId = \"app id\";\r\n            isImportedApp = false;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"test\");\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            const request = new Services.CordovaPluginRequest();\r\n            request.service = \"Device\";\r\n            request.antiCSRFToken = csrfToken + \"abc\";\r\n            contextWorkflowResultStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.workflowResult.name);\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-6mq2u1w2er-tu4y23nvqd","code":"() => {\r\n            contextWorkflowResultStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"an error is logged","status":"pass","exception":{},"rawTitle":"an error is logged","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-6mq2u1w2er-g2lkd2a05h","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n            telemetryStub.calledWith(Core.Telemetry.Strings.invalidAntiCSRFToken).should.be.eql(true);\r\n        }","duration":0}],"title":"Routing a message with an invalid csrf token","description":"","tags":[],"sequence":4,"id":"xcy5hj4qol-6mq2u1w2er"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving a message from a imported app package that is loading app connections","status":"pass","exception":{},"rawTitle":"receiving a message from a imported app package that is loading app connections","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xcy5hj4qol-a58dexay80-18030p6u831","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appId = \"app id\";\r\n            isImportedApp = true;\r\n            isLoadingConnections = true;\r\n            workflowContext = new Infrastructure_1.WorkflowContext(new abus_1.MessageHandlerContext(bus), \"loadAppConnectionsAsync_v2\");\r\n            contextSendStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.send.name);\r\n            service = new Services.CordovaPluginRouterService(appId);\r\n            const request = new Services.CordovaPluginRequest();\r\n            request.service = \"Device\";\r\n            request.antiCSRFToken = csrfToken;\r\n            request.action = \"loadAppConnectionsAsync_v2\";\r\n            contextWorkflowResultStub = sinon.stub(Infrastructure_1.WorkflowContext.prototype, Infrastructure_1.WorkflowContext.prototype.workflowResult.name);\r\n            yield service.routeMessageAsync(workflowContext, request);\r\n        })","duration":2},{"title":"context response should not be called","status":"pass","exception":{},"rawTitle":"context response should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xcy5hj4qol-a58dexay80-9y919b17j7","code":"() => {\r\n            contextWorkflowResultStub.called.should.be.eql(false);\r\n        }","duration":0},{"title":"message should always be sent","status":"pass","exception":{},"rawTitle":"message should always be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xcy5hj4qol-a58dexay80-cn4jps6pwg","code":"() => {\r\n            contextSendStub.called.should.be.eql(true);\r\n        }","duration":0},{"title":"the args should be passed on in the message","status":"pass","exception":{},"rawTitle":"the args should be passed on in the message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xcy5hj4qol-a58dexay80-lqwfk0d5r4","code":"() => {\r\n            const messageSent = contextSendStub.firstCall.args[0];\r\n            (JSON.stringify(messageSent.args) === JSON.stringify([{}])).should.be.eql(true);\r\n        }","duration":0}],"title":"Routing a message for an imported app loading connections","description":"","tags":[],"sequence":5,"id":"xcy5hj4qol-a58dexay80"}],"title":"Route plugin messages from the Published App to their appropriate plugins","description":"Rules:\n* Messages go to the correct plugin\n* App Id is added to the messages","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/CordovaPluginRouterService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the cordova plugin router service is setup","status":"pass","exception":{},"rawTitle":"that the cordova plugin router service is setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"xcy5hj4qol-9pbsb4-17eyun0zr77","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            Services.CordovaPluginRegistry.instance.clear();\r\n            Services.CordovaPluginRouterService.setup();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":3}],"title":"","description":"","tags":[],"id":"xcy5hj4qol-9pbsb4"},"id":"xcy5hj4qol","path":"Services/CordovaPlugin"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":110,"failedCount":0,"pendingCount":0,"totalCount":110,"totalRuleViolations":0,"duration":204,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":41,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"service is registered: false","status":"pass","exception":{},"rawTitle":"service is registered: <registerMockService>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-v8ip7zisyb-d8ia1ib0df","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                if (scenarioOutlineContext.example.registerMockService)\r\n                    this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":2},{"title":"errorTypesSetVersion is set to null","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"5jtcz53r7h-v8ip7zisyb-obl3zxp2b9","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"handling a message for service action 'mockAction'","status":"pass","exception":{},"rawTitle":"handling a message for service action '<actionName>'","description":"","docString":"","values":["<actionName>"],"ruleViolations":[],"type":"When","sequence":3,"id":"5jtcz53r7h-v8ip7zisyb-ggxmmutisg","code":"() => {\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":24},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"5jtcz53r7h-v8ip7zisyb-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-v8ip7zisyb-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"setContextForCallback should NOT be called","status":"pass","exception":{},"rawTitle":"setContextForCallback should NOT be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-v8ip7zisyb-jkl22q1a00","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(0);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-v8ip7zisyb-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-v8ip7zisyb-17f57j95kpx","code":"() => {\r\n            const expectedErrorMessage = `Error occurred executing action '${scenarioOutlineContext.example.actionName}' for plugin with serviceName '${Mocks_1.MockCordovaServicePluginServiceName}'. ${scenarioOutlineContext.example.expectedErrorReasonMessage}`;\r\n            const expectedSerializedVersion = 1;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: LocalPluginsPlatform.LocalPluginErrorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["registerMockService","actionName","errorTypesSetVersion","expectedErrorReasonName","expectedErrorReasonMessage"],["false","mockAction","null","PluginNotFound","The CordovaPlugin is not registered."],["true","actionDoesNotExist","0","ActionNotFound","The action is not defined."]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":27,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"service is registered: false","status":"pass","exception":{},"rawTitle":"service is registered: <registerMockService>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-v8ip7zisyb-d8ia1ib0df","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                if (scenarioOutlineContext.example.registerMockService)\r\n                    this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":2},{"title":"errorTypesSetVersion is set to null","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"5jtcz53r7h-v8ip7zisyb-obl3zxp2b9","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"handling a message for service action 'mockAction'","status":"pass","exception":{},"rawTitle":"handling a message for service action '<actionName>'","description":"","docString":"","values":["<actionName>"],"ruleViolations":[],"type":"When","sequence":3,"id":"5jtcz53r7h-v8ip7zisyb-ggxmmutisg","code":"() => {\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":24},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"5jtcz53r7h-v8ip7zisyb-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-v8ip7zisyb-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"setContextForCallback should NOT be called","status":"pass","exception":{},"rawTitle":"setContextForCallback should NOT be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-v8ip7zisyb-jkl22q1a00","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(0);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-v8ip7zisyb-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-v8ip7zisyb-17f57j95kpx","code":"() => {\r\n            const expectedErrorMessage = `Error occurred executing action '${scenarioOutlineContext.example.actionName}' for plugin with serviceName '${Mocks_1.MockCordovaServicePluginServiceName}'. ${scenarioOutlineContext.example.expectedErrorReasonMessage}`;\r\n            const expectedSerializedVersion = 1;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: LocalPluginsPlatform.LocalPluginErrorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"registerMockService":false,"actionName":"mockAction","errorTypesSetVersion":null,"expectedErrorReasonName":"PluginNotFound","expectedErrorReasonMessage":"The CordovaPlugin is not registered."},"title":"Workflow of calling a service action and either the serviceName or actionName isn't found","sequence":1,"id":"5jtcz53r7h-v8ip7zisyb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"service is registered: true","status":"pass","exception":{},"rawTitle":"service is registered: <registerMockService>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-v8ip7zisyb-12cq4a4ytcr","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                if (scenarioOutlineContext.example.registerMockService)\r\n                    this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":7},{"title":"errorTypesSetVersion is set to 0","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to <errorTypesSetVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"5jtcz53r7h-v8ip7zisyb-oxysrn4mnk","code":"() => {\r\n            // If the scenaro specified an errorTypesSetVersion then we assume it's set. If not, then we are testing the behavior\r\n            // when the plugin metadata hasn't been swapped yet.\r\n            const isPluginMetadataExchanged = typeof scenarioOutlineContext.example.errorTypesSetVersion === \"number\";\r\n            const errorTypesSetVersion = isPluginMetadataExchanged ? scenarioOutlineContext.example.errorTypesSetVersion : 0;\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"handling a message for service action 'actionDoesNotExist'","status":"pass","exception":{},"rawTitle":"handling a message for service action '<actionName>'","description":"","docString":"","values":["<actionName>"],"ruleViolations":[],"type":"When","sequence":3,"id":"5jtcz53r7h-v8ip7zisyb-3pn2r3qu99","code":"() => {\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":5},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"5jtcz53r7h-v8ip7zisyb-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-v8ip7zisyb-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":1},{"title":"setContextForCallback should NOT be called","status":"pass","exception":{},"rawTitle":"setContextForCallback should NOT be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-v8ip7zisyb-jkl22q1a00","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(0);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-v8ip7zisyb-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized LocalPluginError","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-v8ip7zisyb-17f57j95kpx","code":"() => {\r\n            const expectedErrorMessage = `Error occurred executing action '${scenarioOutlineContext.example.actionName}' for plugin with serviceName '${Mocks_1.MockCordovaServicePluginServiceName}'. ${scenarioOutlineContext.example.expectedErrorReasonMessage}`;\r\n            const expectedSerializedVersion = 1;\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: LocalPluginsPlatform.LocalPluginErrorName,\r\n                message: expectedErrorMessage,\r\n                serializedVersion: expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"registerMockService":true,"actionName":"actionDoesNotExist","errorTypesSetVersion":0,"expectedErrorReasonName":"ActionNotFound","expectedErrorReasonMessage":"The action is not defined."},"title":"Workflow of calling a service action and either the serviceName or actionName isn't found","sequence":2,"id":"5jtcz53r7h-v8ip7zisyb"}],"title":"Workflow of calling a service action and either the serviceName or actionName isn't found","description":"- errorTypesSetVersion: Gives coverage showing that the expected serialized error should not matter whether the version metadata has been exchanged.\n    For the CordovaPluginServiceBase, we are at a higher-layer of infrastructure so we don't want to depend on the version metadata being exchanged\n    or not. This is why the default errorTypesSetVersion is always set to 0.","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","status":"pass","exception":{},"rawTitle":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-1802zv0kdtp-15m99rf06io","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            const err = new Error(scenarioOutlineContext.example.errorMessage);\r\n            if (scenarioOutlineContext.example.throwAsync)\r\n                mockActionCoreStub.returns(Promise.reject(err));\r\n            else\r\n                mockActionCoreStub.throws(err);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":6},{"title":"action is sent","status":"pass","exception":{},"rawTitle":"action is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"5jtcz53r7h-1802zv0kdtp-cn4urpdmzk","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"5jtcz53r7h-1802zv0kdtp-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-1802zv0kdtp-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"setContextForCallback should be called since we expect the action to exist","status":"pass","exception":{},"rawTitle":"setContextForCallback should be called since we expect the action to exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-1802zv0kdtp-dvfiqs3zlf","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target action after setting up the context","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target action after setting up the context","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-1802zv0kdtp-10xk185r31n","code":"() => {\r\n            mockActionCoreStub.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.calledBefore(mockActionCoreStub).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-1802zv0kdtp-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-1802zv0kdtp-13rcqozz1x","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: \"Error\",\r\n                message: scenarioOutlineContext.example.errorMessage,\r\n                serializedVersion: 0,\r\n            });\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["throwAsync","errorMessage"],["false","async error."],["true","sequential error."]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","status":"pass","exception":{},"rawTitle":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-1802zv0kdtp-15m99rf06io","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            const err = new Error(scenarioOutlineContext.example.errorMessage);\r\n            if (scenarioOutlineContext.example.throwAsync)\r\n                mockActionCoreStub.returns(Promise.reject(err));\r\n            else\r\n                mockActionCoreStub.throws(err);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":6},{"title":"action is sent","status":"pass","exception":{},"rawTitle":"action is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"5jtcz53r7h-1802zv0kdtp-cn4urpdmzk","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"5jtcz53r7h-1802zv0kdtp-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-1802zv0kdtp-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"setContextForCallback should be called since we expect the action to exist","status":"pass","exception":{},"rawTitle":"setContextForCallback should be called since we expect the action to exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-1802zv0kdtp-dvfiqs3zlf","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target action after setting up the context","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target action after setting up the context","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-1802zv0kdtp-10xk185r31n","code":"() => {\r\n            mockActionCoreStub.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.calledBefore(mockActionCoreStub).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-1802zv0kdtp-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-1802zv0kdtp-13rcqozz1x","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: \"Error\",\r\n                message: scenarioOutlineContext.example.errorMessage,\r\n                serializedVersion: 0,\r\n            });\r\n        }","duration":0}],"example":{"throwAsync":false,"errorMessage":"async error."},"title":"Workflow of calling a service action and the action throws","sequence":1,"id":"5jtcz53r7h-1802zv0kdtp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","status":"pass","exception":{},"rawTitle":"the mock action's implementation is setup to throw; throwsAsync: <throwsAsync>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-1802zv0kdtp-15m99rf06io","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            const err = new Error(scenarioOutlineContext.example.errorMessage);\r\n            if (scenarioOutlineContext.example.throwAsync)\r\n                mockActionCoreStub.returns(Promise.reject(err));\r\n            else\r\n                mockActionCoreStub.throws(err);\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n        }","duration":6},{"title":"action is sent","status":"pass","exception":{},"rawTitle":"action is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"5jtcz53r7h-1802zv0kdtp-cn4urpdmzk","code":"() => {\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":2},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"5jtcz53r7h-1802zv0kdtp-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-1802zv0kdtp-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"setContextForCallback should be called since we expect the action to exist","status":"pass","exception":{},"rawTitle":"setContextForCallback should be called since we expect the action to exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-1802zv0kdtp-dvfiqs3zlf","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"the request should have resulted in a call to target action after setting up the context","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target action after setting up the context","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-1802zv0kdtp-10xk185r31n","code":"() => {\r\n            mockActionCoreStub.callCount.should.be.eql(1);\r\n            setContextForCallbackSpy.calledBefore(mockActionCoreStub).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-1802zv0kdtp-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized Error with correct message","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-1802zv0kdtp-13rcqozz1x","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(messageSpy, request.callbackId, {\r\n                errorName: \"Error\",\r\n                message: scenarioOutlineContext.example.errorMessage,\r\n                serializedVersion: 0,\r\n            });\r\n        }","duration":1}],"example":{"throwAsync":true,"errorMessage":"sequential error."},"title":"Workflow of calling a service action and the action throws","sequence":2,"id":"5jtcz53r7h-1802zv0kdtp"}],"title":"Workflow of calling a service action and the action throws","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":77,"failedCount":0,"pendingCount":0,"totalCount":77,"totalRuleViolations":0,"duration":129,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with  and result of undefined.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-mworzlv4ts","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":19},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":1},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":1},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments []","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-10msqrlizln","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":1},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of undefined","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-jkpi0ckyxs","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionArgs","actionResult"],["[null]","undefined"],["[]","null"],["[true]","555"],["[77]","false"],["[]","false"],["[\"str\", {\"foo\":\"bar\"}]","{\"cat\": 9, \"dog\": 1, \"pets\":[2,1]}"],["[{\"cat\": 9, \"pets\":[2,1]}, [5]]","[\"str\", {\"foo\":\"bar\"}]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with  and result of undefined.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-mworzlv4ts","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":19},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":1},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":1},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments []","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-10msqrlizln","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":1},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of undefined","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-jkpi0ckyxs","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":[null],"actionResult":"undefined"},"title":"Workflow of calling a service action and the action succeeds","sequence":1,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with  and result of null.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-88t2o3ixf","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":8},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments []","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-10msqrlizln","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":1},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of null","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-rvaqk83qcd","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":1}],"example":{"actionArgs":[],"actionResult":null},"title":"Workflow of calling a service action and the action succeeds","sequence":2,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with true and result of 555.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-nadgqgg7id","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":8},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments [true]","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-4y68puv0m8","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":1},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":1},{"title":"the CordovaPluginResult should have the return value of 555","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-uev2tejf5s","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":[true],"actionResult":555},"title":"Workflow of calling a service action and the action succeeds","sequence":3,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with 77 and result of false.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-4l0esfg43x","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":12},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments [77]","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-kg4bd6i0y3","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":0},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of false","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-lqvf69alc0","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":[77],"actionResult":false},"title":"Workflow of calling a service action and the action succeeds","sequence":4,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":41,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with  and result of false.","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-mwpfwa48io","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":24},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments []","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-10msqrlizln","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":0},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":17},{"title":"the CordovaPluginResult should have the return value of false","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-lqvf69alc0","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":[],"actionResult":false},"title":"Workflow of calling a service action and the action succeeds","sequence":5,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with str,[object Object] and result of [object Object].","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-150xccmtgdf","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":20},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments [str,[object Object]]","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-4y7k5j6na8","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":1},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of [object Object]","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-4xzw5ppatc","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":["str",{"foo":"bar"}],"actionResult":{"cat":9,"dog":1,"pets":[2,1]}},"title":"Workflow of calling a service action and the action succeeds","sequence":6,"id":"5jtcz53r7h-a5471csnds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"called with [object Object],5 and result of str,[object Object].","status":"pass","exception":{},"rawTitle":"called with <actionArgs> and result of <actionResult>.","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"5jtcz53r7h-a5471csnds-mwkg20lnmo","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackSpy = sinon.spy(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            mockActionCoreStub = sinon.stub(Mocks_1.MockCordovaPlugin.prototype, \"_mockActionCore\");\r\n            mockActionCoreStub.returns(scenarioOutlineContext.example.actionResult);\r\n            target = {\r\n                functionName: \"_mockActionCore\",\r\n                functionSpy: mockActionCoreStub,\r\n                expectedCalledWith: scenarioOutlineContext.example.actionArgs\r\n            };\r\n            registerKnownPluginsSpy = sinon.stub(Services.RuntimePluginCreator.prototype, \"_registerKnownPlugins\")\r\n                .callsFake(function () {\r\n                this.registerServicePluginFactory(Mocks_1.MockCordovaServicePluginServiceName, commChannel => new Mocks_1.MockCordovaPlugin(commChannel));\r\n            });\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = messageSpy.sentMessages[0].context;\r\n        }","duration":9},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"5jtcz53r7h-a5471csnds-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"5jtcz53r7h-a5471csnds-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"5jtcz53r7h-a5471csnds-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackSpy.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"5jtcz53r7h-a5471csnds-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"5jtcz53r7h-a5471csnds-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackSpy.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the request should have resulted in a call to target function with arguments [[object Object],5]","status":"pass","exception":{},"rawTitle":"the request should have resulted in a call to target function with arguments [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"5jtcz53r7h-a5471csnds-4y030rk36o","code":"() => {\r\n            target.functionSpy.callCount.should.be.eql(1);\r\n            target.functionSpy.firstCall.args.should.eql(target.expectedCalledWith);\r\n        }","duration":0},{"title":"the context for callback should be set before calling target function","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling target function","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"5jtcz53r7h-a5471csnds-16b3ffvc5io","code":"() => {\r\n            setContextForCallbackSpy.calledBefore(target.functionSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command should NOT be sent","status":"pass","exception":{},"rawTitle":"a workflow command should NOT be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"5jtcz53r7h-a5471csnds-b360o8sdr4","code":"() => {\r\n            messageSpy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).wasReceivedCount.should.be.eql(0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"5jtcz53r7h-a5471csnds-7o1h5tvu0w","code":"() => {\r\n            messageSpy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            const pluginResult = messageSpy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Ok)\r\n                pluginOkResult = pluginResult;\r\n        }","duration":0},{"title":"the CordovaPluginResult should have the return value of str,[object Object]","status":"pass","exception":{},"rawTitle":"the CordovaPluginResult should have the return value of <actionResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"5jtcz53r7h-a5471csnds-4y76xtcvuo","code":"() => {\r\n            if (!pluginOkResult)\r\n                return;\r\n            DebugContracts.assertArray(pluginOkResult.args);\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.actionResult;\r\n            if (typeof expectedPluginResultValue === \"undefined\") {\r\n                pluginOkResult.args.length.should.be.eql(0);\r\n                return;\r\n            }\r\n            pluginOkResult.args.length.should.be.eql(1);\r\n            const returnValue = pluginOkResult.args[0];\r\n            should.equal(returnValue, expectedPluginResultValue);\r\n        }","duration":0}],"example":{"actionArgs":[{"cat":9,"pets":[2,1]},[5]],"actionResult":["str",{"foo":"bar"}]},"title":"Workflow of calling a service action and the action succeeds","sequence":7,"id":"5jtcz53r7h-a5471csnds"}],"title":"Workflow of calling a service action and the action succeeds","description":"","tags":[]}],"title":"CordovaPluginServiceBase should implement the common semantics for wrapping messages to/from a CordovaPlugin.","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/CordovaPluginServiceBase.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the MockCordovaPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the MockCordovaPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"5jtcz53r7h-9pbsb4-vl36bta48j","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            messageSpy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            messageSpy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            messageSpy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Mocks_1.MockCordovaPluginService);\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            // Setup the base request with a valid call to our mockAction.\r\n            request = new Mocks_1.MockCordovaPluginServiceRequest();\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            request.service = Mocks_1.MockCordovaServicePluginServiceName;\r\n            request.action = Mocks_1.MockCordovaServicePluginActionName;\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":16}],"title":"","description":"","tags":[],"id":"5jtcz53r7h-9pbsb4"},"id":"5jtcz53r7h","path":"Services/CordovaPlugin"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting Accelerometer data with the following message:","status":"pass","exception":{},"rawTitle":"requesting Accelerometer data with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","start"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"nwtjojitz7-dfnq7tnnkj-xt91ohbcr1","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":7},{"title":"the current value of the Accelerometer should be sent","status":"pass","exception":{},"rawTitle":"the current value of the Accelerometer should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"nwtjojitz7-dfnq7tnnkj-fnahfeori5","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            actual = actual.message.args[0];\r\n            let expected = backgroundContext.given.tableAsEntity;\r\n            actual.should.be.eql(expected);\r\n        }","duration":0}],"title":"Application requests to receive Accelerometer data","description":"","tags":[],"sequence":1,"id":"nwtjojitz7-dfnq7tnnkj"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for Accelerometer updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for Accelerometer updates with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","start"],["callbackId","test-watcher"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"nwtjojitz7-a59jy5f3i8-7glcfc022z","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the device moves with the following:","status":"pass","exception":{},"rawTitle":"the device moves with the following:","description":"","docString":"","dataTable":[["x","20"],["y","200.35"],["z","15.258"],["timestamp","12334567"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"nwtjojitz7-a59jy5f3i8-b333aru53k","code":"() => {\r\n            whenContext = stepContext;\r\n            // Start with the starting position\r\n            const data = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(data, stepContext.tableAsEntity);\r\n            // Force an update\r\n            sensorBroadcaster.simulateDataUpdate(data);\r\n        }","duration":1},{"title":"a message with the new Accelerometer data should be sent","status":"pass","exception":{},"rawTitle":"a message with the new Accelerometer data should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"nwtjojitz7-a59jy5f3i8-mulinz117p","code":"() => {\r\n            // Msg 0 was for location result\r\n            // Msg 1 was for location change result\r\n            updatedAccelerometerMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            // Verify that we have the new coords\r\n            const actual = updatedAccelerometerMessage.message.args[0];\r\n            let expected = whenContext.tableAsEntity;\r\n            actual.should.be.eql(expected);\r\n        }","duration":1},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"nwtjojitz7-a59jy5f3i8-n81srfwhjf","code":"() => {\r\n            updatedAccelerometerMessage.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Application has an Accelerometer function which should be updated as the device moves","description":"","tags":[],"sequence":2,"id":"nwtjojitz7-a59jy5f3i8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting the Accelerometer data with the following message:","status":"pass","exception":{},"rawTitle":"requesting the Accelerometer data with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","start"],["callbackId","test1"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"nwtjojitz7-4z93dkwwuz-g2oulm8u8j","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"requesting the Accelerometer data again with the following message:","status":"pass","exception":{},"rawTitle":"requesting the Accelerometer data again with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","start"],["callbackId","test2"]],"values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"nwtjojitz7-4z93dkwwuz-b37horihpc","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":0},{"title":"the Accelerometer data changes to","status":"pass","exception":{},"rawTitle":"the Accelerometer data changes to","description":"","docString":"","dataTable":[["x","25"],["y","206.35"],["z","1.258"],["timestamp","12334569"]],"values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"nwtjojitz7-4z93dkwwuz-b376po5e1s","code":"() => {\r\n            // clear out the current messages to focus on those related to the data update\r\n            spy.reset();\r\n            newData = stepContext.tableAsEntity;\r\n            sensorBroadcaster.simulateDataUpdate(newData);\r\n        }","duration":1},{"title":"a response matching the changed data should be sent to callbackId 'test1'","status":"pass","exception":{},"rawTitle":"a response matching the changed data should be sent to callbackId 'test1'","description":"","docString":"","values":["test1"],"ruleViolations":[],"type":"Then","sequence":4,"id":"nwtjojitz7-4z93dkwwuz-g4ms0ub5il","code":"() => {\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            const actual = actualMessage.message.args[0];\r\n            let expected = newData;\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":0},{"title":"a response matching the current location should be sent to callbackId 'test2'","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent to callbackId 'test2'","description":"","docString":"","values":["test2"],"ruleViolations":[],"type":"and","sequence":5,"id":"nwtjojitz7-4z93dkwwuz-ggwzslwdvk","code":"() => {\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            const actual = actualMessage.message.args[0];\r\n            let expected = newData;\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Application has multiple Accelerometer functions","description":"","tags":[],"sequence":3,"id":"nwtjojitz7-4z93dkwwuz"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for Accelerometer updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for Accelerometer updates with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","start"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"nwtjojitz7-4ngzbzh3sd-eau7xg6cw5","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the application requests to stop receiving updates with the following message:","status":"pass","exception":{},"rawTitle":"the application requests to stop receiving updates with the following message:","description":"","docString":"","dataTable":[["service","Accelerometer"],["action","stop"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"nwtjojitz7-4ngzbzh3sd-b32dqgi41s","code":"() => {\r\n            request = new Services.AccelerometerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the device Accelerometer data changes to the following:","status":"pass","exception":{},"rawTitle":"the device Accelerometer data changes to the following:","description":"","docString":"","dataTable":[["x","20"],["y","200.35"],["z","15.258"],["timestamp","12334567"]],"values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"nwtjojitz7-4ngzbzh3sd-w1e3c53i1f","code":"() => {\r\n            // Start with the starting position\r\n            const data = stepContext.tableAsEntity;\r\n            // Reset to focus on messages sent as a result of data update\r\n            spy.reset();\r\n            // Force a update\r\n            sensorBroadcaster.simulateDataUpdate(data);\r\n        }","duration":1},{"title":"the application should not receive any further updates","status":"pass","exception":{},"rawTitle":"the application should not receive any further updates","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"nwtjojitz7-4ngzbzh3sd-a542vfd11c","code":"() => {\r\n            // Ie no messages were sent\r\n            spy.sentMessages.length.should.be.equal(0);\r\n        }","duration":0}],"title":"Application doesn't require Accelerometer details anymore","description":"","tags":[],"sequence":4,"id":"nwtjojitz7-4ngzbzh3sd"}],"title":"Retrieving Accelerometer details","description":"Published Apps support the ability to define an Accelerometer function, which provides the Accelerometer data from the device\n\nRules:\n* Start receiving Accelerometer data. Data will be streamed to the App until stopped.\n* Stop receiving Accelerometer data","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AccelerometerPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the current Accelerometer data for the device is:","status":"pass","exception":{},"rawTitle":"the current Accelerometer data for the device is:","description":"","docString":"","dataTable":[["x","10"],["y","20.35"],["z","1.258"],["timestamp","1233456"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"nwtjojitz7-9pbsb4-b316lwcc9s","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            sensorService = new Services.AccelerometerPluginService(sensorBroadcaster);\r\n            const data = stepContext.tableAsEntity;\r\n            sensorBroadcaster.simulateDataUpdate(data);\r\n        }","duration":7}],"title":"","description":"","tags":[],"id":"nwtjojitz7-9pbsb4"},"id":"nwtjojitz7","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lqxug5iwow-ef3e2u2cfx-j3fzkukkqr","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue(fakeStoreProvider);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            addMediaCameraPluginService = new Services.AddMediaCameraPluginService();\r\n            nativeResult = { status: 1 };\r\n            getMediaFromFileSystemStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n        }","duration":3},{"title":"requesting to get picture from file system':","status":"pass","exception":{},"rawTitle":"requesting to get picture from file system':","description":"","docString":"","dataTable":[["service","Camera"],["action","getPicture"],["callbackId","camera1"],["actionArgs","[null, null, 0]"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lqxug5iwow-ef3e2u2cfx-b383diuqcg","code":"() => {\r\n            request = new Services.AddMediaCameraRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lqxug5iwow-ef3e2u2cfx-18mbfxfhoz","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"getMediaFromFileSystemStub should be called once","status":"pass","exception":{},"rawTitle":"getMediaFromFileSystemStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lqxug5iwow-ef3e2u2cfx-gfg4pax0zn","code":"() => {\r\n            getMediaFromFileSystemStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"user launches the file picker to select an image.","description":"","tags":[],"sequence":1,"id":"lqxug5iwow-ef3e2u2cfx"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lqxug5iwow-mwta718hcw-j3fzkukkqr","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue(fakeStoreProvider);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            addMediaCameraPluginService = new Services.AddMediaCameraPluginService();\r\n            nativeResult = { status: 1 };\r\n            getMediaFromCameraStub = sinon.stub(react_native_power_apps_add_media_camera_1.RNPowerAppsAddMediaCamera, react_native_power_apps_add_media_camera_1.RNPowerAppsAddMediaCamera.getPicture.name).returns(nativeResult);\r\n        }","duration":2},{"title":"requesting to get picture from camera':","status":"pass","exception":{},"rawTitle":"requesting to get picture from camera':","description":"","docString":"","dataTable":[["service","Camera"],["action","getPicture"],["callbackId","camera1"],["actionArgs","[null, null, 1]"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lqxug5iwow-mwta718hcw-b389orunj4","code":"() => {\r\n            request = new Services.AddMediaCameraRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lqxug5iwow-mwta718hcw-18mbfxfhoz","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":1},{"title":"getMediaFromCamera should be called once","status":"pass","exception":{},"rawTitle":"getMediaFromCamera should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lqxug5iwow-mwta718hcw-lr2hzpeihs","code":"() => {\r\n            getMediaFromCameraStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"user launches the camera to take a picture.","description":"","tags":[],"sequence":2,"id":"lqxug5iwow-mwta718hcw"}],"title":"A service that lets the user select an image","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AddMediaCameraPluginService.Spec.js","id":"lqxug5iwow","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nusai3oqo-slxuyyi3sd-j3fzkukkqr","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            androidActionSheetPluginService = new Services.AndroidActionSheetPluginService();\r\n        }","duration":0},{"title":"attempting to show the action sheet:","status":"pass","exception":{},"rawTitle":"attempting to show the action sheet:","description":"","docString":"","dataTable":[["service","ActionSheet"],["action","show"],["callbackId","actionsheet1"],["actionArgs","[{\"addCancelButtonWithLabel\": \"Cancel\", \"androidEnableCancelButton\": true, \"buttonLabels\": [\"Photo\", \"Camera\"], \"title\": \"Choose images source\", \"winphoneEnableCancelButton\": true}]"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nusai3oqo-slxuyyi3sd-wz7je5l8f7","code":"() => {\r\n            request = new Services.AndroidActionSheetRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":9},{"title":"the we encounter an error.","status":"pass","exception":{},"rawTitle":"the we encounter an error.","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nusai3oqo-slxuyyi3sd-mwpl8n3yq8","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Error);\r\n        }","duration":1}],"title":"service is used on a non-android platform.","description":"","tags":[],"sequence":1,"id":"7nusai3oqo-slxuyyi3sd"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"7nusai3oqo-93j094jj4d-j3fzkukkqr","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            androidActionSheetPluginService = new Services.AndroidActionSheetPluginService();\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n        }","duration":1},{"title":"attempting to show the action sheet:","status":"pass","exception":{},"rawTitle":"attempting to show the action sheet:","description":"","docString":"","dataTable":[["service","ActionSheet"],["action","show"],["callbackId","actionsheet1"],["actionArgs","[{\"addCancelButtonWithLabel\": \"Cancel\", \"androidEnableCancelButton\": true, \"buttonLabels\": [\"Photo\", \"Camera\"], \"title\": \"Choose images source\", \"winphoneEnableCancelButton\": true}]"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"7nusai3oqo-93j094jj4d-wz7je5l8f7","code":"() => {\r\n            request = new Services.AndroidActionSheetRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"the response status should be 'Ok'.","status":"pass","exception":{},"rawTitle":"the response status should be 'Ok'.","description":"","docString":"","values":["Ok"],"ruleViolations":[],"type":"Then","sequence":3,"id":"7nusai3oqo-93j094jj4d-93it2iu52r","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"the returned index should be '1'","status":"pass","exception":{},"rawTitle":"the returned index should be '1'","description":"","docString":"","values":[1],"ruleViolations":[],"type":"and","sequence":4,"id":"7nusai3oqo-93j094jj4d-zhpg0ozsmj","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(1);\r\n        }","duration":0}],"title":"service is used on an android platform.","description":"","tags":[],"sequence":2,"id":"7nusai3oqo-93j094jj4d"}],"title":"A service that displays selectable actions to the user","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AndroidActionSheetPluginService.Spec.js","id":"7nusai3oqo","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":114,"failedCount":0,"pendingCount":0,"totalCount":114,"totalRuleViolations":0,"duration":277,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":56,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getHidePlayerErrorToastsFeatureEnabledAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4cmhx16y2t","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":4},{"title":"AppHostErrorHandler.getIsHidePlayerErrorToastsEnabledAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a57pmm10cg","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be true","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-44jjh41hfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionName","actionArgs","targetName","expectTargetCalledWith","stubTargetReturnValue","expectedPluginResultValue"],["getHidePlayerErrorToastsFeatureEnabledAsync","[]","getIsHidePlayerErrorToastsEnabledAsync","[]","true","[true]"],["getHidePlayerErrorToastsFeatureEnabledAsync","[]","getIsHidePlayerErrorToastsEnabledAsync","[]","false","[false]"],["refreshConnectionsAsync","[]","refreshAppConnectionsAsync","[]","undefined","null"],["handleAppRuntimeErrorAsync","[\"error arg item not defined.\"]","handleRuntimeErrorAsync","[\"error arg item not defined.\", null]","undefined","null"],["handleAppRuntimeErrorAsync","[\"error arg item is undefined.\", \"mockUndefined\"]","handleRuntimeErrorAsync","[\"error arg item is undefined.\", null]","undefined","null"],["handleAppRuntimeErrorAsync","[\"error arg item is null.\", null]","handleRuntimeErrorAsync","[\"error arg item is null.\", null]","undefined","null"],["handleAppRuntimeErrorAsync","[\"error has HttpResponse.\", {\"status\":404,\"headers\":{},\"responseType\":\"text\",\"responseText\":\"sample server error.\",\"response\":\"sample server error.\"}]","handleRuntimeErrorAsync","[\"error has HttpResponse.\", {\"errorKind\": \"ServiceErrorWithResponse\"}]","undefined","null"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getHidePlayerErrorToastsFeatureEnabledAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4cmhx16y2t","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":4},{"title":"AppHostErrorHandler.getIsHidePlayerErrorToastsEnabledAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a57pmm10cg","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be true","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-44jjh41hfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getHidePlayerErrorToastsFeatureEnabledAsync","actionArgs":[],"targetName":"getIsHidePlayerErrorToastsEnabledAsync","expectTargetCalledWith":[],"stubTargetReturnValue":true,"expectedPluginResultValue":[true]},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":1,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getHidePlayerErrorToastsFeatureEnabledAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4cmhx16y2t","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":13},{"title":"AppHostErrorHandler.getIsHidePlayerErrorToastsEnabledAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a57pmm10cg","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be false","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-15yyxjklqjv","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getHidePlayerErrorToastsFeatureEnabledAsync","actionArgs":[],"targetName":"getIsHidePlayerErrorToastsEnabledAsync","expectTargetCalledWith":[],"stubTargetReturnValue":false,"expectedPluginResultValue":[false]},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":2,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing refreshConnectionsAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4y2llgzbds","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostErrorHandler.refreshAppConnectionsAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a53uiml9z4","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"refreshConnectionsAsync","actionArgs":[],"targetName":"refreshAppConnectionsAsync","expectTargetCalledWith":[],"stubTargetReturnValue":"undefined","expectedPluginResultValue":null},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":3,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing handleAppRuntimeErrorAsync with args [error arg item not defined.]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4y1oyk6ww0","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostErrorHandler.handleRuntimeErrorAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a5bl6mj4xs","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":1},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"handleAppRuntimeErrorAsync","actionArgs":["error arg item not defined."],"targetName":"handleRuntimeErrorAsync","expectTargetCalledWith":["error arg item not defined.",null],"stubTargetReturnValue":"undefined","expectedPluginResultValue":null},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":4,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing handleAppRuntimeErrorAsync with args [error arg item is undefined.,mockUndefined]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4y3rrm3vls","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostErrorHandler.handleRuntimeErrorAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a5bl6mj4xs","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"handleAppRuntimeErrorAsync","actionArgs":["error arg item is undefined.",null],"targetName":"handleRuntimeErrorAsync","expectTargetCalledWith":["error arg item is undefined.",null],"stubTargetReturnValue":"undefined","expectedPluginResultValue":null},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":5,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing handleAppRuntimeErrorAsync with args [error arg item is null.,]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-4y2kjr3w1s","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostErrorHandler.handleRuntimeErrorAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a5bl6mj4xs","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":1}],"example":{"actionName":"handleAppRuntimeErrorAsync","actionArgs":["error arg item is null.",null],"targetName":"handleRuntimeErrorAsync","expectTargetCalledWith":["error arg item is null.",null],"stubTargetReturnValue":"undefined","expectedPluginResultValue":null},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":6,"id":"cn8mic31r1-mwnocp0rgg"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing handleAppRuntimeErrorAsync with args [error has HttpResponse.,[object Object]]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwnocp0rgg-io9p0bs899","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.actionName);\r\n            DebugContracts.assertArray(scenarioOutlineContext.example.actionArgs);\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            // The scenarioOutline example doesn't like arrays with undefined elements; it treats it as a string.\r\n            // The existing implementation of handleAppRuntimeErrorAsync asserted the length of the 2nd arg. In order\r\n            // to get past this limitation, I've made the handler less strict with the 2nd argument.\r\n            // Yet, to verify existing args, we manually map the 'mockUndefined' token to a real undefined value.\r\n            if (scenarioOutlineContext.example.actionName === \"handleAppRuntimeErrorAsync\" &&\r\n                scenarioOutlineContext.example.actionArgs[1] === \"mockUndefined\") {\r\n                scenarioOutlineContext.example.actionArgs[1] = void 0;\r\n            }\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            // Setup the target stub\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub = sinon.stub(AppHost.AppHostErrorHandler.prototype, scenarioOutlineContext.example.targetName);\r\n            appHostErrorHandlerTargetStub.returns(Promise.resolve(scenarioOutlineContext.example.stubTargetReturnValue));\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostErrorHandler.handleRuntimeErrorAsync should have been called with the correct args","status":"pass","exception":{},"rawTitle":"AppHostErrorHandler.<targetName> should have been called with the correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwnocp0rgg-a5bl6mj4xs","code":"() => {\r\n            appHostErrorHandlerTargetStub.callCount.should.be.eql(1);\r\n            if (scenarioOutlineContext.example.targetName === \"handleRuntimeErrorAsync\" && scenarioOutlineContext.example.expectTargetCalledWith[1] !== null) {\r\n                DebugContracts.assert(scenarioOutlineContext.example.expectTargetCalledWith.length === 2);\r\n                const expectedMessage = scenarioOutlineContext.example.expectTargetCalledWith[0];\r\n                appHostErrorHandlerTargetStub.firstCall.args.length.should.be.equal(2, \"firstCall.args.length\");\r\n                appHostErrorHandlerTargetStub.firstCall.args[0].should.be.equal(expectedMessage, \"firstCall.args[0] {errorMessage}\");\r\n                // We can't do Error instance validation using equal or deep equal with scenarioOutline syntax\r\n                // so we manually check here.\r\n                const expectedArgsConfig = scenarioOutlineContext.example.expectTargetCalledWith[1];\r\n                DebugContracts.assertObject(expectedArgsConfig);\r\n                DebugContracts.assertNonEmpty(expectedArgsConfig.errorKind);\r\n                const expectedResponse = request.actionArgs[1];\r\n                // Note: Currently, the only Error the plugin will create is a ServiceError with the response.\r\n                expectedArgsConfig.errorKind.should.be.eql(\"ServiceErrorWithResponse\", \"expected errorKind\");\r\n                const actualErrorArg = appHostErrorHandlerTargetStub.firstCall.args[1];\r\n                // expect(actualErrorArg, \"firstCall.args[1] {error}\").to.be.not.null;\r\n                actualErrorArg.should.be.instanceOf(AppMagic.Services.ServiceError, \"Currently, the plugin always specifies a ServiceError.\");\r\n                actualErrorArg.message.should.be.eql(expectedMessage, \"ServiceError.message\");\r\n                actualErrorArg.serviceType.should.be.equal(AppMagic.Services.ServiceType.Connector, \"ServiceError.serviceType should be Connector.\");\r\n                expect(actualErrorArg.response).to.be.deep.equal(expectedResponse, \"ServiceError.response\");\r\n            }\r\n            else {\r\n                appHostErrorHandlerTargetStub.firstCall.args.should.be.deep.equal(scenarioOutlineContext.example.expectTargetCalledWith);\r\n            }\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwnocp0rgg-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwnocp0rgg-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"handleAppRuntimeErrorAsync","actionArgs":["error has HttpResponse.",{"status":404,"headers":{},"responseType":"text","responseText":"sample server error.","response":"sample server error."}],"targetName":"handleRuntimeErrorAsync","expectTargetCalledWith":["error has HttpResponse.",{"errorKind":"ServiceErrorWithResponse"}],"stubTargetReturnValue":"undefined","expectedPluginResultValue":null},"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","sequence":7,"id":"cn8mic31r1-mwnocp0rgg"}],"title":"Error Handling Plugin action requests should get routed to the correct target function with correct conversions of arguments and results.","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":57,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with void args and the command returns void asAPromise:false","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-lqw7vq597k","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called with args [[undefined]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-4y3p4dkaww","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["commandName","knownCommandArgsName","expectCommandCalledWith","stubCommandReturnValue","stubAsPromise","expectedPluginResultValue"],["mockCommand","void","[undefined]","void","false","[{ \"successful\": true }]"],["mockCommand","undefined","[undefined]","undefined","false","[{ \"successful\": true }]"],["mockCommand","empty","[{}]","{}","false","[{ \"successful\": true, \"value\": {} }]"],["mockCommand","complex","[{\"argBool\":true,\"argNumber\":55,\"argString\":\"hello world!\",\"argNull\":null,\"argRecord\":{\"col1\":1,\"col2\":\"foo\"},\"argArray\":[1,2,3],\"argTuple\":[1,\"yup\",false],\"argNested\":[55,{\"p2\":\"v2\"}]}]","{\"resultRecord\":{\"col1\":1,\"col2\":\"foo\"},\"resultArray\":[1,2,3],\"resultTuple\":[1,\"yup\",false],\"resultNested\":[55,{\"p2\":\"v2\"}]}","false","[{ \"successful\": true, \"value\": {\"resultRecord\":{\"col1\":1,\"col2\":\"foo\"},\"resultArray\":[1,2,3],\"resultTuple\":[1,\"yup\",false],\"resultNested\":[55,{\"p2\":\"v2\"}]}}]"],["mockCommand","void","[undefined]","\"mock result\"","true","[{ \"successful\": true, \"value\": \"mock result\" }]"],["mockCommand","void","[undefined]","876","true","[{ \"successful\": true, \"value\": 876 }]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with void args and the command returns void asAPromise:false","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-lqw7vq597k","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called with args [[undefined]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-4y3p4dkaww","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"void","expectCommandCalledWith":"[undefined]","stubCommandReturnValue":"void","stubAsPromise":false,"expectedPluginResultValue":[{"successful":true}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":1,"id":"cn8mic31r1-mwkdykwiow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with undefined args and the command returns undefined asAPromise:false","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-lr07hwblrk","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":15},{"title":"Command execution stub should have been called with args [[undefined]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-4y3p4dkaww","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"undefined","expectCommandCalledWith":"[undefined]","stubCommandReturnValue":"undefined","stubAsPromise":false,"expectedPluginResultValue":[{"successful":true}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":2,"id":"cn8mic31r1-mwkdykwiow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with empty args and the command returns [object Object] asAPromise:false","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-lqwe618o0w","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":8},{"title":"Command execution stub should have been called with args [[object Object]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-15qdyfkc5rv","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"empty","expectCommandCalledWith":[{}],"stubCommandReturnValue":{},"stubAsPromise":false,"expectedPluginResultValue":[{"successful":true,"value":{}}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":3,"id":"cn8mic31r1-mwkdykwiow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with complex args and the command returns [object Object] asAPromise:false","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-drnxrhoiil","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":6},{"title":"Command execution stub should have been called with args [[object Object]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-15qdyfkc5rv","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"complex","expectCommandCalledWith":[{"argBool":true,"argNumber":55,"argString":"hello world!","argNull":null,"argRecord":{"col1":1,"col2":"foo"},"argArray":[1,2,3],"argTuple":[1,"yup",false],"argNested":[55,{"p2":"v2"}]}],"stubCommandReturnValue":{"resultRecord":{"col1":1,"col2":"foo"},"resultArray":[1,2,3],"resultTuple":[1,"yup",false],"resultNested":[55,{"p2":"v2"}]},"stubAsPromise":false,"expectedPluginResultValue":[{"successful":true,"value":{"resultRecord":{"col1":1,"col2":"foo"},"resultArray":[1,2,3],"resultTuple":[1,"yup",false],"resultNested":[55,{"p2":"v2"}]}}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":4,"id":"cn8mic31r1-mwkdykwiow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with void args and the command returns mock result asAPromise:true","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-lqvtbx4b40","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":13},{"title":"Command execution stub should have been called with args [[undefined]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-4y3p4dkaww","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"void","expectCommandCalledWith":"[undefined]","stubCommandReturnValue":"mock result","stubAsPromise":true,"expectedPluginResultValue":[{"successful":true,"value":"mock result"}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":5,"id":"cn8mic31r1-mwkdykwiow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command mockCommand with void args and the command returns 876 asAPromise:true","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwkdykwiow-15wfpu8p12r","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.knownCommandArgsName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.knownCommandArgsName === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                DebugContracts.assertHasOwnProperty(knownCommandArgs, scenarioOutlineContext.example.knownCommandArgsName);\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: knownCommandArgs[scenarioOutlineContext.example.knownCommandArgsName]\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            DebugContracts.assertBoolean(scenarioOutlineContext.example.stubAsPromise);\r\n            commandTargetStub = sinon.stub();\r\n            if (scenarioOutlineContext.example.stubCommandReturnValue === \"void\") {\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    commandTargetStub.returns(Promise.resolve());\r\n            }\r\n            else {\r\n                let returnValue = normalizeOutlineValue(scenarioOutlineContext.example.stubCommandReturnValue);\r\n                if (scenarioOutlineContext.example.stubAsPromise === true)\r\n                    returnValue = Promise.resolve(returnValue);\r\n                commandTargetStub.returns(returnValue);\r\n            }\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                    .register(commandTargetStub);\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called with args [[undefined]]","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called with args [<expectCommandCalledWith>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwkdykwiow-4y3p4dkaww","code":"() => {\r\n            commandTargetStub.callCount.should.be.eql(1);\r\n            const expectCommandCalledWith = scenarioOutlineContext.example.expectCommandCalledWith === \"[undefined]\" ? [void 0] : scenarioOutlineContext.example.expectCommandCalledWith;\r\n            DebugContracts.assertArray(expectCommandCalledWith);\r\n            DebugContracts.assertStrictEqual(expectCommandCalledWith.length, 1, \"expectCommandCalledWith should be an array with a single element.\");\r\n            commandTargetStub.firstCall.args.should.be.deep.equal(expectCommandCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwkdykwiow-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwkdykwiow-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"mockCommand","knownCommandArgsName":"void","expectCommandCalledWith":"[undefined]","stubCommandReturnValue":876,"stubAsPromise":true,"expectedPluginResultValue":[{"successful":true,"value":876}]},"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","sequence":6,"id":"cn8mic31r1-mwkdykwiow"}],"title":"executing App to Host Commands via AppHostPluginService should get routed to the correct command executor.","description":"Given:\nserviceName = AppHostPlugin\nactionName = executeAppToHostCommand\nactionArgs = [{ fullName: <commandName>, args: knownCommandArgs[<knownCommandArgsName>]}]","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":83,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command invalidActionArgs with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-sso5emfrd7","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called: false","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-thg29fw82z","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["commandName","commandArgs","expectCommandCalled","expectedPluginResultSerializedError"],["invalidActionArgs","void","false","{ \"message\": \"Invalid plugin command args.\", \"name\": \"AppMagic.Runtime.App.Plugins.PluginError\", \"customDef\": { \"deftype\": \"PluginError\", \"reasonName\": \"Unknown\" } }"],["unknownCommand","void","false","{ \"message\": \"Command not found: unknownCommand\", \"name\": \"AppMagic.Runtime.App.Plugins.PluginError\", \"customDef\": { \"deftype\": \"PluginError\", \"reasonName\": \"CommandNotFound\" } }"],["throwError","{\"msg\": \"test error1\"}","true","{ \"message\": \"test error1\", \"name\": \"Error\" }"],["throwError","{\"msg\": \"test error using Promise.reject\", \"async\": true}","true","{ \"message\": \"test error using Promise.reject\", \"name\": \"Error\" }"],["throwError","{ \"pluginErrorReason\": \"InvalidArgs\"}","true","{ \"message\": \"A plugin error occurred. Reason InvalidArgs.\", \"name\": \"AppMagic.Runtime.App.Plugins.PluginError\", \"customDef\": { \"deftype\": \"PluginError\", \"reasonName\": \"InvalidArgs\" } }"],["throwError","{\"msg\": \"test command throws CordovaError error\", \"pluginErrorReason\": \"CordovaError\"}","true","{ \"message\": \"test command throws CordovaError error\", \"name\": \"AppMagic.Runtime.App.Plugins.PluginError\", \"customDef\": { \"deftype\": \"PluginError\", \"reasonName\": \"CordovaError\" } }"],["throwError","{ \"name\": \"Core.NotImplementedError\"}","true","{ \"message\": \"The operation 'AppHostPluginService.Spec.mockError' is not implemented.\", \"name\": \"Core.NotImplementedError\" }"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command invalidActionArgs with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-sso5emfrd7","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called: false","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-thg29fw82z","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"invalidActionArgs","commandArgs":"void","expectCommandCalled":false,"expectedPluginResultSerializedError":{"message":"Invalid plugin command args.","name":"AppMagic.Runtime.App.Plugins.PluginError","customDef":{"deftype":"PluginError","reasonName":"Unknown"}}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":1,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":26,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command unknownCommand with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-6s5ei4vf7x","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":24},{"title":"Command execution stub should have been called: false","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-thg29fw82z","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":1}],"example":{"commandName":"unknownCommand","commandArgs":"void","expectCommandCalled":false,"expectedPluginResultSerializedError":{"message":"Command not found: unknownCommand","name":"AppMagic.Runtime.App.Plugins.PluginError","customDef":{"deftype":"PluginError","reasonName":"CommandNotFound"}}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":2,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command throwError with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-13fsycaym3n","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":6},{"title":"Command execution stub should have been called: true","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-lqymzyp2u8","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"throwError","commandArgs":{"msg":"test error1"},"expectCommandCalled":true,"expectedPluginResultSerializedError":{"message":"test error1","name":"Error"}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":3,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command throwError with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-13fsycaym3n","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called: true","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-lqymzyp2u8","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"throwError","commandArgs":{"msg":"test error using Promise.reject","async":true},"expectCommandCalled":true,"expectedPluginResultSerializedError":{"message":"test error using Promise.reject","name":"Error"}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":4,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command throwError with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-13fsycaym3n","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called: true","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-lqymzyp2u8","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"throwError","commandArgs":{"pluginErrorReason":"InvalidArgs"},"expectCommandCalled":true,"expectedPluginResultSerializedError":{"message":"A plugin error occurred. Reason InvalidArgs.","name":"AppMagic.Runtime.App.Plugins.PluginError","customDef":{"deftype":"PluginError","reasonName":"InvalidArgs"}}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":5,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command throwError with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-13fsycaym3n","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":23},{"title":"Command execution stub should have been called: true","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-lqymzyp2u8","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"throwError","commandArgs":{"msg":"test command throws CordovaError error","pluginErrorReason":"CordovaError"},"expectCommandCalled":true,"expectedPluginResultSerializedError":{"message":"test command throws CordovaError error","name":"AppMagic.Runtime.App.Plugins.PluginError","customDef":{"deftype":"PluginError","reasonName":"CordovaError"}}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":6,"id":"cn8mic31r1-mwmnokjfog"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"receiving message for action executeAppToHostCommand for command throwError with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","status":"pass","exception":{},"rawTitle":"receiving message for action executeAppToHostCommand for command <commandName> with <knownCommandArgsName> args and the command returns <stubCommandReturnValue> asAPromise:<stubAsPromise>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"cn8mic31r1-mwmnokjfog-13fsycaym3n","code":"() => {\r\n            // Setup the action message\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.commandName);\r\n            request.action = \"executeAppToHostCommand\";\r\n            let actionArgs;\r\n            if (scenarioOutlineContext.example.commandName === \"invalidActionArgs\") {\r\n                // For this test, set the actionArgs to something that is invalid.\r\n                actionArgs = [{\r\n                        mock: \"This is an invalid args for the action.\"\r\n                    }];\r\n            }\r\n            else if (scenarioOutlineContext.example.commandArgs === \"void\") {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName\r\n                    }];\r\n            }\r\n            else {\r\n                actionArgs = [{\r\n                        fullName: scenarioOutlineContext.example.commandName,\r\n                        args: scenarioOutlineContext.example.commandArgs\r\n                    }];\r\n            }\r\n            request.actionArgs = actionArgs;\r\n            // Register the expected command as a stub\r\n            throwErrorCommandStub = sinon.stub()\r\n                .callsFake(function (args) {\r\n                DebugContracts.assertObject(args);\r\n                DebugContracts.assertStringOrUndefined(args.msg);\r\n                DebugContracts.assertBooleanOrUndefined(args.async);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.pluginErrorReason);\r\n                DebugContracts.assertNonEmptyOrUndefined(args.name);\r\n                let errorToThrow;\r\n                if (args.pluginErrorReason)\r\n                    errorToThrow = new Plugins.PluginError(Plugins.PluginErrorReason[args.pluginErrorReason], args.msg);\r\n                else if (args.name === \"Core.NotImplementedError\")\r\n                    errorToThrow = new Core.NotImplementedError(\"AppHostPluginService.Spec.mockError\");\r\n                else\r\n                    errorToThrow = new Error(args.msg);\r\n                if (args.async === true)\r\n                    return Promise.reject(Core.Utility.throwInline(errorToThrow));\r\n                else\r\n                    throw errorToThrow;\r\n            });\r\n            initializeHostCommanderCommandsStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"_initializeHostCommanderCommands\")\r\n                .callsFake(function (hostCommander) {\r\n                // We'll only register the command we're stubbing.\r\n                if (scenarioOutlineContext.example.commandName === \"throwError\") {\r\n                    hostCommander.createAppToHostCommandRegisterer(scenarioOutlineContext.example.commandName)\r\n                        .register(throwErrorCommandStub);\r\n                }\r\n            });\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"Command execution stub should have been called: true","status":"pass","exception":{},"rawTitle":"Command execution stub should have been called: <expectCommandCalled>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"cn8mic31r1-mwmnokjfog-lqymzyp2u8","code":"() => {\r\n            throwErrorCommandStub.callCount.should.be.eql(scenarioOutlineContext.example.expectCommandCalled ? 1 : 0);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"cn8mic31r1-mwmnokjfog-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should have correct serialized error","status":"pass","exception":{},"rawTitle":"plugin result value should have correct serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwmnokjfog-ywmxb1luhf","code":"() => {\r\n            const expectedPluginResultValue = [{ successful: false, error: scenarioOutlineContext.example.expectedPluginResultSerializedError }];\r\n            successfulPluginResult.args.should.be.deep.equal([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"commandName":"throwError","commandArgs":{"name":"Core.NotImplementedError"},"expectCommandCalled":true,"expectedPluginResultSerializedError":{"message":"The operation 'AppHostPluginService.Spec.mockError' is not implemented.","name":"Core.NotImplementedError"}},"title":"executeAppToHostCommand should report errors appropriately.","sequence":7,"id":"cn8mic31r1-mwmnokjfog"}],"title":"executeAppToHostCommand should report errors appropriately.","description":"Given:\nserviceName = AppHostPlugin\nactionName = executeAppToHostCommand\nactionArgs = [{ fullName: <commandName>, args: <commandArgs>}]; except when commandName = invalidActionArgs.","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":0,"duration":43,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-mwti3sxu74-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            let commandCallResult;\r\n            if (scenarioOutlineContext.example.commandCallResultValue === \"void\") {\r\n                commandCallResult = { successful: true };\r\n            }\r\n            else {\r\n                commandCallResult = {\r\n                    successful: true,\r\n                    value: scenarioOutlineContext.example.commandCallResultValue\r\n                };\r\n            }\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":7},{"title":"executing Host to App command undefinedArgsUndefinedResultCmd with specified args","status":"pass","exception":{},"rawTitle":"executing Host to App command <commandName> with specified args","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-mwti3sxu74-10wnrhb7nql","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            actualCommandResult = yield hostCommander.getHostToAppCommand(scenarioOutlineContext.example.commandName)\r\n                .executeAsync(normalizedCommandArgs);\r\n        })","duration":2},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-mwti3sxu74-cnb1ry1dvk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            invokeScriptAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            // We construct the expected script\r\n            // Note: This is copied in test in order to ensure our test will fail if the format of the script changes.\r\n            // This follows from the \"don't use product code to test product code\" philosophy.\r\n            const commandInfo = {\r\n                callbackId: expectedCommandCallbackId,\r\n                fullName: scenarioOutlineContext.example.commandName,\r\n                args: normalizedCommandArgs\r\n            };\r\n            // #region const expectedScript =\r\n            const expectedScript = `\r\ntry {\r\n    var appInstance = Core.Loader.ObjectFactory.instance.getSingleton(AppMagic.Runtime.App.CurrentAppInstanceFunctionSingletonKey)();\r\n    var appHostPlugin = appInstance.appHost.appHostPlugin;\r\n    appHostPlugin.executeHostToAppCommand(${JSON.stringify(commandInfo)});\r\n} catch (err) {\r\n    var commandResult = {\r\n        successful: false,\r\n        error: {\r\n            message: \"Error occurred while executing plugin script. \" + ((err && err.toString()) || \"\")\r\n        }\r\n    };\r\n    Cordova.exec(function () { }, function () { },\r\n        \"AppHostPlugin\", \"${callbackActionName}\", [\"${commandInfo.callbackId}\", commandResult]);\r\n}\r\n`;\r\n            // #endregion\r\n            invokeScriptAsyncStub.firstCall.args[0].should.be.eql(expectedScript);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwti3sxu74-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command result should have value undefined","status":"pass","exception":{},"rawTitle":"the command result should have value <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-mwti3sxu74-jkirmbv29s","code":"() => {\r\n            expect(actualCommandResult).to.be.deep.eq(normalizeOutlineValue(scenarioOutlineContext.example.expectedResult));\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["commandName","commandArgs","commandCallResultValue","expectedResult","expectedError"],["undefinedArgsUndefinedResultCmd","undefined","void","undefined",""],["emptyArgsEmptyResultCmd","{}","{}","{}",""],["complexArgsComplexResultCmd","{\"argBool\":true,\"argNumber\":55,\"argString\":\"hello world!\",\"argNull\":null,\"argRecord\":{\"col1\":1,\"col2\":\"foo\"},\"argArray\":[1,2,3],\"argTuple\":[1,\"yup\",false],\"argNested\":[55,{\"p2\":\"v2\"}]}","{\"resultRecord\":{\"col1\":1,\"col2\":\"foo\"},\"resultArray\":[1,2,3],\"resultTuple\":[1,\"yup\",false],\"resultNested\":[55,{\"p2\":\"v2\"}]}","{\"resultRecord\":{\"col1\":1,\"col2\":\"foo\"},\"resultArray\":[1,2,3],\"resultTuple\":[1,\"yup\",false],\"resultNested\":[55,{\"p2\":\"v2\"}]}",""]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-mwti3sxu74-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            let commandCallResult;\r\n            if (scenarioOutlineContext.example.commandCallResultValue === \"void\") {\r\n                commandCallResult = { successful: true };\r\n            }\r\n            else {\r\n                commandCallResult = {\r\n                    successful: true,\r\n                    value: scenarioOutlineContext.example.commandCallResultValue\r\n                };\r\n            }\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":7},{"title":"executing Host to App command undefinedArgsUndefinedResultCmd with specified args","status":"pass","exception":{},"rawTitle":"executing Host to App command <commandName> with specified args","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-mwti3sxu74-10wnrhb7nql","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            actualCommandResult = yield hostCommander.getHostToAppCommand(scenarioOutlineContext.example.commandName)\r\n                .executeAsync(normalizedCommandArgs);\r\n        })","duration":2},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-mwti3sxu74-cnb1ry1dvk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            invokeScriptAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            // We construct the expected script\r\n            // Note: This is copied in test in order to ensure our test will fail if the format of the script changes.\r\n            // This follows from the \"don't use product code to test product code\" philosophy.\r\n            const commandInfo = {\r\n                callbackId: expectedCommandCallbackId,\r\n                fullName: scenarioOutlineContext.example.commandName,\r\n                args: normalizedCommandArgs\r\n            };\r\n            // #region const expectedScript =\r\n            const expectedScript = `\r\ntry {\r\n    var appInstance = Core.Loader.ObjectFactory.instance.getSingleton(AppMagic.Runtime.App.CurrentAppInstanceFunctionSingletonKey)();\r\n    var appHostPlugin = appInstance.appHost.appHostPlugin;\r\n    appHostPlugin.executeHostToAppCommand(${JSON.stringify(commandInfo)});\r\n} catch (err) {\r\n    var commandResult = {\r\n        successful: false,\r\n        error: {\r\n            message: \"Error occurred while executing plugin script. \" + ((err && err.toString()) || \"\")\r\n        }\r\n    };\r\n    Cordova.exec(function () { }, function () { },\r\n        \"AppHostPlugin\", \"${callbackActionName}\", [\"${commandInfo.callbackId}\", commandResult]);\r\n}\r\n`;\r\n            // #endregion\r\n            invokeScriptAsyncStub.firstCall.args[0].should.be.eql(expectedScript);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwti3sxu74-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command result should have value undefined","status":"pass","exception":{},"rawTitle":"the command result should have value <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-mwti3sxu74-jkirmbv29s","code":"() => {\r\n            expect(actualCommandResult).to.be.deep.eq(normalizeOutlineValue(scenarioOutlineContext.example.expectedResult));\r\n        }","duration":0}],"example":{"commandName":"undefinedArgsUndefinedResultCmd","commandArgs":"undefined","commandCallResultValue":"void","expectedResult":"undefined","expectedError":""},"title":"Host to App command is executed via HostCommander and returns successful.","sequence":1,"id":"cn8mic31r1-mwti3sxu74"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":24,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-mwti3sxu74-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            let commandCallResult;\r\n            if (scenarioOutlineContext.example.commandCallResultValue === \"void\") {\r\n                commandCallResult = { successful: true };\r\n            }\r\n            else {\r\n                commandCallResult = {\r\n                    successful: true,\r\n                    value: scenarioOutlineContext.example.commandCallResultValue\r\n                };\r\n            }\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":20},{"title":"executing Host to App command emptyArgsEmptyResultCmd with specified args","status":"pass","exception":{},"rawTitle":"executing Host to App command <commandName> with specified args","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-mwti3sxu74-svm7bgle23","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            actualCommandResult = yield hostCommander.getHostToAppCommand(scenarioOutlineContext.example.commandName)\r\n                .executeAsync(normalizedCommandArgs);\r\n        })","duration":4},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-mwti3sxu74-cnb1ry1dvk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            invokeScriptAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            // We construct the expected script\r\n            // Note: This is copied in test in order to ensure our test will fail if the format of the script changes.\r\n            // This follows from the \"don't use product code to test product code\" philosophy.\r\n            const commandInfo = {\r\n                callbackId: expectedCommandCallbackId,\r\n                fullName: scenarioOutlineContext.example.commandName,\r\n                args: normalizedCommandArgs\r\n            };\r\n            // #region const expectedScript =\r\n            const expectedScript = `\r\ntry {\r\n    var appInstance = Core.Loader.ObjectFactory.instance.getSingleton(AppMagic.Runtime.App.CurrentAppInstanceFunctionSingletonKey)();\r\n    var appHostPlugin = appInstance.appHost.appHostPlugin;\r\n    appHostPlugin.executeHostToAppCommand(${JSON.stringify(commandInfo)});\r\n} catch (err) {\r\n    var commandResult = {\r\n        successful: false,\r\n        error: {\r\n            message: \"Error occurred while executing plugin script. \" + ((err && err.toString()) || \"\")\r\n        }\r\n    };\r\n    Cordova.exec(function () { }, function () { },\r\n        \"AppHostPlugin\", \"${callbackActionName}\", [\"${commandInfo.callbackId}\", commandResult]);\r\n}\r\n`;\r\n            // #endregion\r\n            invokeScriptAsyncStub.firstCall.args[0].should.be.eql(expectedScript);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwti3sxu74-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command result should have value [object Object]","status":"pass","exception":{},"rawTitle":"the command result should have value <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-mwti3sxu74-proqhkcpbf","code":"() => {\r\n            expect(actualCommandResult).to.be.deep.eq(normalizeOutlineValue(scenarioOutlineContext.example.expectedResult));\r\n        }","duration":0}],"example":{"commandName":"emptyArgsEmptyResultCmd","commandArgs":{},"commandCallResultValue":{},"expectedResult":{},"expectedError":""},"title":"Host to App command is executed via HostCommander and returns successful.","sequence":2,"id":"cn8mic31r1-mwti3sxu74"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-mwti3sxu74-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            let commandCallResult;\r\n            if (scenarioOutlineContext.example.commandCallResultValue === \"void\") {\r\n                commandCallResult = { successful: true };\r\n            }\r\n            else {\r\n                commandCallResult = {\r\n                    successful: true,\r\n                    value: scenarioOutlineContext.example.commandCallResultValue\r\n                };\r\n            }\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":7},{"title":"executing Host to App command complexArgsComplexResultCmd with specified args","status":"pass","exception":{},"rawTitle":"executing Host to App command <commandName> with specified args","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-mwti3sxu74-a523oi0thc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            actualCommandResult = yield hostCommander.getHostToAppCommand(scenarioOutlineContext.example.commandName)\r\n                .executeAsync(normalizedCommandArgs);\r\n        })","duration":2},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called with the correct script","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-mwti3sxu74-cnb1ry1dvk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            invokeScriptAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            // We construct the expected script\r\n            // Note: This is copied in test in order to ensure our test will fail if the format of the script changes.\r\n            // This follows from the \"don't use product code to test product code\" philosophy.\r\n            const commandInfo = {\r\n                callbackId: expectedCommandCallbackId,\r\n                fullName: scenarioOutlineContext.example.commandName,\r\n                args: normalizedCommandArgs\r\n            };\r\n            // #region const expectedScript =\r\n            const expectedScript = `\r\ntry {\r\n    var appInstance = Core.Loader.ObjectFactory.instance.getSingleton(AppMagic.Runtime.App.CurrentAppInstanceFunctionSingletonKey)();\r\n    var appHostPlugin = appInstance.appHost.appHostPlugin;\r\n    appHostPlugin.executeHostToAppCommand(${JSON.stringify(commandInfo)});\r\n} catch (err) {\r\n    var commandResult = {\r\n        successful: false,\r\n        error: {\r\n            message: \"Error occurred while executing plugin script. \" + ((err && err.toString()) || \"\")\r\n        }\r\n    };\r\n    Cordova.exec(function () { }, function () { },\r\n        \"AppHostPlugin\", \"${callbackActionName}\", [\"${commandInfo.callbackId}\", commandResult]);\r\n}\r\n`;\r\n            // #endregion\r\n            invokeScriptAsyncStub.firstCall.args[0].should.be.eql(expectedScript);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-mwti3sxu74-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":1},{"title":"the command result should have value [object Object]","status":"pass","exception":{},"rawTitle":"the command result should have value <expectedResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-mwti3sxu74-proqhkcpbf","code":"() => {\r\n            expect(actualCommandResult).to.be.deep.eq(normalizeOutlineValue(scenarioOutlineContext.example.expectedResult));\r\n        }","duration":0}],"example":{"commandName":"complexArgsComplexResultCmd","commandArgs":{"argBool":true,"argNumber":55,"argString":"hello world!","argNull":null,"argRecord":{"col1":1,"col2":"foo"},"argArray":[1,2,3],"argTuple":[1,"yup",false],"argNested":[55,{"p2":"v2"}]},"commandCallResultValue":{"resultRecord":{"col1":1,"col2":"foo"},"resultArray":[1,2,3],"resultTuple":[1,"yup",false],"resultNested":[55,{"p2":"v2"}]},"expectedResult":{"resultRecord":{"col1":1,"col2":"foo"},"resultArray":[1,2,3],"resultTuple":[1,"yup",false],"resultNested":[55,{"p2":"v2"}]},"expectedError":""},"title":"Host to App command is executed via HostCommander and returns successful.","sequence":3,"id":"cn8mic31r1-mwti3sxu74"}],"title":"Host to App command is executed via HostCommander and returns successful.","description":"Given:\nserviceName = AppHostPlugin\nactionName = notifyHostToAppCommandCompleted - The action used when the App notifies the Host with the command's result.","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":0,"duration":26,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-13i55cxd89h-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            const commandCallResult = {\r\n                successful: false,\r\n                error: scenarioOutlineContext.example.commandCallResultError\r\n            };\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":6},{"title":"executing Host to App command","status":"pass","exception":{},"rawTitle":"executing Host to App command","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-13i55cxd89h-3nlxdzap5p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            try {\r\n                const commandName = \"mockCmdAlwaysFails\";\r\n                actualCommandResult = yield hostCommander.getHostToAppCommand(commandName)\r\n                    .executeAsync(normalizedCommandArgs);\r\n            }\r\n            catch (err) {\r\n                actualError = err;\r\n            }\r\n        })","duration":3},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-13i55cxd89h-jkll3auuzk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            // For this scenario, it's not important to verify the script, as this scenario just deals with verifying the result that comes back.\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-13i55cxd89h-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command should have resulted in throwing an error","status":"pass","exception":{},"rawTitle":"the command should have resulted in throwing an error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-13i55cxd89h-7o20r5ixq8","code":"() => {\r\n            expect(actualCommandResult).to.be.eql(void 0, \"actualCommandResult\");\r\n            expect(actualError).to.instanceOf(Error);\r\n        }","duration":1},{"title":"the error thrown should have been deserialized correctly","status":"pass","exception":{},"rawTitle":"the error thrown should have been deserialized correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"cn8mic31r1-13i55cxd89h-pgzb2pr00w","code":"() => {\r\n            actualError.name.should.be.eql(scenarioOutlineContext.example.expectedErrorName, \"actualError.name\");\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.expectedMessage, \"actualError.message\");\r\n            if (scenarioOutlineContext.example.expectedReason) {\r\n                actualError.should.instanceOf(Plugins.PluginError);\r\n                const expectedReason = Plugins.PluginErrorReason[scenarioOutlineContext.example.expectedReason];\r\n                actualError.reason.should.be.eql(expectedReason);\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["commandCallResultError","expectedErrorName","expectedMessage","expectedReason"],["{ \"message\": \"test error1.\", \"name\": \"Error\" }","Error","\"test error1.\"",""],["{ \"message\": \"mock error with no serialization support.\", \"name\": \"MockError\" }","Error","\"mock error with no serialization support.\"",""],["{ \"message\": \"mock PluginError.\", \"name\": \"AppMagic.Runtime.App.Plugins.PluginError\", \"customDef\": { \"deftype\": \"PluginError\", \"reasonName\": \"InvalidArgs\" } }","AppMagic.Runtime.App.Plugins.PluginError","\"mock PluginError.\"","InvalidArgs"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-13i55cxd89h-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            const commandCallResult = {\r\n                successful: false,\r\n                error: scenarioOutlineContext.example.commandCallResultError\r\n            };\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":6},{"title":"executing Host to App command","status":"pass","exception":{},"rawTitle":"executing Host to App command","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-13i55cxd89h-3nlxdzap5p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            try {\r\n                const commandName = \"mockCmdAlwaysFails\";\r\n                actualCommandResult = yield hostCommander.getHostToAppCommand(commandName)\r\n                    .executeAsync(normalizedCommandArgs);\r\n            }\r\n            catch (err) {\r\n                actualError = err;\r\n            }\r\n        })","duration":3},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-13i55cxd89h-jkll3auuzk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            // For this scenario, it's not important to verify the script, as this scenario just deals with verifying the result that comes back.\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-13i55cxd89h-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command should have resulted in throwing an error","status":"pass","exception":{},"rawTitle":"the command should have resulted in throwing an error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-13i55cxd89h-7o20r5ixq8","code":"() => {\r\n            expect(actualCommandResult).to.be.eql(void 0, \"actualCommandResult\");\r\n            expect(actualError).to.instanceOf(Error);\r\n        }","duration":1},{"title":"the error thrown should have been deserialized correctly","status":"pass","exception":{},"rawTitle":"the error thrown should have been deserialized correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"cn8mic31r1-13i55cxd89h-pgzb2pr00w","code":"() => {\r\n            actualError.name.should.be.eql(scenarioOutlineContext.example.expectedErrorName, \"actualError.name\");\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.expectedMessage, \"actualError.message\");\r\n            if (scenarioOutlineContext.example.expectedReason) {\r\n                actualError.should.instanceOf(Plugins.PluginError);\r\n                const expectedReason = Plugins.PluginErrorReason[scenarioOutlineContext.example.expectedReason];\r\n                actualError.reason.should.be.eql(expectedReason);\r\n            }\r\n        }","duration":0}],"example":{"commandCallResultError":{"message":"test error1.","name":"Error"},"expectedErrorName":"Error","expectedMessage":"test error1.","expectedReason":""},"title":"Host to App command is executed via HostCommander and returns unsuccessful","sequence":1,"id":"cn8mic31r1-13i55cxd89h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-13i55cxd89h-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            const commandCallResult = {\r\n                successful: false,\r\n                error: scenarioOutlineContext.example.commandCallResultError\r\n            };\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":8},{"title":"executing Host to App command","status":"pass","exception":{},"rawTitle":"executing Host to App command","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-13i55cxd89h-3nlxdzap5p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            try {\r\n                const commandName = \"mockCmdAlwaysFails\";\r\n                actualCommandResult = yield hostCommander.getHostToAppCommand(commandName)\r\n                    .executeAsync(normalizedCommandArgs);\r\n            }\r\n            catch (err) {\r\n                actualError = err;\r\n            }\r\n        })","duration":2},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-13i55cxd89h-jkll3auuzk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            // For this scenario, it's not important to verify the script, as this scenario just deals with verifying the result that comes back.\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-13i55cxd89h-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command should have resulted in throwing an error","status":"pass","exception":{},"rawTitle":"the command should have resulted in throwing an error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-13i55cxd89h-7o20r5ixq8","code":"() => {\r\n            expect(actualCommandResult).to.be.eql(void 0, \"actualCommandResult\");\r\n            expect(actualError).to.instanceOf(Error);\r\n        }","duration":0},{"title":"the error thrown should have been deserialized correctly","status":"pass","exception":{},"rawTitle":"the error thrown should have been deserialized correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"cn8mic31r1-13i55cxd89h-pgzb2pr00w","code":"() => {\r\n            actualError.name.should.be.eql(scenarioOutlineContext.example.expectedErrorName, \"actualError.name\");\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.expectedMessage, \"actualError.message\");\r\n            if (scenarioOutlineContext.example.expectedReason) {\r\n                actualError.should.instanceOf(Plugins.PluginError);\r\n                const expectedReason = Plugins.PluginErrorReason[scenarioOutlineContext.example.expectedReason];\r\n                actualError.reason.should.be.eql(expectedReason);\r\n            }\r\n        }","duration":0}],"example":{"commandCallResultError":{"message":"mock error with no serialization support.","name":"MockError"},"expectedErrorName":"Error","expectedMessage":"mock error with no serialization support.","expectedReason":""},"title":"Host to App command is executed via HostCommander and returns unsuccessful","sequence":2,"id":"cn8mic31r1-13i55cxd89h"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"scenario setup","status":"pass","exception":{},"rawTitle":"scenario setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-13i55cxd89h-a864e9f251","code":"() => {\r\n            // stub CordovaCommunicationChannel.invokeScriptAsync\r\n            DebugContracts.assertNonEmpty(Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub = sinon.stub(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.invokeScriptAsync.name);\r\n            invokeScriptAsyncStub.callsFake(function (jsToExec) {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    DebugContracts.assertNonEmpty(jsToExec);\r\n                    // Schedule the response to come back, using timeout to simulate asynchronous execution.\r\n                    setTimeout(() => {\r\n                        bus.send(request);\r\n                        messageContext = spy.sentMessages[0].context;\r\n                    }, 0);\r\n                });\r\n            });\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            // determine the expected callbackId so it can be used by our mocks above\r\n            const nextCallbackId = runtimePluginCreator.appHostPluginHandlerPlugin._nextCallbackId;\r\n            DebugContracts.assertNumber(nextCallbackId, \"AppHostPluginHandler._nextCallbackId should be a number. If not, then the implementation may have changed.\");\r\n            expectedCommandCallbackId = nextCallbackId.toString();\r\n            // Setup the callback notification action message. It will get sent once invokeScriptAsync has been called.\r\n            request.action = callbackActionName;\r\n            const commandCallResult = {\r\n                successful: false,\r\n                error: scenarioOutlineContext.example.commandCallResultError\r\n            };\r\n            DebugContracts.assertIsValid(commandCallResult, Plugins.isValidHostCommandCallResult);\r\n            request.actionArgs = [expectedCommandCallbackId, commandCallResult];\r\n            normalizedCommandArgs = normalizeOutlineValue(scenarioOutlineContext.example.commandArgs);\r\n        }","duration":5},{"title":"executing Host to App command","status":"pass","exception":{},"rawTitle":"executing Host to App command","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"cn8mic31r1-13i55cxd89h-3nlxdzap5p","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // Execute the command for the test\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            const hostCommander = runtimePluginCreator.hostCommander;\r\n            DebugContracts.assertObject(runtimePluginCreator);\r\n            try {\r\n                const commandName = \"mockCmdAlwaysFails\";\r\n                actualCommandResult = yield hostCommander.getHostToAppCommand(commandName)\r\n                    .executeAsync(normalizedCommandArgs);\r\n            }\r\n            catch (err) {\r\n                actualError = err;\r\n            }\r\n        })","duration":1},{"title":"CordovaCommunicationChannel.invokeScriptAsync should have been called","status":"pass","exception":{},"rawTitle":"CordovaCommunicationChannel.invokeScriptAsync should have been called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"cn8mic31r1-13i55cxd89h-jkll3auuzk","code":"() => {\r\n            invokeScriptAsyncStub.callCount.should.be.eql(1);\r\n            // For this scenario, it's not important to verify the script, as this scenario just deals with verifying the result that comes back.\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult indicating the host has successfully received the result.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"cn8mic31r1-13i55cxd89h-mwo16qkow0","code":"() => {\r\n            const successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n            successfulPluginResult.args.should.be.deep.equal([[]]);\r\n        }","duration":0},{"title":"the command should have resulted in throwing an error","status":"pass","exception":{},"rawTitle":"the command should have resulted in throwing an error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"cn8mic31r1-13i55cxd89h-7o20r5ixq8","code":"() => {\r\n            expect(actualCommandResult).to.be.eql(void 0, \"actualCommandResult\");\r\n            expect(actualError).to.instanceOf(Error);\r\n        }","duration":0},{"title":"the error thrown should have been deserialized correctly","status":"pass","exception":{},"rawTitle":"the error thrown should have been deserialized correctly","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"cn8mic31r1-13i55cxd89h-pgzb2pr00w","code":"() => {\r\n            actualError.name.should.be.eql(scenarioOutlineContext.example.expectedErrorName, \"actualError.name\");\r\n            actualError.message.should.be.eql(scenarioOutlineContext.example.expectedMessage, \"actualError.message\");\r\n            if (scenarioOutlineContext.example.expectedReason) {\r\n                actualError.should.instanceOf(Plugins.PluginError);\r\n                const expectedReason = Plugins.PluginErrorReason[scenarioOutlineContext.example.expectedReason];\r\n                actualError.reason.should.be.eql(expectedReason);\r\n            }\r\n        }","duration":0}],"example":{"commandCallResultError":{"message":"mock PluginError.","name":"AppMagic.Runtime.App.Plugins.PluginError","customDef":{"deftype":"PluginError","reasonName":"InvalidArgs"}},"expectedErrorName":"AppMagic.Runtime.App.Plugins.PluginError","expectedMessage":"mock PluginError.","expectedReason":"InvalidArgs"},"title":"Host to App command is executed via HostCommander and returns unsuccessful","sequence":3,"id":"cn8mic31r1-13i55cxd89h"}],"title":"Host to App command is executed via HostCommander and returns unsuccessful","description":"Given:\nserviceName = AppHostPlugin\nactionName = notifyHostToAppCommandCompleted - The action used when the App notifies the Host with the command's result.\ncommandName = mockCmd","tags":[]}],"title":"AppHostPluginHandler should support all regular Plugin Actions.","description":"Note: This feature is only one part of what AppHostPlugin does. It is targeted for testing just the regular plugin actions,\nand does not cover any of the AppToHost or HostToApp command functionality.\n\nThe regular actions on the AppHostPlugin cover the following functionality:\n- Actions related to runtime error handling.\n- Actions related to executing App to Host commands.\n- Actions related to sending Host to App commands, and receiving the results.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AppHostPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AppHostPluginHandlerService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the AppHostPluginHandlerService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"cn8mic31r1-9pbsb4-mptaxok5gd","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.AppHostPluginHandlerService);\r\n            request = new Services.AppHostPluginHandlerRequest();\r\n            request.service = \"AppHostPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":12}],"title":"","description":"","tags":[],"id":"cn8mic31r1-9pbsb4"},"id":"cn8mic31r1","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":241,"failedCount":0,"pendingCount":0,"totalCount":241,"totalRuleViolations":0,"duration":537,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":45,"failedCount":0,"pendingCount":0,"totalCount":45,"totalRuleViolations":0,"duration":65,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-kkly0rx8y3","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the context for callback should be set before calling sendHttpAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-j1puziir59","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-falnjkz8xn","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["action"],["sendHttpAsync"],["sendHttpIgnoreResponseAsync"],["sendHttpTextResponseAsync"],["sendHttpJsonResponseAsync"],["sendHttpBlobResponseAsync"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-kkly0rx8y3","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the context for callback should be set before calling sendHttpAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-j1puziir59","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-falnjkz8xn","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync"},"title":"Published App makes requests to the AppHttpClientPlugin","sequence":1,"id":"fjqesg0agb-12k4kczhimz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":24,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpIgnoreResponseAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-1278nrxif1","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":23},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":1},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the context for callback should be set before calling sendHttpIgnoreResponseAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-2m43bf5urv","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpIgnoreResponseAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-lr106f8oow","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"example":{"action":"sendHttpIgnoreResponseAsync"},"title":"Published App makes requests to the AppHttpClientPlugin","sequence":2,"id":"fjqesg0agb-12k4kczhimz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpTextResponseAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-hf2te7y6sg","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":1},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the context for callback should be set before calling sendHttpTextResponseAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-a6fmxxuurn","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpTextResponseAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-13r7uu25wb","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"example":{"action":"sendHttpTextResponseAsync"},"title":"Published App makes requests to the AppHttpClientPlugin","sequence":3,"id":"fjqesg0agb-12k4kczhimz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpJsonResponseAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-1vob77lit7","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":13},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"the context for callback should be set before calling sendHttpJsonResponseAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-8ekw7yvnab","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpJsonResponseAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-tjzb4oa5md","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"example":{"action":"sendHttpJsonResponseAsync"},"title":"Published App makes requests to the AppHttpClientPlugin","sequence":4,"id":"fjqesg0agb-12k4kczhimz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing sendHttpBlobResponseAsync","status":"pass","exception":{},"rawTitle":"executing <action>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-12k4kczhimz-hf774n2uf4","code":"() => {\r\n            appHttpClientPluginMethodStub = sinon.stub(ApiHost_1.ApiHost.AppHostRuntime.Plugins.AppHttpClientPluginHandler.prototype, scenarioOutlineContext.example.action);\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = scenarioOutlineContext.example.action;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":11},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-12k4kczhimz-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-12k4kczhimz-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the context for callback should be set once","status":"pass","exception":{},"rawTitle":"the context for callback should be set once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-12k4kczhimz-lr4mo6gk68","code":"() => {\r\n            setContextForCallbackStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the message context should be set for callback","status":"pass","exception":{},"rawTitle":"the message context should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-12k4kczhimz-z9fe4cn48w","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[1].should.be.eql(messageContext);\r\n        }","duration":0},{"title":"the callback id should be set for callback","status":"pass","exception":{},"rawTitle":"the callback id should be set for callback","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-12k4kczhimz-q0r7i4e7dx","code":"() => {\r\n            setContextForCallbackStub.firstCall.args[0].should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"the context for callback should be set before calling sendHttpBlobResponseAsync method on the runtime plugin","status":"pass","exception":{},"rawTitle":"the context for callback should be set before calling <action> method on the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"fjqesg0agb-12k4kczhimz-6mq2a90uvn","code":"() => {\r\n            setContextForCallbackStub.calledBefore(appHttpClientPluginMethodStub).should.be.eql(true);\r\n        }","duration":0},{"title":"the sendHttpBlobResponseAsync method on the runtime plugin should be called once","status":"pass","exception":{},"rawTitle":"the <action> method on the runtime plugin should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"fjqesg0agb-12k4kczhimz-6vabg3657v","code":"() => {\r\n            appHttpClientPluginMethodStub.callCount.should.be.eql(1);\r\n        }","duration":0},{"title":"the request message should be passed to the runtime plugin","status":"pass","exception":{},"rawTitle":"the request message should be passed to the runtime plugin","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"fjqesg0agb-12k4kczhimz-4ps1gvyct","code":"() => {\r\n            appHttpClientPluginMethodStub.calledWith(Services.CordovaPluginRequest.convertToICommandInfo(request)).should.be.eql(true);\r\n        }","duration":0}],"example":{"action":"sendHttpBlobResponseAsync"},"title":"Published App makes requests to the AppHttpClientPlugin","sequence":5,"id":"fjqesg0agb-12k4kczhimz"}],"title":"Published App makes requests to the AppHttpClientPlugin","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting an invalid action","status":"pass","exception":{},"rawTitle":"requesting an invalid action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"fjqesg0agb-cn7ypurgww-16b2kk4xgow","code":"() => {\r\n            getRuntimePluginCreatorSpy = sinon.spy(Services.RuntimePluginCreator, Services.RuntimePluginCreator.getRuntimePluginCreatorForApp.name);\r\n            setContextForCallbackStub = sinon.stub(Services.RuntimePluginCreator.prototype, Services.RuntimePluginCreator.prototype.setContextForCallbackId.name);\r\n            request.action = \"unknownAction\";\r\n            bus.send(request);\r\n        }","duration":11},{"title":"the runtime plugin creator should be created","status":"pass","exception":{},"rawTitle":"the runtime plugin creator should be created","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"fjqesg0agb-cn7ypurgww-1471b16qxsz","code":"() => {\r\n            getRuntimePluginCreatorSpy.callCount.should.be.eql(1);\r\n        }","duration":1},{"title":"the app id should be used for runtime plugin creator","status":"pass","exception":{},"rawTitle":"the app id should be used for runtime plugin creator","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"fjqesg0agb-cn7ypurgww-vk72sunmrf","code":"() => {\r\n            getRuntimePluginCreatorSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the callback context should not be set","status":"pass","exception":{},"rawTitle":"the callback context should not be set","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-cn7ypurgww-tu4z5n9ybx","code":"() => {\r\n            setContextForCallbackStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"a workflow command with an error action should be sent","status":"pass","exception":{},"rawTitle":"a workflow command with an error action should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-cn7ypurgww-qptnr96tnf","code":"() => {\r\n            spy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).firstMessage.message.action.should.be.eql(\"error\");\r\n        }","duration":0}],"title":"Published App passes an unknown action to the host","description":"","tags":[],"sequence":2,"id":"fjqesg0agb-cn7ypurgww"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a mock store","status":"pass","exception":{},"rawTitle":"a mock store","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-p288momw4l-17e1zqe7vad","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":5},{"title":"the published app is closed","status":"pass","exception":{},"rawTitle":"the published app is closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-p288momw4l-jkk0uoinwg","code":"() => {\r\n            let appClosedEvent = new Services.PublishedAppClosedEvent();\r\n            deleteFolderAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.deleteFolderAsync.name);\r\n            bus.publish(appClosedEvent);\r\n        }","duration":3},{"title":"the folder \"0/TempFiles\" is deleted","status":"pass","exception":{},"rawTitle":"the folder \"0/TempFiles\" is deleted","description":"","docString":"","values":["0/TempFiles"],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-p288momw4l-jknpzo8534","code":"() => {\r\n            deleteFolderAsyncStub.calledWith(stepContext.values[0]).should.be.eql(true);\r\n        }","duration":0}],"title":"When the app is closed, the AppHttpClientPluginService is responsible for deleting the app's temporary folder.","description":"","tags":[],"sequence":3,"id":"fjqesg0agb-p288momw4l"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":145,"failedCount":0,"pendingCount":0,"totalCount":145,"totalRuleViolations":0,"duration":352,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":18},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4hf249p8i3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"tables":[{"name":"sendHttpAsync actions - different bodyData types","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpAsync","[\"#RequestArgV1Base\", null, null]","#RequestNoBody","text","#TextResponseEmpty","[\"#TextResponseResultArgEmpty\", \"\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", \"#TextBodyData\", null]","#RequestTextBody","text","#TextResponseEmpty","[\"#TextResponseResultArgEmpty\", \"\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", \"#CordovaBlob\", null]","#RequestCordovaBlobBody","text","#TextResponseEmpty","[\"#TextResponseResultArgEmpty\", \"\"]"]]},{"name":"sendHttpAsync actions - different responseType","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"undefined\"]","#RequestNoBody","text","#TextResponseEmpty","[\"#TextResponseResultArgEmpty\", \"\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"\"]","#RequestNoBody","text","#TextResponseEmpty","[\"#TextResponseResultArgEmpty\", \"\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"text\"]","#RequestNoBody","text","#TextResponse","[\"#TextResponseResultArg\", \"#Text\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"json\"]","#RequestNoBody","json","#JsonResponseNoBody","[\"#JsonResponseResultArgNoBody\", null]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"json\"]","#RequestNoBody","json","#JsonResponseNull","[\"#JsonResponseResultArg\", null]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"json\"]","#RequestNoBody","json","#JsonResponse","[\"#JsonResponseResultArg\", \"#Json\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"arraybuffer\"]","#RequestNoBody","arraybuffer","#ArrayBufferResponseNoBody","[\"#ArrayBufferResponseResultArg\", null]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"arraybuffer\"]","#RequestNoBody","arraybuffer","#ArrayBufferResponse","[\"#ArrayBufferResponseResultArg\", \"#ArrayBuffer\"]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"blob\"]","#RequestNoBody","blob","#BlobResponseNoBody","[\"#BlobResponseResultArg\", null]"],["sendHttpAsync","[\"#RequestArgV1Base\", null, \"blob\"]","#RequestNoBody","blob","#BlobResponse","[\"#BlobResponseResultArg\", \"#CordovaBlob\"]"]]},{"name":"sendHttpIgnoreResponseAsync actions (result variants before request variants)","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpIgnoreResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","text","#TextResponseEmpty","null"],["sendHttpIgnoreResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","text","#TextResponse","null"],["sendHttpIgnoreResponseAsync","[\"#RequestArgV1Base\", \"#TextBodyData\"]","#RequestTextBody","text","#TextResponseEmpty","null"],["sendHttpIgnoreResponseAsync","[\"#RequestArgV1Base\", \"#CordovaBlob\"]","#RequestCordovaBlobBody","text","#TextResponseEmpty","null"]]},{"name":"sendHttpTextResponseAsync actions (result variants before request variants)","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpTextResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","text","#TextResponseEmpty","\"\""],["sendHttpTextResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","text","#TextResponse","\"#Text\""],["sendHttpTextResponseAsync","[\"#RequestArgV1Base\", \"#TextBodyData\"]","#RequestTextBody","text","#TextResponseEmpty","\"\""],["sendHttpTextResponseAsync","[\"#RequestArgV1Base\", \"#CordovaBlob\"]","#RequestCordovaBlobBody","text","#TextResponseEmpty","\"\""]]},{"name":"sendHttpJsonResponseAsync actions (result variants before request variants)","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpJsonResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","json","#JsonResponse","#Json"],["sendHttpJsonResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","json","#JsonResponseNull","null"],["sendHttpJsonResponseAsync","[\"#RequestArgV1Base\", \"#TextBodyData\"]","#RequestTextBody","json","#JsonResponseNull","null"],["sendHttpJsonResponseAsync","[\"#RequestArgV1Base\", \"#CordovaBlob\"]","#RequestCordovaBlobBody","json","#JsonResponseNull","null"]]},{"name":"sendHttpBlobResponseAsync actions (result variants before request variants)","description":"","dataTable":[["action","actionArgs","expectedRequest","expectedResponseType","stubTargetReturnValue","expectedPluginReturnValue"],["sendHttpBlobResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","blob","#BlobResponseNoBody","null"],["sendHttpBlobResponseAsync","[\"#RequestArgV1Base\", null]","#RequestNoBody","blob","#BlobResponse","#CordovaBlob"],["sendHttpBlobResponseAsync","[\"#RequestArgV1Base\", \"#TextBodyData\"]","#RequestTextBody","blob","#BlobResponseNoBody","null"],["sendHttpBlobResponseAsync","[\"#RequestArgV1Base\", \"#CordovaBlob\"]","#RequestCordovaBlobBody","blob","#BlobResponseNoBody","null"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":18},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4hf249p8i3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,null],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":["#TextResponseResultArgEmpty",""]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":1,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":27,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,#TextBodyData,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-proptehinf","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":19},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestTextBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i7amk0qq8w","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":1}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base","#TextBodyData",null],"expectedRequest":"#RequestTextBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":["#TextResponseResultArgEmpty",""]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":2,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":11},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,#CordovaBlob,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-tbegvvm5lh","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestCordovaBlobBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-6jwpkgiel","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base","#CordovaBlob",null],"expectedRequest":"#RequestCordovaBlobBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":["#TextResponseResultArgEmpty",""]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":3,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,undefined]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y0m703g74","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"undefined"],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":["#TextResponseResultArgEmpty",""]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":4,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4hf249p8i3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArgEmpty,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-kyn35z9z1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,""],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":["#TextResponseResultArgEmpty",""]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":5,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-15m765ae1rf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":5},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,text]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y446kjakg","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArg,#Text","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-j703m9d305","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"text"],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponse","expectedPluginReturnValue":["#TextResponseResultArg","#Text"]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":6,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-pgzg9f2jb4","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,json]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-f4jwckfka3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-sk8n77cw3f","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #JsonResponseResultArgNoBody,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-iwtgbk4ezx","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"json"],"expectedRequest":"#RequestNoBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponseNoBody","expectedPluginReturnValue":["#JsonResponseResultArgNoBody",null]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":7,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponseNull","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-j00im2hry3","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,json]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-f4jwckfka3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-sk8n77cw3f","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #JsonResponseResultArg,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-eedz5rcl8b","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"json"],"expectedRequest":"#RequestNoBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponseNull","expectedPluginReturnValue":["#JsonResponseResultArg",null]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":8,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-3z4yteq9p","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,json]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-f4jwckfka3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-sk8n77cw3f","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #JsonResponseResultArg,#Json","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-12k4jq4anmb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":1}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"json"],"expectedRequest":"#RequestNoBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponse","expectedPluginReturnValue":["#JsonResponseResultArg","#Json"]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":9,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #ArrayBufferResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-s6w8cods7n","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":5},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,arraybuffer]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-1v85evoz1v","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: arraybuffer)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i72mpef1eo","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #ArrayBufferResponseResultArg,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-w4y2p8iov7","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"arraybuffer"],"expectedRequest":"#RequestNoBody","expectedResponseType":"arraybuffer","stubTargetReturnValue":"#ArrayBufferResponseNoBody","expectedPluginReturnValue":["#ArrayBufferResponseResultArg",null]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":10,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #ArrayBufferResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-h2ggbgh8pf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,arraybuffer]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-1v85evoz1v","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: arraybuffer)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i72mpef1eo","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #ArrayBufferResponseResultArg,#ArrayBuffer","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-12nm9rmx8cz","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"arraybuffer"],"expectedRequest":"#RequestNoBody","expectedResponseType":"arraybuffer","stubTargetReturnValue":"#ArrayBufferResponse","expectedPluginReturnValue":["#ArrayBufferResponseResultArg","#ArrayBuffer"]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":11,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-54rrzbn12j","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":7},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,blob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y1uo4fiow","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-5i46v7et2b","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #BlobResponseResultArg,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-y2s8pu8a2d","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"blob"],"expectedRequest":"#RequestNoBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponseNoBody","expectedPluginReturnValue":["#BlobResponseResultArg",null]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":12,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":19,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-lqw1hnbilc","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":12},{"title":"executing sendHttpAsync with actionArgs [#RequestArgV1Base,,blob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y1uo4fiow","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-5i46v7et2b","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #BlobResponseResultArg,#CordovaBlob","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-hg3j0ypy6l","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpAsync","actionArgs":["#RequestArgV1Base",null,"blob"],"expectedRequest":"#RequestNoBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponse","expectedPluginReturnValue":["#BlobResponseResultArg","#CordovaBlob"]},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":13,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":19},{"title":"executing sendHttpIgnoreResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4hf92mdldp","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpIgnoreResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":14,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-15m765ae1rf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":7},{"title":"executing sendHttpIgnoreResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4hf92mdldp","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpIgnoreResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponse","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":15,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":7},{"title":"executing sendHttpIgnoreResponseAsync with actionArgs [#RequestArgV1Base,#TextBodyData]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y8bw42pa8","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestTextBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i7amk0qq8w","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpIgnoreResponseAsync","actionArgs":["#RequestArgV1Base","#TextBodyData"],"expectedRequest":"#RequestTextBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":16,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpIgnoreResponseAsync with actionArgs [#RequestArgV1Base,#CordovaBlob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-f4jwprodk3","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestCordovaBlobBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-6jwpkgiel","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpIgnoreResponseAsync","actionArgs":["#RequestArgV1Base","#CordovaBlob"],"expectedRequest":"#RequestCordovaBlobBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":17,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpTextResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-uxzb1k5lq5","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be ","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-16oiycq7jgb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpTextResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":""},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":18,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-15m765ae1rf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpTextResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-uxzb1k5lq5","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-79z0lhxvrf","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #Text","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-mqpkame9kz","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpTextResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponse","expectedPluginReturnValue":"#Text"},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":19,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":25,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":18},{"title":"executing sendHttpTextResponseAsync with actionArgs [#RequestArgV1Base,#TextBodyData]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y70dlvyw0","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestTextBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i7amk0qq8w","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be ","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-16oiycq7jgb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpTextResponseAsync","actionArgs":["#RequestArgV1Base","#TextBodyData"],"expectedRequest":"#RequestTextBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":""},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":20,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponseEmpty","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-nklnjmcvwz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpTextResponseAsync with actionArgs [#RequestArgV1Base,#CordovaBlob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y19nvp9q8","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestCordovaBlobBody, responseType: text)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-6jwpkgiel","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be ","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-16oiycq7jgb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpTextResponseAsync","actionArgs":["#RequestArgV1Base","#CordovaBlob"],"expectedRequest":"#RequestCordovaBlobBody","expectedResponseType":"text","stubTargetReturnValue":"#TextResponseEmpty","expectedPluginReturnValue":""},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":21,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-3z4yteq9p","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":5},{"title":"executing sendHttpJsonResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y6yyostmo","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-sk8n77cw3f","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #Json","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-16b72k97n1c","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpJsonResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponse","expectedPluginReturnValue":"#Json"},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":22,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponseNull","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-j00im2hry3","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":5},{"title":"executing sendHttpJsonResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y6yyostmo","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-sk8n77cw3f","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":1}],"example":{"action":"sendHttpJsonResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponseNull","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":23,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponseNull","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-j00im2hry3","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpJsonResponseAsync with actionArgs [#RequestArgV1Base,#TextBodyData]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y8bqgcx9c","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestTextBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-lnp08t8qm3","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpJsonResponseAsync","actionArgs":["#RequestArgV1Base","#TextBodyData"],"expectedRequest":"#RequestTextBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponseNull","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":24,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponseNull","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-j00im2hry3","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpJsonResponseAsync with actionArgs [#RequestArgV1Base,#CordovaBlob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y31r9p8m8","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestCordovaBlobBody, responseType: json)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-i73s42ussg","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpJsonResponseAsync","actionArgs":["#RequestArgV1Base","#CordovaBlob"],"expectedRequest":"#RequestCordovaBlobBody","expectedResponseType":"json","stubTargetReturnValue":"#JsonResponseNull","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":25,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-54rrzbn12j","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":15},{"title":"executing sendHttpBlobResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-xpko39e0t","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-5i46v7et2b","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpBlobResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponseNoBody","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":26,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":34,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-lqw1hnbilc","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":31},{"title":"executing sendHttpBlobResponseAsync with actionArgs [#RequestArgV1Base,]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-xpko39e0t","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestNoBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-5i46v7et2b","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #CordovaBlob","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-fa7uoqcqio","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpBlobResponseAsync","actionArgs":["#RequestArgV1Base",null],"expectedRequest":"#RequestNoBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponse","expectedPluginReturnValue":"#CordovaBlob"},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":27,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-54rrzbn12j","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":14},{"title":"executing sendHttpBlobResponseAsync with actionArgs [#RequestArgV1Base,#TextBodyData]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y8789ndnk","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestTextBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-1yem1g1unv","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpBlobResponseAsync","actionArgs":["#RequestArgV1Base","#TextBodyData"],"expectedRequest":"#RequestTextBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponseNoBody","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":28,"id":"fjqesg0agb-mws4hv5ebk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponseNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-mws4hv5ebk-54rrzbn12j","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            let stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            sendHttpAsyncStub.returns(Promise.resolve(detokenize(stubTargetReturnValue)));\r\n        }","duration":6},{"title":"executing sendHttpBlobResponseAsync with actionArgs [#RequestArgV1Base,#CordovaBlob]","status":"pass","exception":{},"rawTitle":"executing <action> with actionArgs [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"fjqesg0agb-mws4hv5ebk-4y5ynrlcxs","code":"() => {\r\n            request.action = scenarioOutlineContext.example.action;\r\n            request.actionArgs = detokenize(scenarioOutlineContext.example.actionArgs);\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: #RequestCordovaBlobBody, responseType: blob)","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters (request: <expectedRequest>, responseType: <expectedResponseType>)","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"fjqesg0agb-mws4hv5ebk-w3yfwm43wd","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.length.should.be.eql(1);\r\n            const actualRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            // Auto-determing the responseType\r\n            const expectedResponseType = scenarioOutlineContext.example.expectedResponseType;\r\n            DebugContracts.assertNonEmpty(expectedResponseType);\r\n            const expectedPipelineRequest = Object.assign({}, detokenize(scenarioOutlineContext.example.expectedRequest), { responseType: expectedResponseType });\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualRequest, expectedPipelineRequest);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"fjqesg0agb-mws4hv5ebk-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-mws4hv5ebk-bwl9ooimcb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"action":"sendHttpBlobResponseAsync","actionArgs":["#RequestArgV1Base","#CordovaBlob"],"expectedRequest":"#RequestCordovaBlobBody","expectedResponseType":"blob","stubTargetReturnValue":"#BlobResponseNoBody","expectedPluginReturnValue":null},"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","sequence":29,"id":"fjqesg0agb-mws4hv5ebk"}],"title":"Published App makes requests to the AppHttpClientPlugin with different arguments.","description":"This scenario tests the communication system from the PublishedApp to the AppHost. Because the Plugin makes\na Cordova.exec call to a handler via a communication channel, which then gets routed through the service via abus,\nthis scenario detects whether anything within this communication pipeline has changed (i.e. added a new action name,\nmodified the action arguments, or changed the return type).\n\n-action: Name of the action invoked from the service.\n-actionArgs: The args parameters that were passed through with the action name.\n-expectedRequest: The expected request parameters passed to the ISendHttpPipeline.sendHttpAsync function (this does not include the responseType).\n-stubbedTargetReturnValue: The return value of the call to the internal stubbed call.\n-expectedPluginReturnValue: Expected return value of the entire plugin call to the action name.","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":42,"failedCount":0,"pendingCount":0,"totalCount":42,"totalRuleViolations":0,"duration":90,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'null'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-xv6t61ezt9","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-lr3ht6n3og","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArg,#Text","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-j703m9d305","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"tables":[{"name":"When responseType !== 'arraybuffer' the response body should be returned as normal, no special processing.","description":"","dataTable":[["actionResponseTypeArg","stubTargetReturnValue","expectedPluginReturnValue"],["null","#TextResponse","[\"#TextResponseResultArg\", \"#Text\"]"],["text","#TextResponse","[\"#TextResponseResultArg\", \"#Text\"]"],["json","#JsonResponse","[\"#JsonResponseResultArg\", \"#Json\"]"],["blob","#BlobResponse","[\"#BlobResponseResultArg\", \"#CordovaBlob\"]"]]},{"name":"When responseType === 'arraybuffer', the special processing should be activated.","description":"","dataTable":[["actionResponseTypeArg","stubTargetReturnValue","expectedPluginReturnValue"],["arraybuffer","#ArrayBufferResponseFilePathBodyNoBody","[\"#ArrayBufferResponseResultArg\", null]"],["arraybuffer","#ArrayBufferResponseFilePathBody","[\"#ArrayBufferResponseResultArgFilePath\", \"#ResponseAppFileUrl\"]"],["arraybuffer","#ArrayBufferResponseFilePathBodyNoContentLength","[\"#ArrayBufferResponseResultArgFilePathNoContentLength\", \"#ResponseAppFileUrl\"]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'null'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-xv6t61ezt9","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-lr3ht6n3og","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArg,#Text","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-j703m9d305","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":null,"stubTargetReturnValue":"#TextResponse","expectedPluginReturnValue":["#TextResponseResultArg","#Text"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":1,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'text'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-ggtmnhfo0w","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #TextResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-lr3ht6n3og","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #TextResponseResultArg,#Text","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-j703m9d305","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":1}],"example":{"actionResponseTypeArg":"text","stubTargetReturnValue":"#TextResponse","expectedPluginReturnValue":["#TextResponseResultArg","#Text"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":2,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'json'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-sjm8wu4xob","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":7},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #JsonResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-lqyunaxwf4","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #JsonResponseResultArg,#Json","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-12k4jq4anmb","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":"json","stubTargetReturnValue":"#JsonResponse","expectedPluginReturnValue":["#JsonResponseResultArg","#Json"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":3,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'blob'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-ggugfm3jwg","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":16},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #BlobResponse","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-lqyk0guq0w","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":4},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":1},{"title":"plugin result value should be #BlobResponseResultArg,#CordovaBlob","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-hg3j0ypy6l","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":"blob","stubTargetReturnValue":"#BlobResponse","expectedPluginReturnValue":["#BlobResponseResultArg","#CordovaBlob"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":4,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'arraybuffer'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-hwhjdsq0st","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #ArrayBufferResponseFilePathBodyNoBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-14lvvm1l6ur","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #ArrayBufferResponseResultArg,","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-w4y2p8iov7","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":"arraybuffer","stubTargetReturnValue":"#ArrayBufferResponseFilePathBodyNoBody","expectedPluginReturnValue":["#ArrayBufferResponseResultArg",null]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":5,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'arraybuffer'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-hwhjdsq0st","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #ArrayBufferResponseFilePathBody","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-1126almhff7","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":6},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #ArrayBufferResponseResultArgFilePath,#ResponseAppFileUrl","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-11lbkrzw5pc","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":"arraybuffer","stubTargetReturnValue":"#ArrayBufferResponseFilePathBody","expectedPluginReturnValue":["#ArrayBufferResponseResultArgFilePath","#ResponseAppFileUrl"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":6,"id":"fjqesg0agb-1392q170rcd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: 'arraybuffer'","status":"pass","exception":{},"rawTitle":"actionArgs is setup so the request has requestSource: 'PublishedApp' and responseType: '<actionResponseTypeArg>'","description":"","docString":"","values":["PublishedApp","<actionResponseTypeArg>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-1392q170rcd-hwhjdsq0st","code":"() => {\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\"\r\n            };\r\n            const actionArgs = [requestArg, null, detokenize(scenarioOutlineContext.example.actionResponseTypeArg)];\r\n            request.actionArgs = actionArgs;\r\n        }","duration":7},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with #ArrayBufferResponseFilePathBodyNoContentLength","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with <stubTargetReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"fjqesg0agb-1392q170rcd-15yu78mih9x","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubTargetReturnValue = detokenize(scenarioOutlineContext.example.stubTargetReturnValue);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n        }","duration":3},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"fjqesg0agb-1392q170rcd-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":4},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"fjqesg0agb-1392q170rcd-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            // Auto-determing the responseType passed to the pipeline based on the responseType actionArg\r\n            const expectedResponseType = detokenize(scenarioOutlineContext.example.actionResponseTypeArg) || \"text\";\r\n            const expectedRequestParameters = {\r\n                method: \"GET\",\r\n                url: \"http://tempuri.org/sendHttpAsyncV2\",\r\n                requestSource: \"PublishedApp\",\r\n                responseType: expectedResponseType\r\n            };\r\n            sendHttpAsyncStub.firstCall.args.should.be.eql([expectedRequestParameters]);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"fjqesg0agb-1392q170rcd-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be #ArrayBufferResponseResultArgFilePathNoContentLength,#ResponseAppFileUrl","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"fjqesg0agb-1392q170rcd-11l7x1x7fcw","code":"() => {\r\n            let expectedPluginReturnValue = detokenize(scenarioOutlineContext.example.expectedPluginReturnValue);\r\n            successfulPluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionResponseTypeArg":"arraybuffer","stubTargetReturnValue":"#ArrayBufferResponseFilePathBodyNoContentLength","expectedPluginReturnValue":["#ArrayBufferResponseResultArgFilePathNoContentLength","#ResponseAppFileUrl"]},"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","sequence":7,"id":"fjqesg0agb-1392q170rcd"}],"title":"Published App makes requests to the AppHttpClientPlugin.sendHttpAsync enabling the 'specialProcessingNeeded' workflow.","description":"The plugin in the app sets a requestSource property on the request action arg to indicate the app can handle the new\nresponse body returned by this workflow. RN host will only enable this special processing when the requests's responseType\nis also set to 'arraybuffer'.\n\nThis is essentially an unofficial V2 of the sendHttpAsync action that will only work on new RN clients that support it.\nA host need not handle this setting, as the new apps will just default to assume the body is an ArrayBuffer.\n\nNote: This workflow does NOT enable the response to also specify an app-relative url so we will be mocking most of the request.\n\n-actionArgs: The args parameters that were passed through with the action name.\n-expectedRequest: The expected request parameters passed to the ISendHttpPipeline.sendHttpAsync function (this does not include the responseType).\n-stubbedTargetReturnValue: The return value of the call to the internal stubbed call.\n-expectedPluginReturnValue: Expected return value of the entire plugin call to the action name.","tags":[]}],"title":"Making http requests from within the published app","description":"Published apps that make http requests will send them via the host to the AppHttpClientPluginService.\n\nRules:\n* Send generic http request\n* Send generic http request and ignore the response\n* Send http request expecting a text response\n* Send http request expecting a json response\n* Send http request expecting a blob response\n* Temporary folder for files request is deleted when the application is closed","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AppHttpClientPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AppHttpClientPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the AppHttpClientPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"fjqesg0agb-9pbsb4-1802zvq0whx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            // TASK: The RN implementation for this plugin and the http pipeline has broken several invariants assumed to be true in the runtime.\r\n            // Now that the PABinary work is almost complete in the host it should be much easier to move the hacks for the 'specialProcessing' into\r\n            // just plugin code, and we can then avoid debug assert failures because instead of using a string or the PABlob, we'd just use the PABinary\r\n            // abstraction when calling into the host runtime. The older plugin controllers would just handle any conversion needed to fit the supported\r\n            // capabilities in the published app.\r\n            // When that's done, we can call setupDebugContractsToFailChai/resetDebugContracts for these tests.\r\n            //setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.AppHttpClientPluginService);\r\n            request = new Services.AppHttpClientRequest();\r\n            request.service = \"AppHttpClientPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":10}],"title":"","description":"","tags":[],"id":"fjqesg0agb-9pbsb4"},"id":"fjqesg0agb","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getAppAccessTokenAsync with args [/mockApiId]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4wlqc2dpxx-16880mpd5mj-5uwgjfcqxv","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"getAccessTokenForResourceAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObject(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4wlqc2dpxx-16880mpd5mj-a54xc2mwlc","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4wlqc2dpxx-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be paauth-mockAccessToken","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4wlqc2dpxx-16880mpd5mj-vgpb37yto3","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionName","actionArgs","expectTargetCalledWith","stubTargetReturnValue","expectedPluginResultValue"],["getAppAccessTokenAsync","[\"/mockApiId\"]","[{\"resourceName\": \"appservice\", \"apiId\": \"/mockApiId\"}]","{\"tokenType\": \"paauth\", \"accessToken\": \"paauth-mockAccessToken\"}","paauth-mockAccessToken"],["getPowerBIReadOnlyAccessTokenAsync","[]","[{\"resourceName\": \"powerbi-readonly\"}]","{\"tokenType\": \"bearer\", \"accessToken\": \"powerBI-mockAccessToken\"}","powerBI-mockAccessToken"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getAppAccessTokenAsync with args [/mockApiId]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4wlqc2dpxx-16880mpd5mj-5uwgjfcqxv","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"getAccessTokenForResourceAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObject(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4wlqc2dpxx-16880mpd5mj-a54xc2mwlc","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4wlqc2dpxx-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be paauth-mockAccessToken","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4wlqc2dpxx-16880mpd5mj-vgpb37yto3","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getAppAccessTokenAsync","actionArgs":["/mockApiId"],"expectTargetCalledWith":[{"resourceName":"appservice","apiId":"/mockApiId"}],"stubTargetReturnValue":{"tokenType":"paauth","accessToken":"paauth-mockAccessToken"},"expectedPluginResultValue":"paauth-mockAccessToken"},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":1,"id":"4wlqc2dpxx-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerBIReadOnlyAccessTokenAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4wlqc2dpxx-16880mpd5mj-nztw9ttjwj","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"getAccessTokenForResourceAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObject(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":12},{"title":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.getAccessTokenForResourceAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4wlqc2dpxx-16880mpd5mj-a54xc2mwlc","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4wlqc2dpxx-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be powerBI-mockAccessToken","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4wlqc2dpxx-16880mpd5mj-vckregrf31","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getPowerBIReadOnlyAccessTokenAsync","actionArgs":[],"expectTargetCalledWith":[{"resourceName":"powerbi-readonly"}],"stubTargetReturnValue":{"tokenType":"bearer","accessToken":"powerBI-mockAccessToken"},"expectedPluginResultValue":"powerBI-mockAccessToken"},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":2,"id":"4wlqc2dpxx-16880mpd5mj"}],"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","description":"","tags":[]}],"title":"Getting access tokens for use within the app","description":"Published apps that make authenticated requests will send a request to the AppIdentityServicePlugin to get the access tokens\n\nRules:\n* Get an app access token\n* Get a Power BI read only access token","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AppIdentityServicePluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AppIdentityServicePluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the AppIdentityServicePluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4wlqc2dpxx-9pbsb4-a588tshb5s","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.AppIdentityServicePluginService);\r\n            request = new Services.AppIdentityServiceRequest();\r\n            request.service = \"AppIdentityServicePlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":8}],"title":"","description":"","tags":[],"id":"4wlqc2dpxx-9pbsb4"},"id":"4wlqc2dpxx","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":11,"failedCount":0,"pendingCount":0,"totalCount":11,"totalRuleViolations":5,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"notifyAppLoaded request is sent"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":16,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"notifyAppLoaded request is sent","status":"pass","exception":{},"rawTitle":"notifyAppLoaded request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2vm53hd0x9-jknbl656i8-180ze0a1kcd","code":"() => {\r\n            request.action = \"notifyAppLoaded\";\r\n            request.actionArgs = [telemetrydata];\r\n            bus.send(request);\r\n        }","duration":16},{"title":"openErrorDialog action is dispatched","status":"pass","exception":{},"rawTitle":"openErrorDialog action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2vm53hd0x9-jknbl656i8-kle10kdrid","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions_1.appIsLoaded}`);\r\n        }","duration":0}],"title":"Notifying that the app is loaded","description":"","tags":[],"sequence":1,"id":"2vm53hd0x9-jknbl656i8"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the app is exited with an error"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is exited with an error","status":"pass","exception":{},"rawTitle":"the app is exited with an error","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2vm53hd0x9-17z6p17h8v7-s0heucmdor","code":"() => {\r\n            request.action = \"notifyAppFailed\";\r\n            request.actionArgs = [\r\n                \"error message\",\r\n                \"error stack\",\r\n                \"error details\"\r\n            ];\r\n            errorDetail = { message: request.actionArgs[0], stack: request.actionArgs[1], errors: request.actionArgs[2] };\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the appExitedWithError action is dispatched","status":"pass","exception":{},"rawTitle":"the appExitedWithError action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2vm53hd0x9-17z6p17h8v7-f9tg9g4n8j","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions_1.appExitedWithError}`);\r\n            actions[0].parameters.should.be.eql(errorDetail);\r\n        }","duration":1}],"title":"Exiting an app with an error","description":"","tags":[],"sequence":2,"id":"2vm53hd0x9-17z6p17h8v7"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"showToastMessage request is sent"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"showToastMessage request is sent","status":"pass","exception":{},"rawTitle":"showToastMessage request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2vm53hd0x9-2rn9lamp34-cn8n4oh3zk","code":"() => {\r\n            request.action = \"showToastMessage\";\r\n            request.actionArgs = [\r\n                \"info\",\r\n                [\"message\"],\r\n                0,\r\n                true,\r\n                \"Http\",\r\n                false,\r\n                { a: \"1\" }\r\n            ];\r\n            bus.send(request);\r\n        }","duration":2},{"title":"AddToastAction is called with the right payload","status":"pass","exception":{},"rawTitle":"AddToastAction is called with the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2vm53hd0x9-2rn9lamp34-jkrqm12rs0","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(1);\r\n            actions[0].type.should.be.eql(`${Actions_1.addToastMessage}`);\r\n            actions[0].payload.toastType.should.be.eql(\"info\");\r\n            actions[0].payload.message.should.be.eql(\"message\");\r\n            actions[0].payload.timeout.should.be.eql(0);\r\n            actions[0].payload.preventDuplicates.should.be.eql(true);\r\n            // Telemetry properties should not exist.\r\n            (typeof actions[0].payload.errorCategory === \"undefined\").should.be.eql(true);\r\n            (typeof actions[0].payload.isSuppressed === \"undefined\").should.be.eql(true);\r\n            (typeof actions[0].payload.telemetryData === \"undefined\").should.be.eql(true);\r\n        }","duration":0}],"title":"Showing a toast message from a new app","description":"","tags":[],"sequence":3,"id":"2vm53hd0x9-2rn9lamp34"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"showToastMessage request is sent"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"showToastMessage request is sent","status":"pass","exception":{},"rawTitle":"showToastMessage request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2vm53hd0x9-xaagvl67hf-cn8n4oh3zk","code":"() => {\r\n            request.action = \"showToastMessage\";\r\n            request.actionArgs = [\r\n                \"info\",\r\n                \"message\",\r\n                0,\r\n                true\r\n            ];\r\n            bus.send(request);\r\n        }","duration":1},{"title":"AddToastAction is called with the right payload","status":"pass","exception":{},"rawTitle":"AddToastAction is called with the right payload","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2vm53hd0x9-xaagvl67hf-jkrqm12rs0","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(1);\r\n            actions[0].type.should.be.eql(`${Actions_1.addToastMessage}`);\r\n            actions[0].payload.toastType.should.be.eql(\"info\");\r\n            actions[0].payload.message.should.be.eql(\"message\");\r\n            actions[0].payload.timeout.should.be.eql(0);\r\n            actions[0].payload.preventDuplicates.should.be.eql(true);\r\n        }","duration":1}],"title":"Showing a toast message from an old app","description":"","tags":[],"sequence":4,"id":"2vm53hd0x9-xaagvl67hf"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"showToastMessage request is sent"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"showToastMessage request is sent","status":"pass","exception":{},"rawTitle":"showToastMessage request is sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2vm53hd0x9-lr3yr9q79c-cn8n4oh3zk","code":"() => {\r\n            request.action = \"showToastMessage\";\r\n            request.actionArgs = [\r\n                \"info\",\r\n                [\"message\"],\r\n                0,\r\n                true,\r\n                \"None\",\r\n                true\r\n            ];\r\n            bus.send(request);\r\n        }","duration":1},{"title":"AddToastAction is not called","status":"pass","exception":{},"rawTitle":"AddToastAction is not called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2vm53hd0x9-lr3yr9q79c-jknr5a3g0g","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(0);\r\n        }","duration":0}],"title":"Showing a suppressed toast message","description":"","tags":[],"sequence":5,"id":"2vm53hd0x9-lr3yr9q79c"}],"title":"Published app life cycle","description":"Rules\n* Notify that the app has loaded\n* Show a toast message\n* Notify when app has failed and needs to be exited","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AppLifecyclePluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AppLifecycleRequest is registered to listen to events","status":"pass","exception":{},"rawTitle":"the AppLifecycleRequest is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2vm53hd0x9-9pbsb4-a5aeylju8w","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            bus.registerHandler(Services.AppLifecyclePluginService);\r\n            request = new Services.AppLifecycleRequest();\r\n            request.service = \"AppLifecycle\";\r\n            request.callbackId = \"test\";\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"2vm53hd0x9-9pbsb4"},"id":"2vm53hd0x9","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":17,"failedCount":0,"pendingCount":0,"totalCount":17,"totalRuleViolations":0,"duration":34,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":25,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing loadAppConnectionsAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"129g9jtj47p-duj4qtkuwr-rjjopxd18d","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostService.prototype, \"getAppDataSourceConfigsAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertJsonHashTable(stubTargetReturnValue);\r\n            // TODO: Add contract to verify the return type is valid for AppHostService.getAppDataSourceConfigsAsync.\r\n            getAppDataSourceConfigsAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"129g9jtj47p-duj4qtkuwr-rtax2a5dhn","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub.callCount.should.be.eql(1);\r\n            getAppDataSourceConfigsAsyncStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"129g9jtj47p-duj4qtkuwr-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"129g9jtj47p-duj4qtkuwr-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionName","actionArgs","expectTargetCalledWith","stubTargetReturnValue","expectedPluginResultValue"],["loadAppConnectionsAsync","[]","[]","{}","{}"],["loadAppConnectionsAsync_v2","[]","[]","{}","{}"],["loadAppConnectionsAsync","[]","[]","{\"minimalConfig\":{\"apiId\":\"/apiId1\",\"connectionName\":\"connectionName1\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl1\"},\"configWithDatasetOverride\":{\"apiId\":\"/apiId2\",\"connectionName\":\"connectionName2\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl2\",\"datasetNameOverride\":\"newDatasetName2\"},\"configWithTableOverride\":{\"apiId\":\"/apiId3\",\"connectionName\":\"connectionName3\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl3\",\"tableNameOverride\":\"newTableName3\"}}","{\"minimalConfig\":{\"id\":\"<connection id not used>\",\"name\":\"connectionName1\",\"type\":\"connection\",\"properties\":{\"apiId\":\"/apiId1\",\"api\":{\"id\":\"/apiId1\",\"name\":\"<api name not used>\",\"type\":\"api\",\"properties\":{\"runtimeUrls\":[\"http://tempuri.org/runtimeUrl1\"],\"capabilities\":[]}}}},\"configWithDatasetOverride\":{\"id\":\"<connection id not used>\",\"name\":\"connectionName2\",\"type\":\"connection\",\"properties\":{\"apiId\":\"/apiId2\",\"api\":{\"id\":\"/apiId2\",\"name\":\"<api name not used>\",\"type\":\"api\",\"properties\":{\"runtimeUrls\":[\"http://tempuri.org/runtimeUrl2\"],\"capabilities\":[]}}}},\"configWithTableOverride\":{\"id\":\"<connection id not used>\",\"name\":\"connectionName3\",\"type\":\"connection\",\"properties\":{\"apiId\":\"/apiId3\",\"api\":{\"id\":\"/apiId3\",\"name\":\"<api name not used>\",\"type\":\"api\",\"properties\":{\"runtimeUrls\":[\"http://tempuri.org/runtimeUrl3\"],\"capabilities\":[]}}}}}"],["loadAppConnectionsAsync_v2","[]","[]","{\"minimalConfig\":{\"apiId\":\"/apiId1\",\"connectionName\":\"connectionName1\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl1\"},\"configWithDatasetOverride\":{\"apiId\":\"/apiId2\",\"connectionName\":\"connectionName2\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl2\",\"datasetNameOverride\":\"newDatasetName2\"},\"configWithTableOverride\":{\"apiId\":\"/apiId3\",\"connectionName\":\"connectionName3\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl3\",\"tableNameOverride\":\"newTableName3\"}}","{\"minimalConfig\":{\"apiId\":\"/apiId1\",\"connectionName\":\"connectionName1\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl1\"},\"configWithDatasetOverride\":{\"apiId\":\"/apiId2\",\"connectionName\":\"connectionName2\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl2\",\"datasetNameOverride\":\"newDatasetName2\"},\"configWithTableOverride\":{\"apiId\":\"/apiId3\",\"connectionName\":\"connectionName3\",\"runtimeUrl\":\"http://tempuri.org/runtimeUrl3\",\"tableNameOverride\":\"newTableName3\"}}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing loadAppConnectionsAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"129g9jtj47p-duj4qtkuwr-rjjopxd18d","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostService.prototype, \"getAppDataSourceConfigsAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertJsonHashTable(stubTargetReturnValue);\r\n            // TODO: Add contract to verify the return type is valid for AppHostService.getAppDataSourceConfigsAsync.\r\n            getAppDataSourceConfigsAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"129g9jtj47p-duj4qtkuwr-rtax2a5dhn","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub.callCount.should.be.eql(1);\r\n            getAppDataSourceConfigsAsyncStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"129g9jtj47p-duj4qtkuwr-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"129g9jtj47p-duj4qtkuwr-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"loadAppConnectionsAsync","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{},"expectedPluginResultValue":{}},"title":"Plugin request should get routed to the AppHostService with correct conversions of arguments and results","sequence":1,"id":"129g9jtj47p-duj4qtkuwr"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing loadAppConnectionsAsync_v2 with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"129g9jtj47p-duj4qtkuwr-kg4bohupln","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostService.prototype, \"getAppDataSourceConfigsAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertJsonHashTable(stubTargetReturnValue);\r\n            // TODO: Add contract to verify the return type is valid for AppHostService.getAppDataSourceConfigsAsync.\r\n            getAppDataSourceConfigsAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"129g9jtj47p-duj4qtkuwr-rtax2a5dhn","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub.callCount.should.be.eql(1);\r\n            getAppDataSourceConfigsAsyncStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"129g9jtj47p-duj4qtkuwr-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"129g9jtj47p-duj4qtkuwr-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"loadAppConnectionsAsync_v2","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{},"expectedPluginResultValue":{}},"title":"Plugin request should get routed to the AppHostService with correct conversions of arguments and results","sequence":2,"id":"129g9jtj47p-duj4qtkuwr"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing loadAppConnectionsAsync with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"129g9jtj47p-duj4qtkuwr-rjjopxd18d","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostService.prototype, \"getAppDataSourceConfigsAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertJsonHashTable(stubTargetReturnValue);\r\n            // TODO: Add contract to verify the return type is valid for AppHostService.getAppDataSourceConfigsAsync.\r\n            getAppDataSourceConfigsAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"129g9jtj47p-duj4qtkuwr-rtax2a5dhn","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub.callCount.should.be.eql(1);\r\n            getAppDataSourceConfigsAsyncStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"129g9jtj47p-duj4qtkuwr-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"129g9jtj47p-duj4qtkuwr-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"loadAppConnectionsAsync","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"minimalConfig":{"apiId":"/apiId1","connectionName":"connectionName1","runtimeUrl":"http://tempuri.org/runtimeUrl1"},"configWithDatasetOverride":{"apiId":"/apiId2","connectionName":"connectionName2","runtimeUrl":"http://tempuri.org/runtimeUrl2","datasetNameOverride":"newDatasetName2"},"configWithTableOverride":{"apiId":"/apiId3","connectionName":"connectionName3","runtimeUrl":"http://tempuri.org/runtimeUrl3","tableNameOverride":"newTableName3"}},"expectedPluginResultValue":{"minimalConfig":{"id":"<connection id not used>","name":"connectionName1","type":"connection","properties":{"apiId":"/apiId1","api":{"id":"/apiId1","name":"<api name not used>","type":"api","properties":{"runtimeUrls":["http://tempuri.org/runtimeUrl1"],"capabilities":[]}}}},"configWithDatasetOverride":{"id":"<connection id not used>","name":"connectionName2","type":"connection","properties":{"apiId":"/apiId2","api":{"id":"/apiId2","name":"<api name not used>","type":"api","properties":{"runtimeUrls":["http://tempuri.org/runtimeUrl2"],"capabilities":[]}}}},"configWithTableOverride":{"id":"<connection id not used>","name":"connectionName3","type":"connection","properties":{"apiId":"/apiId3","api":{"id":"/apiId3","name":"<api name not used>","type":"api","properties":{"runtimeUrls":["http://tempuri.org/runtimeUrl3"],"capabilities":[]}}}}}},"title":"Plugin request should get routed to the AppHostService with correct conversions of arguments and results","sequence":3,"id":"129g9jtj47p-duj4qtkuwr"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing loadAppConnectionsAsync_v2 with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"129g9jtj47p-duj4qtkuwr-kg4bohupln","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostService.prototype, \"getAppDataSourceConfigsAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertJsonHashTable(stubTargetReturnValue);\r\n            // TODO: Add contract to verify the return type is valid for AppHostService.getAppDataSourceConfigsAsync.\r\n            getAppDataSourceConfigsAsyncStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":7},{"title":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppHostService.getAppDataSourceConfigsAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"129g9jtj47p-duj4qtkuwr-rtax2a5dhn","code":"() => {\r\n            getAppDataSourceConfigsAsyncStub.callCount.should.be.eql(1);\r\n            getAppDataSourceConfigsAsyncStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"129g9jtj47p-duj4qtkuwr-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"129g9jtj47p-duj4qtkuwr-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"loadAppConnectionsAsync_v2","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"minimalConfig":{"apiId":"/apiId1","connectionName":"connectionName1","runtimeUrl":"http://tempuri.org/runtimeUrl1"},"configWithDatasetOverride":{"apiId":"/apiId2","connectionName":"connectionName2","runtimeUrl":"http://tempuri.org/runtimeUrl2","datasetNameOverride":"newDatasetName2"},"configWithTableOverride":{"apiId":"/apiId3","connectionName":"connectionName3","runtimeUrl":"http://tempuri.org/runtimeUrl3","tableNameOverride":"newTableName3"}},"expectedPluginResultValue":{"minimalConfig":{"apiId":"/apiId1","connectionName":"connectionName1","runtimeUrl":"http://tempuri.org/runtimeUrl1"},"configWithDatasetOverride":{"apiId":"/apiId2","connectionName":"connectionName2","runtimeUrl":"http://tempuri.org/runtimeUrl2","datasetNameOverride":"newDatasetName2"},"configWithTableOverride":{"apiId":"/apiId3","connectionName":"connectionName3","runtimeUrl":"http://tempuri.org/runtimeUrl3","tableNameOverride":"newTableName3"}}},"title":"Plugin request should get routed to the AppHostService with correct conversions of arguments and results","sequence":4,"id":"129g9jtj47p-duj4qtkuwr"}],"title":"Plugin request should get routed to the AppHostService with correct conversions of arguments and results","description":"","tags":[]}],"title":"Retrieving details from the runtime PowerAppsClient","description":"Published apps that require to get data that can be obtained via the runtime PowerAppsClient\n\nRules:\n* Load connections used by the app","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/AppPowerAppsClientPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the AppPowerAppsClientPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the AppPowerAppsClientPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"129g9jtj47p-9pbsb4-6r4305js9x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.AppPowerAppsClientPluginService);\r\n            request = new Services.AppPowerAppsClientRequest();\r\n            request.service = \"AppPowerAppsClientPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":9}],"title":"","description":"","tags":[],"id":"129g9jtj47p-9pbsb4"},"id":"129g9jtj47p","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":22,"failedCount":0,"pendingCount":0,"totalCount":22,"totalRuleViolations":1,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the camera has not been initialized","status":"pass","exception":{},"rawTitle":"the camera has not been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"k9zhkl9zyo-1802zc5n87x-4d5fi9m13f","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            canvasCamera = new Services.CanvasCameraPluginService(cameraProvider);\r\n            cameraProvider.previewActive.should.be.equal(false);\r\n        }","duration":0},{"title":"the camera is initialized with the following message","status":"pass","exception":{},"rawTitle":"the camera is initialized with the following message","description":"* Camera position is 0 for front and 1 for back\n\n            ","docString":"","dataTable":[["service","CanvasCamera"],["action","initialize"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"k9zhkl9zyo-1802zc5n87x-77etht1hrf","code":"() => {\r\n            // Initialize the plugin\r\n            // Assign the message attributes\r\n            request = new Services.CanvasCameraPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n        }","duration":1},{"title":"the message has the following args","status":"pass","exception":{},"rawTitle":"the message has the following args","description":"","docString":"","dataTable":[["width","480"],["height","640"],["quality","75"],["position","1"]],"values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"k9zhkl9zyo-1802zc5n87x-b37ruzelk0","code":"() => {\r\n            actionArgs = stepContext.tableAsEntity;\r\n            request.actionArgs.push(actionArgs);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the camera should be initialized with the args as camera options","status":"pass","exception":{},"rawTitle":"the camera should be initialized with the args as camera options","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Configure camera with desired settings"}],"type":"Then","sequence":4,"id":"k9zhkl9zyo-1802zc5n87x-cwwy87gxxv","code":"() => {\r\n            actionArgs.should.eql(cameraProvider.options);\r\n        }","duration":0},{"title":"preview has not started","status":"pass","exception":{},"rawTitle":"preview has not started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"k9zhkl9zyo-1802zc5n87x-r2i56383uz","code":"() => {\r\n            cameraProvider.previewActive.should.be.equal(false);\r\n        }","duration":0}],"title":"Configure camera with desired settings","description":"","tags":[],"sequence":1,"id":"k9zhkl9zyo-1802zc5n87x"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the camera has been initialized","status":"pass","exception":{},"rawTitle":"the camera has been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"k9zhkl9zyo-k9w5i4mpts-86e713j15n","code":"() => {\r\n            // Initialize the plugin\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            spy.ensureSubscriber(Services.CordovaPluginExecuteScriptCommand);\r\n            canvasCamera = new Services.CanvasCameraPluginService(cameraProvider);\r\n            // setup the provider\r\n            cameraProvider.initializeCameraAsync(new Services.CanvasCameraOptions());\r\n        }","duration":0},{"title":"the camera preview is started with the following message","status":"pass","exception":{},"rawTitle":"the camera preview is started with the following message","description":"","docString":"","dataTable":[["service","CanvasCamera"],["action","startCapture"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"k9zhkl9zyo-k9w5i4mpts-b35ssf0tkw","code":"() => {\r\n            // Initialize the plugin\r\n            // Assign the message attributes\r\n            request = new Services.CanvasCameraPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the camera should now be in preview mode","status":"pass","exception":{},"rawTitle":"the camera should now be in preview mode","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"k9zhkl9zyo-k9w5i4mpts-x15onu51az","code":"() => {\r\n            cameraProvider.previewActive.should.be.equal(true);\r\n        }","duration":0},{"title":"a success message should be sent","status":"pass","exception":{},"rawTitle":"a success message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"k9zhkl9zyo-k9w5i4mpts-z5p7m63okb","code":"() => {\r\n            messageResult = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            messageResult.message.status.should.be.equal(Services.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"a script message should be sent to start the preview capture","status":"pass","exception":{},"rawTitle":"a script message should be sent to start the preview capture","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"k9zhkl9zyo-k9w5i4mpts-lqvi3ms880","code":"() => {\r\n            const scriptMessageResult = spy.messageType(Services.CordovaPluginExecuteScriptCommand).messages(0);\r\n            scriptMessageResult.message.script.length.should.be.greaterThan(0);\r\n        }","duration":1},{"title":"keepCallback should be 'false'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'false'","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":6,"id":"k9zhkl9zyo-k9w5i4mpts-w3buaghj5n","code":"() => {\r\n            messageResult.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Start preview","description":"","tags":[],"sequence":2,"id":"k9zhkl9zyo-k9w5i4mpts"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the camera preview has been started","status":"pass","exception":{},"rawTitle":"the camera preview has been started","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"k9zhkl9zyo-k9vndlxxa8-12by40pnpcl","code":"() => {\r\n            // Initialize the plugin\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            spy.ensureSubscriber(Services.CordovaPluginExecuteScriptCommand);\r\n            canvasCamera = new Services.CanvasCameraPluginService(cameraProvider);\r\n            // setup the provider\r\n            cameraProvider.initializeCameraAsync(new Services.CanvasCameraOptions());\r\n            cameraProvider.startPreviewAsync();\r\n        }","duration":0},{"title":"the camera preview is stopped with the following message","status":"pass","exception":{},"rawTitle":"the camera preview is stopped with the following message","description":"","docString":"","dataTable":[["service","CanvasCamera"],["action","stopCapture"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"k9zhkl9zyo-k9vndlxxa8-14wo3qdijez","code":"() => {\r\n            // Initialize the plugin\r\n            // Assign the message attributes\r\n            request = new Services.CanvasCameraPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":12},{"title":"the camera should not be in preview mode","status":"pass","exception":{},"rawTitle":"the camera should not be in preview mode","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"k9zhkl9zyo-k9vndlxxa8-o5vu1zssxh","code":"() => {\r\n            cameraProvider.previewActive.should.be.equal(false);\r\n        }","duration":0},{"title":"a success message should be sent","status":"pass","exception":{},"rawTitle":"a success message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"k9zhkl9zyo-k9vndlxxa8-z5p7m63okb","code":"() => {\r\n            messageResult = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            messageResult.message.status.should.be.equal(Services.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"a script message should be sent to stop the preview capture","status":"pass","exception":{},"rawTitle":"a script message should be sent to stop the preview capture","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"k9zhkl9zyo-k9vndlxxa8-lqvrk9szeo","code":"() => {\r\n            const scriptMessageResult = spy.messageType(Services.CordovaPluginExecuteScriptCommand).messages(0);\r\n            scriptMessageResult.message.script.length.should.be.greaterThan(0);\r\n        }","duration":1},{"title":"keepCallback should be 'false'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'false'","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":6,"id":"k9zhkl9zyo-k9vndlxxa8-w3buaghj5n","code":"() => {\r\n            messageResult.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Stop preview","description":"","tags":[],"sequence":3,"id":"k9zhkl9zyo-k9vndlxxa8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the camera preview has been started","status":"pass","exception":{},"rawTitle":"the camera preview has been started","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"k9zhkl9zyo-rplar2aher-12by40pnpcl","code":"() => {\r\n            // Initialize the plugin\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            spy.ensureSubscriber(Services.CordovaPluginExecuteScriptCommand);\r\n            canvasCamera = new Services.CanvasCameraPluginService(cameraProvider);\r\n            // setup the provider\r\n            cameraProvider.initializeCameraAsync(new Services.CanvasCameraOptions());\r\n            cameraProvider.startPreviewAsync();\r\n        }","duration":0},{"title":"the camera takes a picture with the following message","status":"pass","exception":{},"rawTitle":"the camera takes a picture with the following message","description":"","docString":"","dataTable":[["service","CanvasCamera"],["action","captureImage"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"k9zhkl9zyo-rplar2aher-11cyp65mhxh","code":"() => {\r\n            // Initialize the plugin\r\n            // Assign the message attributes\r\n            request = new Services.CanvasCameraPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"a success message should be sent","status":"pass","exception":{},"rawTitle":"a success message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"k9zhkl9zyo-rplar2aher-38aqffoloj","code":"() => {\r\n            messageResult = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            messageResult.message.status.should.be.equal(Services.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"the message should contain a base64 encoded representation of the image","status":"pass","exception":{},"rawTitle":"the message should contain a base64 encoded representation of the image","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"k9zhkl9zyo-rplar2aher-lr0eo9jdlc","code":"() => {\r\n            // As this is not hooked up to the real native code - its not possible to validate this completely, so\r\n            // can only validate that something is returned from plugin\r\n            messageResult.message.args[0].imageURI.should.be.equal(\"image here\");\r\n        }","duration":1},{"title":"keepCallback should be 'false'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'false'","description":"","docString":"","values":[false],"ruleViolations":[],"type":"and","sequence":5,"id":"k9zhkl9zyo-rplar2aher-w3buaghj5n","code":"() => {\r\n            messageResult.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Capture image","description":"","tags":[],"sequence":4,"id":"k9zhkl9zyo-rplar2aher"}],"title":"Allow the ability to take pictures with an inline video preview","description":"Published Apps support the ability to add a camera control that will provide real-time preview within the page.\nThis allows the user to overlay other elements over the video stream.\n\nRules:\n* Start and stop video preview\n* Stream a video preview to the published App\n* Snap a picture and return to the published App\n\nDesign:\n* preview: the plugin captures an image from the camera and stores the data in memory, using the settings provided during initialization.\n  The WebView obtains this image via the custom URLProtocol http://pa-camera/preview. This eliminates the need to write the data to disk for previews.\n  As part of the preview a script is executed in the WebView that updates the image around 30 frames per second. When stopping the preview another script\n  is sent to the WebView that stops the updates.\n* capture: the images is sent via a message as a base64 encoded image using the settings provided during initialization.","tags":["platform:ios"],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/CanvasCamera.Spec.js","id":"k9zhkl9zyo","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting Compass data with the following message:","status":"pass","exception":{},"rawTitle":"requesting Compass data with the following message:","description":"","docString":"","dataTable":[["service","Compass"],["action","getHeading"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a53rxquoxs-a1q5nn84nf-15c8jngw8t9","code":"() => {\r\n            request = new Services.CompassRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":5},{"title":"the current value of the Compass heading should be sent","status":"pass","exception":{},"rawTitle":"the current value of the Compass heading should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a53rxquoxs-a1q5nn84nf-cnapdxi4xs","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            actual = actual.message.args[0];\r\n            let expected = backgroundContext.given.tableAsEntity;\r\n            actual.should.be.eql(expected);\r\n        }","duration":1}],"title":"Application requests the current Compass heading","description":"","tags":[],"sequence":1,"id":"a53rxquoxs-a1q5nn84nf"}],"title":"Retrieving Compass details","description":"Published Apps support the ability to define an Compass function, which provides the Compass data from the device\n\nRules:\n* Start receiving Compass data. Data will be streamed to the App until stopped.\n* Stop receiving Compass data","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/CompassPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the current Compass data for the device is:","status":"pass","exception":{},"rawTitle":"the current Compass data for the device is:","description":"","docString":"","dataTable":[["heading","10"],["timestamp","1233456"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a53rxquoxs-9pbsb4-b30na05rts","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            sensorService = new Services.CompassPluginService(sensorProvider);\r\n            const data = stepContext.tableAsEntity;\r\n            sensorProvider.simulateDataUpdate(data);\r\n        }","duration":2}],"title":"","description":"","tags":[],"id":"a53rxquoxs-9pbsb4"},"id":"a53rxquoxs","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"published app sends request to get device information"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"published app sends request to get device information","status":"pass","exception":{},"rawTitle":"published app sends request to get device information","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"x15w27wd8l-ktkgxil6qb-16b77m8t4eo","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            bus.registerHandler(Services.CordovaDevicePluginService);\r\n            request = new Services.CordovaDeviceRequest();\r\n            request.service = \"Device\";\r\n            request.callbackId = \"testdeviceinfocallback\";\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a message with status of ok should be sent","status":"pass","exception":{},"rawTitle":"a message with status of ok should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"x15w27wd8l-ktkgxil6qb-cna31u0jls","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.status.should.be.equal(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"device model in the message payload should match the test data","status":"pass","exception":{},"rawTitle":"device model in the message payload should match the test data","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"x15w27wd8l-ktkgxil6qb-shcwcf6ydv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            resultDeviceInfo = yield mockDeviceInfoProvier.getDeviceInfoAsync();\r\n            result.message.args[0].model.should.be.eql(resultDeviceInfo.model);\r\n        })","duration":0}],"title":"Published app requests information about the device it is running on","description":"","tags":[],"sequence":1,"id":"x15w27wd8l-ktkgxil6qb"}],"title":"Routing Cordova plugin messages for service: Device","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/CordovaDevicePluginService.Spec.js","id":"x15w27wd8l","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":61,"failedCount":0,"pendingCount":0,"totalCount":61,"totalRuleViolations":17,"duration":60,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile.zip':\n            | service    | SienaFilePickerPlugin  |\n            | action     | launchSelectFilePicker |\n            | callbackId | filepicker123          |\n            | actionArgs | [\"/testappdirectory\"]  |\n            "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile.zip':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile.zip':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePicker"],["callbackId","filepicker123"],["actionArgs","[\"/testappdirectory\"]"]],"values":["testfile.zip"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-mwpqufkba8-b32qz48duo","code":"() => {\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":12},{"title":"launchSelectFilePicker should be called with AppsSandboxedData/12345asdf394","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with AppsSandboxedData/12345asdf394","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-mwpqufkba8-5m3w7x4pwt","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(appSandBoxPath, -1, false).should.be.eql(true);\r\n        }","duration":1},{"title":"a response with the name of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the name of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-mwpqufkba8-oikdmrqh2r","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        }","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-mwpqufkba8-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to select a zip file on iOS device.","description":"","tags":[],"sequence":1,"id":"16b0xc4xrcw-mwpqufkba8"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile.zip':\n            | service    | SienaFilePickerPlugin  |\n            | action     | launchSelectFilePicker |\n            | callbackId | filepicker123          |\n            | actionArgs | [\"/testappdirectory\"]  |\n            "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile.zip':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile.zip':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePicker"],["callbackId","filepicker123"],["actionArgs","[\"/testappdirectory\"]"]],"values":["testfile.zip"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-mwt34fsr28-b32qz48duo","code":"() => {\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"launchSelectFilePicker should be called with AppsSandboxedData/12345asdf394","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with AppsSandboxedData/12345asdf394","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-mwt34fsr28-5m3w7x4pwt","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(appSandBoxPath, -1, false).should.be.eql(true);\r\n        }","duration":0},{"title":"a response with the name of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the name of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-mwt34fsr28-oikdmrqh2r","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        }","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-mwt34fsr28-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to select a zip file on Android device.","description":"","tags":[],"sequence":2,"id":"16b0xc4xrcw-mwt34fsr28"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:\n        | service    | SienaFilePickerPlugin  |\n        | action     | launchSelectFilePicker |\n        | callbackId | filepicker123          |\n        | actionArgs | [\"\"]                   |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePicker"],["callbackId","filepicker123"],["actionArgs","[\"\"]"]],"values":["testfile2.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-7nthxhla2o-b31rnjzpo0","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with the name of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the name of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-7nthxhla2o-kge42s9v8r","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        }","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-7nthxhla2o-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-7nthxhla2o-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches file picker to select file on an iOS device, the selected file will be saved to the current running published app temporary folder","description":"","tags":[],"sequence":3,"id":"16b0xc4xrcw-7nthxhla2o"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:\n        | service    | SienaFilePickerPlugin  |\n        | action     | launchSelectFilePicker |\n        | callbackId | filepicker123          |\n        | actionArgs | [\"\"]                   |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePicker"],["callbackId","filepicker123"],["actionArgs","[\"\"]"]],"values":["testfile2.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-7nzmsemkyo-b31rnjzpo0","code":"() => {\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            RNAndroidActionSheetMock_1.RNAndroidActionSheetMock.default.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with the name of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the name of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-7nzmsemkyo-kge42s9v8r","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        }","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-7nzmsemkyo-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-7nzmsemkyo-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches file picker to select file on an Android device, the selected file will be saved to the current running published app temporary folder","description":"","tags":[],"sequence":4,"id":"16b0xc4xrcw-7nzmsemkyo"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:\n        | service    | SienaFilePickerPlugin    |\n        | action     | launchSelectFilePickerV2 |\n        | callbackId | filepicker123            |\n        | actionArgs | [\"\", 1000000]            |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile2.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-10oo7g480np-b34rfrysf4","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            fileMetaData = { relativePath: `0/tempFiles/${whenContext.values[0]}`, absolutePath: `/user/somepath/0/tempFiles/${whenContext.values[0]}`, contentType: \"image/jpeg\", fileSize: 2000 };\r\n            nativeResult = { status: ApiHost_1.ApiHost.Status.Ok, result: fileMetaData };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"a response with the relative URL, content type and size of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative URL, content type and size of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-10oo7g480np-cnc9ndnfa8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `tempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 2000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-10oo7g480np-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-10oo7g480np-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches the updated file picker on an iOS device with an action of launchSelectFilePickerV2 to select a file, a serialized PABinary object should be sent back to the published app as the result","description":"","tags":[],"sequence":5,"id":"16b0xc4xrcw-10oo7g480np"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:\n        | service    | SienaFilePickerPlugin    |\n        | action     | launchSelectFilePickerV2 |\n        | callbackId | filepicker123            |\n        | actionArgs | [\"\", 1000000]            |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile2.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-cncwwpqg1s-b34rfrysf4","code":"() => {\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            RNAndroidActionSheetMock_1.RNAndroidActionSheetMock.default.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            fileMetaData = { relativePath: `0/tempFiles/${whenContext.values[0]}`, absolutePath: `/user/somepath/0/tempFiles/${whenContext.values[0]}`, contentType: \"image/jpeg\", fileSize: 2000 };\r\n            nativeResult = { status: ApiHost_1.ApiHost.Status.Ok, result: fileMetaData };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"a response with the relative URL, content type and size of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative URL, content type and size of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-cncwwpqg1s-cnc9ndnfa8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `tempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 2000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-cncwwpqg1s-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-cncwwpqg1s-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches the updated file picker on an Android device with an action of launchSelectFilePickerV2 to select a file, a serialized PABinary object should be sent back to the published app as the result","description":"","tags":[],"sequence":6,"id":"16b0xc4xrcw-cncwwpqg1s"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file that is too large without providing a destination path:\n        | service    | SienaFilePickerPlugin    |\n        | action     | launchSelectFilePickerV2 |\n        | callbackId | filepicker123            |\n        | actionArgs | [\"\", 1000000]            |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file that is too large without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file that is too large without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-tu4syp5meb-jmeh4q7ymr","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            fileMetaData = { relativePath: \"\", absolutePath: \"\", contentType: \"image/jpeg\", fileSize: 2000000 };\r\n            nativeResult = { status: ApiHost_1.ApiHost.Status.Ok, result: fileMetaData };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with type PABinary-invalidV1 and file too big as the reason should be sent","status":"pass","exception":{},"rawTitle":"a response with type PABinary-invalidV1 and file too big as the reason should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-tu4syp5meb-pbzuhlxg45","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-invalidV1\",\r\n                reasonName: Core.InvalidBinarySourceReason[Core.InvalidBinarySourceReason.FileTooBig],\r\n                contentType: \"image/jpeg\",\r\n                size: 2000000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-tu4syp5meb-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":1},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-tu4syp5meb-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches the updated file picker on an iOS device with an action of launchSelectFilePickerV2 to select an oversized file, a serialized PABinary object with type PABinary-invalidV1 should be sent back to the published app as the result","description":"","tags":[],"sequence":7,"id":"16b0xc4xrcw-tu4syp5meb"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file that is too large without providing a destination path:\n        | service    | SienaFilePickerPlugin    |\n        | action     | launchSelectFilePickerV2 |\n        | callbackId | filepicker123            |\n        | actionArgs | [\"\", 1000000]            |\n        "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file that is too large without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file that is too large without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-cn5cqkcni8-jmeh4q7ymr","code":"() => {\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            RNAndroidActionSheetMock_1.RNAndroidActionSheetMock.default.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.Browse);\r\n            whenContext = stepContext;\r\n            fileMetaData = { relativePath: \"\", absolutePath: \"\", contentType: \"image/jpeg\", fileSize: 2000000 };\r\n            nativeResult = { status: ApiHost_1.ApiHost.Status.Ok, result: fileMetaData };\r\n            launchSelectFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSelectFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with type PABinary-invalidV1 and file too big as the reason should be sent","status":"pass","exception":{},"rawTitle":"a response with type PABinary-invalidV1 and file too big as the reason should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-cn5cqkcni8-pbzuhlxg45","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-invalidV1\",\r\n                reasonName: Core.InvalidBinarySourceReason[Core.InvalidBinarySourceReason.FileTooBig],\r\n                contentType: \"image/jpeg\",\r\n                size: 2000000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":1},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-cn5cqkcni8-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"launchSelectFilePicker should be called with 0/TempFiles","status":"pass","exception":{},"rawTitle":"launchSelectFilePicker should be called with 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-cn5cqkcni8-78ksfxw8r9","code":"() => {\r\n            launchSelectFilePickerStub.calledWith(`0/${Config_1.Constants.FolderNames.TempFiles}`);\r\n        }","duration":0}],"title":"User launches the updated file picker on an Android device with an action of launchSelectFilePickerV2 to select an oversized file, a serialized PABinary object with type PABinary-invalidV1 should be sent back to the published app as the result","description":"","tags":[],"sequence":8,"id":"16b0xc4xrcw-cn5cqkcni8"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a photo with name 'testfile.jpg':\n            | service    | SienaFilePickerPlugin    |\n            | action     | launchSelectFilePickerV2 |\n            | callbackId | filepicker123            |\n            | actionArgs | [\"\", 1000000]            |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a photo with name 'testfile.jpg':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a photo with name 'testfile.jpg':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-udshzuudg3-16oj438e9dh","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.PhotoLibrary);\r\n            const response = { uri: `0/TempFiles/testfile.jpg`, fileSize: 300000 };\r\n            RNImagePickerMock_1.RNImagePickerMock.setupResponse(response);\r\n            whenContext = stepContext;\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"a response with the relative URL, content type and size of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative URL, content type and size of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-udshzuudg3-cnc9ndnfa8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `TempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 300000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-udshzuudg3-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to select a photo from photo library on iOS device.","description":"","tags":[],"sequence":9,"id":"16b0xc4xrcw-udshzuudg3"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to take a photo using camera with result image file named 'testfile.jpg':\n            | service    | SienaFilePickerPlugin    |\n            | action     | launchSelectFilePickerV2 |\n            | callbackId | filepicker123            |\n            | actionArgs | [\"\", 1000000]            |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to take a photo using camera with result image file named 'testfile.jpg':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to take a photo using camera with result image file named 'testfile.jpg':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-liihl3bwbv-kriduhn2zn","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.TakePhoto);\r\n            const response = { uri: `0/TempFiles/testfile.jpg`, fileSize: 300000 };\r\n            RNImagePickerMock_1.RNImagePickerMock.setupResponse(response);\r\n            whenContext = stepContext;\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with the relative URL, content type and size of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative URL, content type and size of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-liihl3bwbv-cnc9ndnfa8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `TempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 300000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-liihl3bwbv-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to take a photo using camera on iOS device.","description":"","tags":[],"sequence":10,"id":"16b0xc4xrcw-liihl3bwbv"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker on Android to take a photo using camera with resulting image file named 'testfile.jpg':\n            | service    | SienaFilePickerPlugin    |\n            | action     | launchSelectFilePickerV2 |\n            | callbackId | filepicker123            |\n            | actionArgs | [\"\", 1000000]            |\n            "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker on Android to take a photo using camera with resulting image file named 'testfile.jpg':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker on Android to take a photo using camera with resulting image file named 'testfile.jpg':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-8907mea25-1vud7ktzzf","code":"() => {\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            RNAndroidActionSheetMock_1.RNAndroidActionSheetMock.default.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.TakePhoto);\r\n            const response = { path: \"somefilepath/testfile.jpg\", fileSize: 300000 };\r\n            RNImagePickerMock_1.RNImagePickerMock.setupResponse(response);\r\n            moveFileAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.moveFileAsync.name);\r\n            whenContext = stepContext;\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"moveFileAsync should be called with somefilepath/testfile.jpg and 0/TempFiles","status":"pass","exception":{},"rawTitle":"moveFileAsync should be called with somefilepath/testfile.jpg and 0/TempFiles","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-8907mea25-a55tolzov4","code":"() => {\r\n            moveFileAsyncStub.calledWith(\"somefilepath/testfile.jpg\", \"0/TempFiles\").should.be.eql(true);\r\n        }","duration":1},{"title":"a response with the relative path of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative path of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-8907mea25-cnc5yf8uow","code":"() => {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `TempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 300000\r\n            };\r\n        }","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-8907mea25-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to take a photo using camera on Android device.","description":"","tags":[],"sequence":11,"id":"16b0xc4xrcw-8907mea25"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:\n        | service    | SienaFilePickerPlugin    |\n        | action     | launchSelectFilePickerV2 |\n        | callbackId | filepicker123            |\n        | actionArgs | [\"\", 1000000]            |\n        "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to select a file with name 'testfile2.jpg' without providing a destination path:","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSelectFilePickerV2"],["callbackId","filepicker123"],["actionArgs","[\"\", 1000000]"]],"values":["testfile2.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-cn6pnzklps-b34rfrysf4","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            actionSheetMock.setupShowActionSheetWithOptions(FilePickerPluginService_1.FilePickerButtonEnums.PhotoLibrary);\r\n            whenContext = stepContext;\r\n            const response = { uri: `0/TempFiles/${whenContext.values[0]}`, fileSize: 2000 };\r\n            RNImagePickerMock_1.RNImagePickerMock.setupResponse(response);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a response with the relative URL, content type and size of the file just picked should be sent","status":"pass","exception":{},"rawTitle":"a response with the relative URL, content type and size of the file just picked should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-cn6pnzklps-cnc9ndnfa8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            paBinarySerialized = {\r\n                serializedType: \"PABinary-appRelativeFileV1\",\r\n                relativeUrl: `TempFiles/${whenContext.values[0]}`,\r\n                contentType: \"image/jpeg\",\r\n                size: 2000\r\n            };\r\n            responseObject.message.args[0].should.be.eql(paBinarySerialized);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-cn6pnzklps-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":1}],"title":"User launches the updated file picker on an iOS device with an action of launchSelectFilePickerV2 to select a photo from photo library, a serialized PABinary object should be sent back to the published app as the result","description":"","tags":[],"sequence":12,"id":"16b0xc4xrcw-cn6pnzklps"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':\n            | service    | SienaFilePickerPlugin  |\n            | action     | launchSaveFilePicker   |\n            | callbackId | filepicker456          |\n            | actionArgs | [\"/test/testfile.jpg\"] |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSaveFilePicker"],["callbackId","filepicker456"],["actionArgs","[\"/test/testfile.jpg\"]"]],"values":["https://testurl.com/testfile.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-lb3d87zkxh-cize031u7h","code":"() => {\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSaveFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSaveFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with the URL of the file just exported should be sent","status":"pass","exception":{},"rawTitle":"a response with the URL of the file just exported should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-lb3d87zkxh-mqpjw08dez","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-lb3d87zkxh-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to export a file.","description":"","tags":[],"sequence":13,"id":"16b0xc4xrcw-lb3d87zkxh"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':\n            | service    | SienaFilePickerPlugin |\n            | action     | launchSaveFilePicker  |\n            | callbackId | filepicker456         |\n            | actionArgs | [\"file:///rootpath/AppsSandboxedData/12345asdf394\"]       |\n            "}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':","status":"pass","exception":{},"rawTitle":"requesting to launch file picker to export a file to the following URL: 'https://testurl.com/testfile.jpg':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","launchSaveFilePicker"],["callbackId","filepicker456"],["actionArgs","[\"file:///rootpath/AppsSandboxedData/12345asdf394\"]"]],"values":["https://testurl.com/testfile.jpg"],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-jqnt05bllh-11cyiss8xrf","code":"() => {\r\n            whenContext = stepContext;\r\n            nativeResult = { status: 1, result: stepContext.values[0] };\r\n            launchSaveFilePickerStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.launchSaveFilePicker.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":6},{"title":"launchSaveFilePicker should be called with file:///rootpath/AppsSandboxedData/12345asdf394","status":"pass","exception":{},"rawTitle":"launchSaveFilePicker should be called with file:///rootpath/AppsSandboxedData/12345asdf394","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-jqnt05bllh-t9rh9qvhwg","code":"() => {\r\n            launchSaveFilePickerStub.calledWith(filePath).should.be.eql(true);\r\n        }","duration":0},{"title":"a response with the URL of the file just exported should be sent","status":"pass","exception":{},"rawTitle":"a response with the URL of the file just exported should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-jqnt05bllh-zmcx42vmx9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.args[0].should.be.eql(whenContext.values[0]);\r\n        })","duration":0},{"title":"the status of the response should be ok","status":"pass","exception":{},"rawTitle":"the status of the response should be ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"16b0xc4xrcw-jqnt05bllh-z9cqlfenxc","code":"() => {\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        }","duration":0}],"title":"user launches the file picker to export a file stored on the local file system.","description":"","tags":[],"sequence":14,"id":"16b0xc4xrcw-jqnt05bllh"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to open a file':\n            | service    | SienaFilePickerPlugin           |\n            | action     | openFile                        |\n            | callbackId | filepicker789                   |\n            | actionArgs | [\"/testdirectory/testfile.pdf\"] |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to open a file':","status":"pass","exception":{},"rawTitle":"requesting to open a file':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","openFile"],["callbackId","filepicker789"],["actionArgs","[\"/testdirectory/testfile.pdf\"]"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-mwmx336ecw-le9a9bzoej","code":"() => {\r\n            nativeResult = { status: 1, result: null };\r\n            platformMock = new Mocks.PlatformMock(\"android\");\r\n            platformMock.setupPlatformMock();\r\n            getFullFolderPathStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(\"/testdirectory/testfile.pdf\");\r\n            openFileStub = sinon.stub(react_native_power_apps_file_picker_1.RNPowerAppsFilePicker, react_native_power_apps_file_picker_1.RNPowerAppsFilePicker.openFile.name).returns(nativeResult);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":3},{"title":"a response with ok status should be sent","status":"pass","exception":{},"rawTitle":"a response with ok status should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-mwmx336ecw-yqfimfzw9h","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        })","duration":0},{"title":"open file should be called once","status":"pass","exception":{},"rawTitle":"open file should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-mwmx336ecw-km63chfg0b","code":"() => {\r\n            openFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"user opens a file given the file path on an Android device.","description":"","tags":[],"sequence":15,"id":"16b0xc4xrcw-mwmx336ecw"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to open a file':\n            | service    | SienaFilePickerPlugin           |\n            | action     | openFile                        |\n            | callbackId | filepicker789                   |\n            | actionArgs | [\"/testdirectory/testfile.pdf\"] |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to open a file':","status":"pass","exception":{},"rawTitle":"requesting to open a file':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","openFile"],["callbackId","filepicker789"],["actionArgs","[\"/testdirectory/testfile.pdf\"]"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-mwp7ykgtr4-le9a9bzoej","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(true, null);\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            getFullFolderPathStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(\"/testdirectory/testfile.pdf\");\r\n            deleteFileStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.deleteFileAsync.name);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with ok status should be sent","status":"pass","exception":{},"rawTitle":"a response with ok status should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-mwp7ykgtr4-yqfimfzw9h","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n        })","duration":0},{"title":"delete file should be called once","status":"pass","exception":{},"rawTitle":"delete file should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-mwp7ykgtr4-lr2x9fxi4g","code":"() => {\r\n            deleteFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":1}],"title":"user successfully opens a file given the file path on an iOS device.","description":"","tags":[],"sequence":16,"id":"16b0xc4xrcw-mwp7ykgtr4"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"requesting to open a file':\n            | service    | SienaFilePickerPlugin           |\n            | action     | openFile                        |\n            | callbackId | filepicker789                   |\n            | actionArgs | [\"/testdirectory/testfile.pdf\"] |\n            "}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting to open a file':","status":"pass","exception":{},"rawTitle":"requesting to open a file':","description":"","docString":"","dataTable":[["service","SienaFilePickerPlugin"],["action","openFile"],["callbackId","filepicker789"],["actionArgs","[\"/testdirectory/testfile.pdf\"]"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"16b0xc4xrcw-mwk6xvbyao-le9a9bzoej","code":"() => {\r\n            actionSheetMock = new Mocks.ActionSheetIOSMock(false, { message: \"An error occurred.\" });\r\n            actionSheetMock.setupActionSheetIOSMock();\r\n            getFullFolderPathStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(\"/testdirectory/testfile.pdf\");\r\n            deleteFileStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.deleteFileAsync.name);\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            filePickerService = new Services.FilePickerPluginService();\r\n            request = new Services.FilePickerRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response with error status should be sent","status":"pass","exception":{},"rawTitle":"a response with error status should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"16b0xc4xrcw-mwk6xvbyao-14xxc2c2y05","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            responseObject = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            responseObject.message.status.should.be.eql(ApiHost_1.ApiHost.Status.Error);\r\n        })","duration":0},{"title":"delete file should be called once","status":"pass","exception":{},"rawTitle":"delete file should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"16b0xc4xrcw-mwk6xvbyao-lr2x9fxi4g","code":"() => {\r\n            deleteFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"user fails to open a file given the file path on an iOS device.","description":"","tags":[],"sequence":17,"id":"16b0xc4xrcw-mwk6xvbyao"}],"title":"A service that interacts with the native file picker to select file for processing and export file to another location","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/FilePickerPluginService.Spec.js","id":"16b0xc4xrcw","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting the current location with the following message:","status":"pass","exception":{},"rawTitle":"requesting the current location with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","getLocation"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a59m78rvb4-bqb39mqcpf-b32ig6slkw","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response matching the current location should be sent","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a59m78rvb4-bqb39mqcpf-y79uthh9pn","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            actual = actual.message.args[0];\r\n            let expected = backgroundContext.given.tableAsEntity;\r\n            expected.timestamp = 0; // This always changes and is part of the actual instance\r\n            actual.should.be.eql(expected);\r\n        }","duration":0}],"title":"Application requests the current GEO location","description":"","tags":[],"sequence":1,"id":"a59m78rvb4-bqb39mqcpf"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting the current location with the following message:","status":"pass","exception":{},"rawTitle":"requesting the current location with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","getLocation"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a59m78rvb4-vlzs6f53xp-jmegjifnfv","code":"() => {\r\n            geoServiceProvider.disableLocationServices();\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"an error message with the following details is sent","status":"pass","exception":{},"rawTitle":"an error message with the following details is sent","description":"","docString":"","dataTable":[["args","[\"Location timed out..\"]"],["status","Error"]],"values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a59m78rvb4-vlzs6f53xp-w1e9k3a94t","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            const expected = stepContext.tableAsEntity;\r\n            actual.message.args.should.be.eql(expected.args);\r\n            actual.message.status.should.be.eql(Services.ApiHost.Status[expected.status]);\r\n        }","duration":0}],"title":"Application requests the current GEO location which times out","description":"","tags":[],"sequence":2,"id":"a59m78rvb4-vlzs6f53xp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting the current location with the following message:","status":"pass","exception":{},"rawTitle":"requesting the current location with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test-watcher"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a59m78rvb4-r6ckv0i2h7-b343u6kk3k","code":"() => {\r\n            geoServiceProvider.disableLocationServices();\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"an error message with the following details is sent","status":"pass","exception":{},"rawTitle":"an error message with the following details is sent","description":"","docString":"","dataTable":[["args","[\"Location timed out..\"]"],["status","Error"]],"values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"a59m78rvb4-r6ckv0i2h7-16xpgdlse8b","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            const expected = stepContext.tableAsEntity;\r\n            actual.message.args.should.be.eql(expected.args);\r\n            actual.message.status.should.be.eql(Services.ApiHost.Status[expected.status]);\r\n        }","duration":0}],"title":"Application has subscribed for updates to the current GEO location, which times out","description":"","tags":[],"sequence":3,"id":"a59m78rvb4-r6ckv0i2h7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test-watcher"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a59m78rvb4-16azckrtmlc-le99ckd62r","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the device moves its location to the following coordinates:","status":"pass","exception":{},"rawTitle":"the device moves its location to the following coordinates:","description":"","docString":"","dataTable":[["latitude","48.64170413836837"],["longitude","-123.13287606835365"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"a59m78rvb4-16azckrtmlc-3zmf8zmwz","code":"() => {\r\n            whenContext = stepContext;\r\n            // Start with the starting position\r\n            const coords = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(coords, stepContext.tableAsEntity);\r\n            // Force a location update\r\n            geoServiceProvider.setLocation(coords);\r\n        }","duration":1},{"title":"a message with the new coordinates should be sent","status":"pass","exception":{},"rawTitle":"a message with the new coordinates should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"a59m78rvb4-16azckrtmlc-cn69uonns0","code":"() => {\r\n            // Msg 0 was for location result\r\n            // Msg 1 was for location change result\r\n            updatedLocationMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            // Verify that we have the new coords\r\n            const actualResult = updatedLocationMessage.message.args[0];\r\n            actualResult.latitude.should.be.equal(whenContext.tableAsEntity.latitude);\r\n            actualResult.longitude.should.be.equal(whenContext.tableAsEntity.longitude);\r\n        }","duration":2},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"a59m78rvb4-16azckrtmlc-n81srfwhjf","code":"() => {\r\n            updatedLocationMessage.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Application has a location function for current GEO location which should be updated as the device changes location","description":"","tags":[],"sequence":4,"id":"a59m78rvb4-16azckrtmlc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting the current location with the following message:","status":"pass","exception":{},"rawTitle":"requesting the current location with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","getLocation"],["callbackId","test1"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"a59m78rvb4-h9uuzlc5d7-8z9tdc5w8t","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"requesting the current location again with the following message:","status":"pass","exception":{},"rawTitle":"requesting the current location again with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","getLocation"],["callbackId","test2"]],"values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"a59m78rvb4-h9uuzlc5d7-11cynuav38t","code":"() => {\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"a response matching the current location should be sent to callbackId 'test1'","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent to callbackId 'test1'","description":"","docString":"","values":["test1"],"ruleViolations":[],"type":"Then","sequence":3,"id":"a59m78rvb4-h9uuzlc5d7-11ewfn9hzl1","code":"() => {\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            const actual = actualMessage.message.args[0];\r\n            let expected = backgroundContext.given.tableAsEntity;\r\n            expected.timestamp = 0; // This always changes and is part of the actual instance\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":1},{"title":"a response matching the current location should be sent to callbackId 'test2'","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent to callbackId 'test2'","description":"","docString":"","values":["test2"],"ruleViolations":[],"type":"and","sequence":4,"id":"a59m78rvb4-h9uuzlc5d7-ggwzslwdvk","code":"() => {\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            const actual = actualMessage.message.args[0];\r\n            let expected = backgroundContext.given.tableAsEntity;\r\n            expected.timestamp = 0; // This always changes and is part of the actual instance\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":1}],"title":"Application has multiple location functions for current GEO location","description":"","tags":[],"sequence":5,"id":"a59m78rvb4-h9uuzlc5d7"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test-watcher1"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a59m78rvb4-16b66nqy3uo-qptui2apkt","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the application has registered for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test-watcher2"]],"values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"a59m78rvb4-16b66nqy3uo-8z9sz6z1t9","code":"() => {\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":0},{"title":"the device moves its location to the following coordinates:","status":"pass","exception":{},"rawTitle":"the device moves its location to the following coordinates:","description":"","docString":"","dataTable":[["latitude","48.64170413836837"],["longitude","-123.13287606835365"]],"values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"a59m78rvb4-16b66nqy3uo-b31iigthyo","code":"() => {\r\n            whenContext = stepContext;\r\n            // Start with the starting position\r\n            const coords = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(coords, stepContext.tableAsEntity);\r\n            spy.reset();\r\n            // Force a location update\r\n            geoServiceProvider.setLocation(coords);\r\n        }","duration":1},{"title":"a response matching the current location should be sent to callbackId 'test-watcher1'","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent to callbackId 'test-watcher1'","description":"","docString":"","values":["test-watcher1"],"ruleViolations":[],"type":"Then","sequence":4,"id":"a59m78rvb4-16b66nqy3uo-ggsy5tvojc","code":"() => {\r\n            // Msg 0 was for the initial addWatch\r\n            // Msg 1 was for second addWatch\r\n            // Msg 2 & 3 setting the new location x 2 (for both add watches)\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(0);\r\n            const actual = actualMessage.message.args[0];\r\n            // Start with the starting position\r\n            const expected = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(expected, whenContext.tableAsEntity);\r\n            expected.timestamp = 0; // This always changes and is part of the actual instance\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":0},{"title":"a response matching the current location should be sent to callbackId 'test-watcher2'","status":"pass","exception":{},"rawTitle":"a response matching the current location should be sent to callbackId 'test-watcher2'","description":"","docString":"","values":["test-watcher2"],"ruleViolations":[],"type":"and","sequence":5,"id":"a59m78rvb4-16b66nqy3uo-lg6yvbbx9n","code":"() => {\r\n            // Msg 0 was for the initial addWatch\r\n            // Msg 1 was for second addWatch\r\n            // Msg 2 & 3 setting the new location x 2 (for both add watches)\r\n            const actualMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            const actual = actualMessage.message.args[0];\r\n            // Start with the starting position\r\n            const expected = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(expected, whenContext.tableAsEntity);\r\n            expected.timestamp = 0; // This always changes and is part of the actual instance\r\n            actual.should.be.eql(expected);\r\n            actualMessage.message.callbackId.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"title":"Application has multiple location functions for current GEO location which should be updated as the device changes location","description":"","tags":[],"sequence":6,"id":"a59m78rvb4-16b66nqy3uo"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test-watcher"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a59m78rvb4-a5956buyao-le99ckd62r","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the device moves its location to the following coordinates:","status":"pass","exception":{},"rawTitle":"the device moves its location to the following coordinates:","description":"","docString":"","dataTable":[["latitude","48.64170413836837"],["longitude","-123.13287606835365"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"a59m78rvb4-a5956buyao-b31iigthyo","code":"() => {\r\n            whenContext = stepContext;\r\n            // Start with the starting position\r\n            const coords = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(coords, stepContext.tableAsEntity);\r\n            // Force a location update\r\n            geoServiceProvider.setLocation(coords);\r\n        }","duration":0},{"title":"a message with the new coordinates should be sent","status":"pass","exception":{},"rawTitle":"a message with the new coordinates should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"a59m78rvb4-a5956buyao-cn69uonns0","code":"() => {\r\n            // Msg 0 was for location result\r\n            // Msg 1 was for location change result\r\n            updatedLocationMessage = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            // Verify that we have the new coords\r\n            const actualResult = updatedLocationMessage.message.args[0];\r\n            actualResult.latitude.should.be.equal(whenContext.tableAsEntity.latitude);\r\n            actualResult.longitude.should.be.equal(whenContext.tableAsEntity.longitude);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"a59m78rvb4-a5956buyao-n81srfwhjf","code":"() => {\r\n            updatedLocationMessage.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":1}],"title":"Device registers for location updates","description":"","tags":[],"sequence":7,"id":"a59m78rvb4-a5956buyao"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","addWatch"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a59m78rvb4-yt0h6r5ggr-b33cb59vgg","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the application requests to unregister for location updates with the following message:","status":"pass","exception":{},"rawTitle":"the application requests to unregister for location updates with the following message:","description":"","docString":"","dataTable":[["service","Geolocation"],["action","clearWatch"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"a59m78rvb4-yt0h6r5ggr-b2zoa88k00","code":"() => {\r\n            request = new Services.GeoLocationRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the device moves its location to the following coordinates:","status":"pass","exception":{},"rawTitle":"the device moves its location to the following coordinates:","description":"","docString":"","dataTable":[["latitude","50.64170413836837"],["longitude","-223.13287606835365"]],"values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"a59m78rvb4-yt0h6r5ggr-5fk6aii5pp","code":"() => {\r\n            // Start with the starting position\r\n            const coords = backgroundContext.given.tableAsEntity;\r\n            // Then override with new location\r\n            Object.assign(coords, stepContext.tableAsEntity);\r\n            // Force a location update\r\n            geoServiceProvider.setLocation(coords);\r\n        }","duration":0},{"title":"the application should not receive any further GEO location updates","status":"pass","exception":{},"rawTitle":"the application should not receive any further GEO location updates","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"a59m78rvb4-yt0h6r5ggr-a52x0lk5z4","code":"() => {\r\n            // messages:\r\n            // addWatch       = 1\r\n            // locationResult = 2\r\n            // clearWatch     = 3\r\n            // no more messages\r\n            spy.sentMessages.length.should.be.equal(3);\r\n        }","duration":1}],"title":"Application doesn't require location details anymore","description":"","tags":[],"sequence":8,"id":"a59m78rvb4-yt0h6r5ggr"}],"title":"Retrieving GEO location details","description":"Published Apps support the ability to define a location function, which provide the exact location of the device\n\nRules:\n* Obtain the current GEO location of the device\n* Continue to receive updates of the GEO location as the device changes location\n* Cancel receiving location updates","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/GeoLocationPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the current location of the device is:","status":"pass","exception":{},"rawTitle":"the current location of the device is:","description":"","docString":"","dataTable":[["accuracy","200"],["latitude","47.64170413836837"],["longitude","-122.13287606835365"],["altitude","0"],["altitudeAccuracy","null"],["heading","null"],["speed","0"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"a59m78rvb4-9pbsb4-5fjz8nl9gj","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            // ensure any settings are reset for each scenario\r\n            geoServiceProvider = new Mocks.GeoLocationPluginMockProvider();\r\n            geoService = new Services.GeoLocationPluginService(geoServiceProvider);\r\n            const coords = stepContext.tableAsEntity;\r\n            geoServiceProvider.setLocation(coords);\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"a59m78rvb4-9pbsb4"},"id":"a59m78rvb4","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":17,"failedCount":0,"pendingCount":0,"totalCount":17,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"requesting keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pgyc76jnhc-he8qn2d177-3np7ahe2zf","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a response matching with an arg of 'OK' is sent","status":"pass","exception":{},"rawTitle":"a response matching with an arg of 'OK' is sent","description":"","docString":"","values":["OK"],"ruleViolations":[],"type":"Then","sequence":2,"id":"pgyc76jnhc-he8qn2d177-cnby974fs0","code":"() => {\r\n            let actual = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            actual = actual.message.args[0];\r\n            actual.should.be.eql(stepContext.values[0]);\r\n        }","duration":0}],"title":"Application requests keyboard notifications","description":"","tags":[],"sequence":1,"id":"pgyc76jnhc-he8qn2d177"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pgyc76jnhc-q5zmj01q3k-b378s5vvgg","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the keyboard is disappears","status":"pass","exception":{},"rawTitle":"the keyboard is disappears","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"pgyc76jnhc-q5zmj01q3k-a56vsppwhk","code":"() => {\r\n            // isolate messages to just the one that is a result of this action\r\n            spy.reset();\r\n            // Simulate keyboard being shown\r\n            keyboardProvider.simulateShowKeyboard();\r\n        }","duration":0},{"title":"a message with the keyboard height of 282 is not sent","status":"pass","exception":{},"rawTitle":"a message with the keyboard height of 282 is not sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"pgyc76jnhc-q5zmj01q3k-180z9i3bm77","code":"() => {\r\n            actualResult = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            should.not.exist(actualResult);\r\n        }","duration":1}],"title":"User clicks on an input control that results in the keyboard appearing","description":"","tags":[],"sequence":2,"id":"pgyc76jnhc-q5zmj01q3k"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pgyc76jnhc-fc72i4e0gt-b378s5vvgg","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the keyboard is displayed","status":"pass","exception":{},"rawTitle":"the keyboard is displayed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"pgyc76jnhc-fc72i4e0gt-kq82w9cxsr","code":"() => {\r\n            // isolate messages to just the one that is a result of this action\r\n            spy.reset();\r\n            // Simulate keyboard being hidden\r\n            keyboardProvider.simulateHideKeyboard();\r\n        }","duration":0},{"title":"a message indicating the keyboard is hidden is not sent","status":"pass","exception":{},"rawTitle":"a message indicating the keyboard is hidden is not sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"pgyc76jnhc-fc72i4e0gt-cn92uoljvk","code":"() => {\r\n            actualResult = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            should.not.exist(actualResult);\r\n        }","duration":0}],"title":"User clicks away from an input control that results in the keyboard disappearing","description":"","tags":[],"sequence":3,"id":"pgyc76jnhc-fc72i4e0gt"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pgyc76jnhc-10k39c03i6l-b378s5vvgg","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the application is closed","status":"pass","exception":{},"rawTitle":"the application is closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"pgyc76jnhc-10k39c03i6l-86ee6isu0t","code":"() => {\r\n            // isolate messages to just the one that is a result of this action\r\n            spy.reset();\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n        }","duration":1},{"title":"the plugin should unregister keyboard notifications","status":"pass","exception":{},"rawTitle":"the plugin should unregister keyboard notifications","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"pgyc76jnhc-10k39c03i6l-z4srk0fwn7","code":"() => {\r\n            keyboardProvider.hasBeenRegistered.should.be.equal(false);\r\n        }","duration":0}],"title":"The application is closed","description":"","tags":[],"sequence":4,"id":"pgyc76jnhc-10k39c03i6l"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the application has registered for keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"the application has registered for keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pgyc76jnhc-4d5g6b8k99-b378s5vvgg","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the application is then closed","status":"pass","exception":{},"rawTitle":"the application is then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"pgyc76jnhc-4d5g6b8k99-f0aa80chs5","code":"() => {\r\n            // isolate messages to just the one that is a result of this action\r\n            spy.reset();\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n        }","duration":1},{"title":"another application registers for keyboard notifications with the following message:","status":"pass","exception":{},"rawTitle":"another application registers for keyboard notifications with the following message:","description":"","docString":"","dataTable":[["service","Keyboard"],["action","init"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"pgyc76jnhc-4d5g6b8k99-b2yy6kyudc","code":"() => {\r\n            request = new Services.KeyboardRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":0},{"title":"the keyboard is shown","status":"pass","exception":{},"rawTitle":"the keyboard is shown","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pgyc76jnhc-4d5g6b8k99-16b7ixlh7wg","code":"() => {\r\n            spy.reset();\r\n            keyboardProvider.simulateShowKeyboard();\r\n        }","duration":0},{"title":"a message indicating the keyboard is shown is not sent","status":"pass","exception":{},"rawTitle":"a message indicating the keyboard is shown is not sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"pgyc76jnhc-4d5g6b8k99-cnb0gsqpkw","code":"() => {\r\n            actualResult = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            should.not.exist(actualResult);\r\n        }","duration":0}],"title":"The application is closed and another is opened","description":"","tags":[],"sequence":5,"id":"pgyc76jnhc-4d5g6b8k99"}],"title":"Allow published apps to respond to changes in keyboard visibility","description":"When an input box receives focus within a published app the published app needs to know if the keyboard becomes visible and\nif so what the height of the keyboard is so that it can move the input box above the visible keyboard.\n\nRules:\n* Allow published apps to register for keyboard visibility events\n* Notify published apps when a keyboard visibility event occurs after registering","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/KeyboardPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the published app has not registered for keyboard events","status":"pass","exception":{},"rawTitle":"the published app has not registered for keyboard events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pgyc76jnhc-9pbsb4-a59fc6x2xs","code":"() => {\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            keyboardService = new Services.KeyboardPluginService(keyboardProvider);\r\n            keyboardProvider.unregister();\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"pgyc76jnhc-9pbsb4"},"id":"pgyc76jnhc","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":4,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the microphone has not been initialized"}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the microphone has not been initialized","status":"pass","exception":{},"rawTitle":"the microphone has not been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"33vh8hmygz-4d89ukyznp-jkjq1czm8w","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            microphoneService = new Services.MicrophonePluginService(microphoneProvider);\r\n            microphoneProvider.isInitialized.should.be.equal(false);\r\n        }","duration":1},{"title":"the microphone is initialized with the following message","status":"pass","exception":{},"rawTitle":"the microphone is initialized with the following message","description":"","docString":"","dataTable":[["service","SienaMicPlugin"],["action","initializeMicrophone"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"33vh8hmygz-4d89ukyznp-10jtrxlrd3x","code":"() => {\r\n            // Assign the message attributes\r\n            request = new Services.SienaMicPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the microphone should be initialized","status":"pass","exception":{},"rawTitle":"the microphone should be initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"33vh8hmygz-4d89ukyznp-jkpjh5kcog","code":"() => {\r\n            microphoneProvider.isInitialized.should.be.equal(true);\r\n        }","duration":0},{"title":"recording has not started","status":"pass","exception":{},"rawTitle":"recording has not started","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"33vh8hmygz-4d89ukyznp-6ejfvoom1v","code":"() => {\r\n            microphoneProvider.isRecording.should.be.equal(false);\r\n        }","duration":0}],"title":"Configure microphone","description":"","tags":[],"sequence":1,"id":"33vh8hmygz-4d89ukyznp"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the microphone has been initialized"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the microphone has been initialized","status":"pass","exception":{},"rawTitle":"the microphone has been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"33vh8hmygz-dkc2lrkbar-12z50j2dj1","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            microphoneProvider.initializeMicrophone();\r\n            microphoneService = new Services.MicrophonePluginService(microphoneProvider);\r\n            microphoneProvider.isInitialized.should.be.equal(true);\r\n        }","duration":1},{"title":"starting to record on the microphone with the following message","status":"pass","exception":{},"rawTitle":"starting to record on the microphone with the following message","description":"","docString":"","dataTable":[["service","SienaMicPlugin"],["action","startMicrophone"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"33vh8hmygz-dkc2lrkbar-qptvbamhwt","code":"() => {\r\n            // Assign the message attributes\r\n            request = new Services.SienaMicPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the microphone should be recording","status":"pass","exception":{},"rawTitle":"the microphone should be recording","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"33vh8hmygz-dkc2lrkbar-pzbqcca8mr","code":"() => {\r\n            microphoneProvider.isRecording.should.be.equal(true);\r\n        }","duration":0}],"title":"Start recording","description":"","tags":[],"sequence":2,"id":"33vh8hmygz-dkc2lrkbar"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the microphone has been initialized"}],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the microphone has been initialized","status":"pass","exception":{},"rawTitle":"the microphone has been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"33vh8hmygz-pzboyu47sz-12z50j2dj1","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            microphoneProvider.initializeMicrophone();\r\n            microphoneService = new Services.MicrophonePluginService(microphoneProvider);\r\n            microphoneProvider.isInitialized.should.be.equal(true);\r\n        }","duration":0},{"title":"is recording","status":"pass","exception":{},"rawTitle":"is recording","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"33vh8hmygz-pzboyu47sz-q5yj0onzhc","code":"() => {\r\n            microphoneProvider.startMicrophone();\r\n        }","duration":0},{"title":"stopping to record with the following message","status":"pass","exception":{},"rawTitle":"stopping to record with the following message","description":"","docString":"","dataTable":[["service","SienaMicPlugin"],["action","stopMicrophone"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"33vh8hmygz-pzboyu47sz-b2zm6bj0ps","code":"() => {\r\n            // Assign the message attributes\r\n            request = new Services.SienaMicPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the microphone should stop recording","status":"pass","exception":{},"rawTitle":"the microphone should stop recording","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"33vh8hmygz-pzboyu47sz-ar9ogg50pn","code":"() => {\r\n            microphoneProvider.isRecording.should.be.equal(false);\r\n        }","duration":0}],"title":"Stop recording","description":"","tags":[],"sequence":3,"id":"33vh8hmygz-pzboyu47sz"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"the microphone has been initialized"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the microphone has been initialized","status":"pass","exception":{},"rawTitle":"the microphone has been initialized","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"33vh8hmygz-me100g1et9-12z50j2dj1","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            microphoneProvider.initializeMicrophone();\r\n            microphoneService = new Services.MicrophonePluginService(microphoneProvider);\r\n            microphoneProvider.isInitialized.should.be.equal(true);\r\n        }","duration":0},{"title":"disposing the disposeMicrophone with the following message","status":"pass","exception":{},"rawTitle":"disposing the disposeMicrophone with the following message","description":"","docString":"","dataTable":[["service","SienaMicPlugin"],["action","disposeMicrophone"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"33vh8hmygz-me100g1et9-cizfbxt84d","code":"() => {\r\n            // Assign the message attributes\r\n            request = new Services.SienaMicPluginRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the microphone should be disposed","status":"pass","exception":{},"rawTitle":"the microphone should be disposed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"33vh8hmygz-me100g1et9-jkqxk2eww0","code":"() => {\r\n            microphoneProvider.isInitialized.should.be.equal(false);\r\n        }","duration":0}],"title":"Disposing of microphone","description":"","tags":[],"sequence":4,"id":"33vh8hmygz-me100g1et9"}],"title":"Allow the ability to record audio","description":"Published Apps support the ability to add a microphone control that will provide the ability to record audio to a file (temp).\n\nRules:\n* Start recording\n* Stop recording\n* Dispose of microphone resources\n\nDesign:\n* Android has restrictions on mixed content to the extent that its not possible to load a file:// when the pages originates from the web.\n  To overcome this limitation a pseudo scheme was introduced http://temp which maps to the physical location of the apps cache directory.\n  This allows native code to write the the cache dir and have the installed app reference the local cache via http://temp/. The cache dir was added\n  as part of the app sandbox.\n* This design relies on mostly native code to achieve its goals, as such these tests do not cover this. Integration tests should cover this in the future.","tags":["platform:android"],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/MicrophonePluginService.Spec.js","id":"33vh8hmygz","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":57,"failedCount":0,"pendingCount":0,"totalCount":57,"totalRuleViolations":0,"duration":22,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the device is online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"that the device is <Connection Status> and the network type is <Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-14bze2c2jer-jkhn326udp","code":"() => {\r\n            deviceInfoProvider.setDeviceConnectivity(connectionStatusMapping[scenarioOutlineContext.example.ConnectionStatus]);\r\n            deviceInfoProvider.setNetworkType(scenarioOutlineContext.example.NetworkType);\r\n        }","duration":1},{"title":"requesting connection information with the following message:","status":"pass","exception":{},"rawTitle":"requesting connection information with the following message:","description":"","docString":"","dataTable":[["service","NetworkStatus"],["action","getConnectionInfo"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-14bze2c2jer-zua94g47bp","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a message with the network type of wifi should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-14bze2c2jer-12pesfghm03","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":1},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-14bze2c2jer-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["Connection Status","Network Type","Expected Network Type"],["online","WIFI","wifi"],["offline","WIFI","none"],["online","MOBILE","cellular"],["offline","MOBILE","none"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the device is online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"that the device is <Connection Status> and the network type is <Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-14bze2c2jer-jkhn326udp","code":"() => {\r\n            deviceInfoProvider.setDeviceConnectivity(connectionStatusMapping[scenarioOutlineContext.example.ConnectionStatus]);\r\n            deviceInfoProvider.setNetworkType(scenarioOutlineContext.example.NetworkType);\r\n        }","duration":1},{"title":"requesting connection information with the following message:","status":"pass","exception":{},"rawTitle":"requesting connection information with the following message:","description":"","docString":"","dataTable":[["service","NetworkStatus"],["action","getConnectionInfo"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-14bze2c2jer-zua94g47bp","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a message with the network type of wifi should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-14bze2c2jer-12pesfghm03","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":1},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-14bze2c2jer-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"ConnectionStatus":"online","NetworkType":"WIFI","ExpectedNetworkType":"wifi"},"title":"Published app requests connection information","sequence":1,"id":"s1dlbt11az-14bze2c2jer"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the device is offline and the network type is WIFI","status":"pass","exception":{},"rawTitle":"that the device is <Connection Status> and the network type is <Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-14bze2c2jer-175ayytssp7","code":"() => {\r\n            deviceInfoProvider.setDeviceConnectivity(connectionStatusMapping[scenarioOutlineContext.example.ConnectionStatus]);\r\n            deviceInfoProvider.setNetworkType(scenarioOutlineContext.example.NetworkType);\r\n        }","duration":0},{"title":"requesting connection information with the following message:","status":"pass","exception":{},"rawTitle":"requesting connection information with the following message:","description":"","docString":"","dataTable":[["service","NetworkStatus"],["action","getConnectionInfo"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-14bze2c2jer-zua94g47bp","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":0},{"title":"a message with the network type of none should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-14bze2c2jer-cn68ewrus0","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-14bze2c2jer-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"ConnectionStatus":"offline","NetworkType":"WIFI","ExpectedNetworkType":"none"},"title":"Published app requests connection information","sequence":2,"id":"s1dlbt11az-14bze2c2jer"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the device is online and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"that the device is <Connection Status> and the network type is <Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-14bze2c2jer-uo3td20bfh","code":"() => {\r\n            deviceInfoProvider.setDeviceConnectivity(connectionStatusMapping[scenarioOutlineContext.example.ConnectionStatus]);\r\n            deviceInfoProvider.setNetworkType(scenarioOutlineContext.example.NetworkType);\r\n        }","duration":0},{"title":"requesting connection information with the following message:","status":"pass","exception":{},"rawTitle":"requesting connection information with the following message:","description":"","docString":"","dataTable":[["service","NetworkStatus"],["action","getConnectionInfo"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-14bze2c2jer-zua94g47bp","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a message with the network type of cellular should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-14bze2c2jer-cn983z9ka8","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":1},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-14bze2c2jer-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"ConnectionStatus":"online","NetworkType":"MOBILE","ExpectedNetworkType":"cellular"},"title":"Published app requests connection information","sequence":3,"id":"s1dlbt11az-14bze2c2jer"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the device is offline and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"that the device is <Connection Status> and the network type is <Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-14bze2c2jer-5q6yvkdmfv","code":"() => {\r\n            deviceInfoProvider.setDeviceConnectivity(connectionStatusMapping[scenarioOutlineContext.example.ConnectionStatus]);\r\n            deviceInfoProvider.setNetworkType(scenarioOutlineContext.example.NetworkType);\r\n        }","duration":0},{"title":"requesting connection information with the following message:","status":"pass","exception":{},"rawTitle":"requesting connection information with the following message:","description":"","docString":"","dataTable":[["service","NetworkStatus"],["action","getConnectionInfo"],["callbackId","test"]],"values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-14bze2c2jer-zua94g47bp","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            Object.assign(request, stepContext.tableAsEntity);\r\n            bus.send(request);\r\n        }","duration":1},{"title":"a message with the network type of none should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-14bze2c2jer-cn68ewrus0","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).firstMessage;\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":1},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-14bze2c2jer-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"ConnectionStatus":"offline","NetworkType":"MOBILE","ExpectedNetworkType":"none"},"title":"Published app requests connection information","sequence":4,"id":"s1dlbt11az-14bze2c2jer"}],"title":"Published app requests connection information","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app is running and has requested the connection information","status":"pass","exception":{},"rawTitle":"that the published app is running and has requested the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-kov05845kd-1b5se7w9hx","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-kov05845kd-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"a message with the network type of wifi should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-kov05845kd-12pesfghm03","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"the callback id should be the same as the one sent for the connection information","status":"pass","exception":{},"rawTitle":"the callback id should be the same as the one sent for the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-kov05845kd-6mq9cdhfgl","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":5,"id":"s1dlbt11az-kov05845kd-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["New Connection Status","New Network Type","Expected Network Type"],["online","WIFI","wifi"],["offline","WIFI","none"],["online","MOBILE","cellular"],["offline","MOBILE","none"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app is running and has requested the connection information","status":"pass","exception":{},"rawTitle":"that the published app is running and has requested the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-kov05845kd-1b5se7w9hx","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-kov05845kd-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"a message with the network type of wifi should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-kov05845kd-12pesfghm03","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"the callback id should be the same as the one sent for the connection information","status":"pass","exception":{},"rawTitle":"the callback id should be the same as the one sent for the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-kov05845kd-6mq9cdhfgl","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":5,"id":"s1dlbt11az-kov05845kd-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"online","NewNetworkType":"WIFI","ExpectedNetworkType":"wifi"},"title":"Connection information changes while published app is running","sequence":1,"id":"s1dlbt11az-kov05845kd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app is running and has requested the connection information","status":"pass","exception":{},"rawTitle":"that the published app is running and has requested the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-kov05845kd-1b5se7w9hx","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the connection information changes to offline and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-kov05845kd-101vxbxjyjh","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"a message with the network type of none should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-kov05845kd-cn68ewrus0","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"the callback id should be the same as the one sent for the connection information","status":"pass","exception":{},"rawTitle":"the callback id should be the same as the one sent for the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-kov05845kd-6mq9cdhfgl","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":5,"id":"s1dlbt11az-kov05845kd-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"WIFI","ExpectedNetworkType":"none"},"title":"Connection information changes while published app is running","sequence":2,"id":"s1dlbt11az-kov05845kd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app is running and has requested the connection information","status":"pass","exception":{},"rawTitle":"that the published app is running and has requested the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-kov05845kd-1b5se7w9hx","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n        }","duration":0},{"title":"the connection information changes to online and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-kov05845kd-779kmyuye8","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"a message with the network type of cellular should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-kov05845kd-cn983z9ka8","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"the callback id should be the same as the one sent for the connection information","status":"pass","exception":{},"rawTitle":"the callback id should be the same as the one sent for the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-kov05845kd-6mq9cdhfgl","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":5,"id":"s1dlbt11az-kov05845kd-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"online","NewNetworkType":"MOBILE","ExpectedNetworkType":"cellular"},"title":"Connection information changes while published app is running","sequence":3,"id":"s1dlbt11az-kov05845kd"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app is running and has requested the connection information","status":"pass","exception":{},"rawTitle":"that the published app is running and has requested the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-kov05845kd-1b5se7w9hx","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the connection information changes to offline and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-kov05845kd-nkojkq6e45","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"a message with the network type of none should be sent","status":"pass","exception":{},"rawTitle":"a message with the network type of <Expected Network Type> should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-kov05845kd-cn68ewrus0","code":"() => {\r\n            result = spy.messageType(Services.CordovaPluginResult).messages(1);\r\n            result.message.args[0].should.be.eql(scenarioOutlineContext.example.ExpectedNetworkType);\r\n        }","duration":0},{"title":"the callback id should be the same as the one sent for the connection information","status":"pass","exception":{},"rawTitle":"the callback id should be the same as the one sent for the connection information","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"s1dlbt11az-kov05845kd-6mq9cdhfgl","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"keepCallback should be 'true'","status":"pass","exception":{},"rawTitle":"keepCallback should be 'true'","description":"","docString":"","values":[true],"ruleViolations":[],"type":"and","sequence":5,"id":"s1dlbt11az-kov05845kd-n81srfwhjf","code":"() => {\r\n            result.message.keepCallback.should.be.equal(stepContext.values[0]);\r\n        }","duration":1}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"MOBILE","ExpectedNetworkType":"none"},"title":"Connection information changes while published app is running","sequence":4,"id":"s1dlbt11az-kov05845kd"}],"title":"Connection information changes while published app is running","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dlbt11az-q5z6adhzfk-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dlbt11az-q5z6adhzfk-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["New Connection Status","New Network Type"],["online","WIFI"],["offline","WIFI"],["online","MOBILE"],["offline","MOBILE"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dlbt11az-q5z6adhzfk-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dlbt11az-q5z6adhzfk-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"online","NewNetworkType":"WIFI"},"title":"Connection information changes while no published app is running","sequence":1,"id":"s1dlbt11az-q5z6adhzfk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information changes to offline and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dlbt11az-q5z6adhzfk-101vxbxjyjh","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dlbt11az-q5z6adhzfk-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"WIFI"},"title":"Connection information changes while no published app is running","sequence":2,"id":"s1dlbt11az-q5z6adhzfk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information changes to online and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dlbt11az-q5z6adhzfk-779kmyuye8","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":1},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dlbt11az-q5z6adhzfk-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"online","NewNetworkType":"MOBILE"},"title":"Connection information changes while no published app is running","sequence":3,"id":"s1dlbt11az-q5z6adhzfk"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the connection information changes to offline and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <New Connection Status> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"s1dlbt11az-q5z6adhzfk-nkojkq6e45","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"s1dlbt11az-q5z6adhzfk-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"MOBILE"},"title":"Connection information changes while no published app is running","sequence":4,"id":"s1dlbt11az-q5z6adhzfk"}],"title":"Connection information changes while no published app is running","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app was opened and requested the connection information and then closed","status":"pass","exception":{},"rawTitle":"that the published app was opened and requested the connection information and then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-122er9n78dh-bq3zdjizph","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n            spy.reset();\r\n        }","duration":1},{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <NewConnectionStatus> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-122er9n78dh-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-122er9n78dh-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["New Connection Status","New Network Type"],["online","WIFI"],["offline","WIFI"],["online","MOBILE"],["offline","MOBILE"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app was opened and requested the connection information and then closed","status":"pass","exception":{},"rawTitle":"that the published app was opened and requested the connection information and then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-122er9n78dh-bq3zdjizph","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n            spy.reset();\r\n        }","duration":1},{"title":"the connection information changes to online and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <NewConnectionStatus> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-122er9n78dh-dck6wmo6io","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-122er9n78dh-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":1}],"example":{"NewConnectionStatus":"online","NewNetworkType":"WIFI"},"title":"Connection information changes after a published app is closed","sequence":1,"id":"s1dlbt11az-122er9n78dh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app was opened and requested the connection information and then closed","status":"pass","exception":{},"rawTitle":"that the published app was opened and requested the connection information and then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-122er9n78dh-bq3zdjizph","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n            spy.reset();\r\n        }","duration":1},{"title":"the connection information changes to offline and the network type is WIFI","status":"pass","exception":{},"rawTitle":"the connection information changes to <NewConnectionStatus> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-122er9n78dh-101vxbxjyjh","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-122er9n78dh-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"WIFI"},"title":"Connection information changes after a published app is closed","sequence":2,"id":"s1dlbt11az-122er9n78dh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app was opened and requested the connection information and then closed","status":"pass","exception":{},"rawTitle":"that the published app was opened and requested the connection information and then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-122er9n78dh-bq3zdjizph","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n            spy.reset();\r\n        }","duration":1},{"title":"the connection information changes to online and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <NewConnectionStatus> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-122er9n78dh-779kmyuye8","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-122er9n78dh-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"online","NewNetworkType":"MOBILE"},"title":"Connection information changes after a published app is closed","sequence":3,"id":"s1dlbt11az-122er9n78dh"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"that the published app was opened and requested the connection information and then closed","status":"pass","exception":{},"rawTitle":"that the published app was opened and requested the connection information and then closed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-122er9n78dh-bq3zdjizph","code":"() => {\r\n            request = new Services.NetworkStatusRequest();\r\n            request.service = \"NetworkStatus\";\r\n            request.callbackId = \"test\";\r\n            request.action = \"getConnectionInfo\";\r\n            bus.send(request);\r\n            // Simulate application closing\r\n            bus.publish(new Services.PublishedAppClosedEvent());\r\n            spy.reset();\r\n        }","duration":2},{"title":"the connection information changes to offline and the network type is MOBILE","status":"pass","exception":{},"rawTitle":"the connection information changes to <NewConnectionStatus> and the network type is <New Network Type>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"s1dlbt11az-122er9n78dh-nkojkq6e45","code":"() => {\r\n            deviceInfoProvider.runNetworkConnectivityChangeListener(connectionStatusMapping[scenarioOutlineContext.example.NewConnectionStatus], scenarioOutlineContext.example.NewNetworkType);\r\n        }","duration":0},{"title":"no messages should be sent","status":"pass","exception":{},"rawTitle":"no messages should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"s1dlbt11az-122er9n78dh-tu4y23nvqd","code":"() => {\r\n            spy.sentMessages.length.should.be.eql(0);\r\n        }","duration":0}],"example":{"NewConnectionStatus":"offline","NewNetworkType":"MOBILE"},"title":"Connection information changes after a published app is closed","sequence":4,"id":"s1dlbt11az-122er9n78dh"}],"title":"Connection information changes after a published app is closed","description":"","tags":[]}],"title":"Retrieving network details","description":"Published Apps have the ability to get the connection information from the device\n\nRules:\n* Get network type (cellular, wifi, none)\n* Listen for changes in the network type","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/NetworkStatusPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"PowerApps is running on the device","status":"pass","exception":{},"rawTitle":"PowerApps is running on the device","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"s1dlbt11az-9pbsb4-av703qsd6j","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            deviceInfoProvider = new Mocks_1.MockDeviceInfoProvider();\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(deviceInfoProvider);\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            bus.registerHandler(Services.NetworkStatusPluginService);\r\n        }","duration":1}],"title":"","description":"","tags":[],"id":"s1dlbt11az-9pbsb4"},"id":"s1dlbt11az","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":25,"failedCount":0,"pendingCount":0,"totalCount":25,"totalRuleViolations":0,"duration":70,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":60,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":3},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["actionName","actionArgs","expectTargetCalledWith","stubTargetReturnValue","expectedPluginResultValue"],["getPowerAppsCurrentUser","[]","[]","null","null"],["getPowerAppsCurrentUser","[]","[]","{}","{}"],["getPowerAppsCurrentUser","[]","[]","{\"fullName\": \"fullNameValue\", \"email\": \"emailValue\", \"imageUrl\": \"https://tempuri.org/imageUrl\"}","{\"fullName\": \"fullNameValue\", \"email\": \"emailValue\", \"imageUrl\": \"https://tempuri.org/imageUrl\"}"],["getPowerAppsCurrentUser","[]","[]","{\"fullName\": \"fullNameValue\"}","{\"fullName\": \"fullNameValue\"}"],["getPowerAppsCurrentUser","[]","[]","{\"email\": \"emailValue\"}","{\"email\": \"emailValue\"}"],["getPowerAppsCurrentUser","[]","[]","{\"imageUrl\": \"https://tempuri.org/imageUrl\"}","{\"imageUrl\": \"https://tempuri.org/imageUrl\"}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":3},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be null","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-bwl9ooimcb","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":1}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":null,"expectedPluginResultValue":null},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":10},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{},"expectedPluginResultValue":{}},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":18,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":18},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"fullName":"fullNameValue","email":"emailValue","imageUrl":"https://tempuri.org/imageUrl"},"expectedPluginResultValue":{"fullName":"fullNameValue","email":"emailValue","imageUrl":"https://tempuri.org/imageUrl"}},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":15},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"fullName":"fullNameValue"},"expectedPluginResultValue":{"fullName":"fullNameValue"}},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":6},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":1}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"email":"emailValue"},"expectedPluginResultValue":{"email":"emailValue"}},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":5,"id":"pxqm8i7ivp-16880mpd5mj"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"executing getPowerAppsCurrentUser with args []","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"pxqm8i7ivp-16880mpd5mj-9szn4texkt","code":"() => {\r\n            appAuthenticationServiceMethodStub = sinon.stub(AppMagic.Runtime.App.Host.AppAuthenticationService.prototype, \"tryGetCurrentUserAsync\");\r\n            const stubTargetReturnValue = scenarioOutlineContext.example.stubTargetReturnValue;\r\n            DebugContracts.assertObjectOrNull(stubTargetReturnValue);\r\n            appAuthenticationServiceMethodStub.returns(Promise.resolve(stubTargetReturnValue));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":6},{"title":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to AppAuthenticationService.tryGetCurrentUserAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"pxqm8i7ivp-16880mpd5mj-he8vmxkm31","code":"() => {\r\n            appAuthenticationServiceMethodStub.callCount.should.be.eql(1);\r\n            appAuthenticationServiceMethodStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectTargetCalledWith);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"pxqm8i7ivp-16880mpd5mj-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be [object Object]","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginResultValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"pxqm8i7ivp-16880mpd5mj-814o665tfn","code":"() => {\r\n            const expectedPluginResultValue = scenarioOutlineContext.example.expectedPluginResultValue;\r\n            successfulPluginResult.args.should.be.eql([expectedPluginResultValue]);\r\n        }","duration":0}],"example":{"actionName":"getPowerAppsCurrentUser","actionArgs":[],"expectTargetCalledWith":[],"stubTargetReturnValue":{"imageUrl":"https://tempuri.org/imageUrl"},"expectedPluginResultValue":{"imageUrl":"https://tempuri.org/imageUrl"}},"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","sequence":6,"id":"pxqm8i7ivp-16880mpd5mj"}],"title":"Plugin request should get routed to the AppAuthenticationService with correct conversions of arguments and results","description":"","tags":[]}],"title":"Retrieving details from the runtime PowerAppsService","description":"Published apps that require to get data that can be obtained via the runtime PowerAppsService\n\nRules:\n* Get the currently logged in PowerApps user","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PowerAppsServicePluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the PowerAppsServicePluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the PowerAppsServicePluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"pxqm8i7ivp-9pbsb4-a5auq918v4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.PowerAppsServicePluginService);\r\n            request = new Services.PowerAppsServiceRequest();\r\n            request.service = \"PowerAppsServicePlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":10}],"title":"","description":"","tags":[],"id":"pxqm8i7ivp-9pbsb4"},"id":"pxqm8i7ivp","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":36,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"we mock the behavior of the getStore function","status":"pass","exception":{},"rawTitle":"we mock the behavior of the getStore function","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rul5ke1b4-17rqm20nzfn-16b2bmlc6ww","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":0},{"title":"the app is exited","status":"pass","exception":{},"rawTitle":"the app is exited","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"2rul5ke1b4-17rqm20nzfn-hhom169vpx","code":"() => {\r\n            request.action = \"exitAppAsync\";\r\n            bus.send(request);\r\n        }","duration":0},{"title":"the ExitApp action is dispatched","status":"pass","exception":{},"rawTitle":"the ExitApp action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rul5ke1b4-17rqm20nzfn-11cv7sk6ao3","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(Actions_1.exitApp);\r\n        }","duration":1},{"title":"no further actions are performed","status":"pass","exception":{},"rawTitle":"no further actions are performed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rul5ke1b4-17rqm20nzfn-jkq5253wn4","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(1);\r\n        }","duration":0}],"title":"Exiting an app","description":"","tags":[],"sequence":1,"id":"2rul5ke1b4-17rqm20nzfn"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"we mock the behavior of the getStore function","status":"pass","exception":{},"rawTitle":"we mock the behavior of the getStore function","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rul5ke1b4-qafbtd3eu5-16b2bmlc6ww","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":4},{"title":"the 'exitAppAsync' function is called with an argument 'true'","status":"pass","exception":{},"rawTitle":"the 'exitAppAsync' function is called with an argument 'true'","description":"","docString":"","values":["exitAppAsync",true],"ruleViolations":[],"type":"When","sequence":2,"id":"2rul5ke1b4-qafbtd3eu5-ggv47t2sbk","code":"() => {\r\n            request.action = stepContext.values[0];\r\n            request.actionArgs = [stepContext.values[1]];\r\n            bus.send(request);\r\n        }","duration":8},{"title":"the ExitApp action is dispatched","status":"pass","exception":{},"rawTitle":"the ExitApp action is dispatched","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"2rul5ke1b4-qafbtd3eu5-11cv7sk6ao3","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(Actions_1.exitApp);\r\n        }","duration":0},{"title":"the user is being logged out","status":"pass","exception":{},"rawTitle":"the user is being logged out","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rul5ke1b4-qafbtd3eu5-hf5b0zhj11","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[1].type.should.be.eql(\"LOG_USER_OUT_PENDING\");\r\n        }","duration":0},{"title":"no further actions are performed","status":"pass","exception":{},"rawTitle":"no further actions are performed","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"2rul5ke1b4-qafbtd3eu5-jkq5253wn4","code":"() => {\r\n            const actions = store.getActions();\r\n            actions.length.should.be.eql(2);\r\n        }","duration":0}],"title":"Exiting the app and logging out","description":"","tags":[],"sequence":2,"id":"2rul5ke1b4-qafbtd3eu5"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"requesting an invalid action","status":"pass","exception":{},"rawTitle":"requesting an invalid action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rul5ke1b4-cn7ypurgww-16b2kk4xgow","code":"() => {\r\n            request.action = \"unknownAction\";\r\n            bus.send(request);\r\n        }","duration":14},{"title":"a workflow command with an error action should be sent","status":"pass","exception":{},"rawTitle":"a workflow command with an error action should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rul5ke1b4-cn7ypurgww-shomi4dyd1","code":"() => {\r\n            spy.messageType(Infrastructure_1.WorkflowResultCommand.TYPE).firstMessage.message.action.should.be.eql(\"error\");\r\n        }","duration":0}],"title":"Published App passes an unknown action to the host","description":"","tags":[],"sequence":3,"id":"2rul5ke1b4-cn7ypurgww"}],"title":"Request to Exit from within the published app","description":"Published apps that make Exit requests will send them via the host to the RuntimeFunctionsPluginService","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/RuntimeFunctionsPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the RuntimeFunctionsPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the RuntimeFunctionsPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"2rul5ke1b4-9pbsb4-z4ss5xopqj","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            appId = \"appId\";\r\n            bus.registerHandler(Services.RuntimeFunctionsPluginService);\r\n            request = new Services.RuntimeFunctionsRequest();\r\n            request.service = \"RuntimeFunctionsPlugin\";\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":9}],"title":"","description":"","tags":[],"id":"2rul5ke1b4-9pbsb4"},"id":"2rul5ke1b4","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the context for the callback id","status":"pass","exception":{},"rawTitle":"setting the context for the callback id","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8gb70fevqz-hf5awqq9l9-rot9e18ycd","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            messageHandlerContext = new abus_1.MessageHandlerContext(bus);\r\n            setContextSpy = sinon.spy(Services.CordovaCommunicationChannel.prototype, Services.CordovaCommunicationChannel.prototype.setupContext.name);\r\n            runtimePluginCreator = new Services.RuntimePluginCreator(appId);\r\n            runtimePluginCreator.setContextForCallbackId(callbackId, messageHandlerContext);\r\n        }","duration":3},{"title":"the context is set on the cordova communication channel","status":"pass","exception":{},"rawTitle":"the context is set on the cordova communication channel","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8gb70fevqz-hf5awqq9l9-11l96nl8yc0","code":"() => {\r\n            setContextSpy.calledWith(callbackId, messageHandlerContext);\r\n        }","duration":0}],"title":"Setting up the cordova communication channel with the correct context","description":"","tags":[],"sequence":1,"id":"8gb70fevqz-hf5awqq9l9"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the RuntimePluginCreator","status":"pass","exception":{},"rawTitle":"getting the RuntimePluginCreator","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8gb70fevqz-lqzrj67g3c-167c1qn6udp","code":"() => {\r\n            mapHasSpy = sinon.spy(Map.prototype, Map.prototype.has.name);\r\n            mapSetSpy = sinon.spy(Map.prototype, Map.prototype.set.name);\r\n            mapGetSpy = sinon.spy(Map.prototype, Map.prototype.get.name);\r\n            runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n        }","duration":5},{"title":"the cache should be checked if an instance already exists for the app id","status":"pass","exception":{},"rawTitle":"the cache should be checked if an instance already exists for the app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8gb70fevqz-lqzrj67g3c-rot2mr60oj","code":"() => {\r\n            mapHasSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"a new instance should be added to the cache","status":"pass","exception":{},"rawTitle":"a new instance should be added to the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8gb70fevqz-lqzrj67g3c-12cqaj13mdh","code":"() => {\r\n            mapSetSpy.firstCall.args[0].should.be.eql(appId);\r\n        }","duration":0},{"title":"the newly created instance should be retrieved from the cache","status":"pass","exception":{},"rawTitle":"the newly created instance should be retrieved from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8gb70fevqz-lqzrj67g3c-8mhe06j3jv","code":"() => {\r\n            mapGetSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the newly created instance should be returned","status":"pass","exception":{},"rawTitle":"the newly created instance should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"8gb70fevqz-lqzrj67g3c-2utrtev59v","code":"() => {\r\n            runtimePluginCreator.should.be.eql(mapSetSpy.firstCall.args[1]);\r\n        }","duration":0}],"title":"Getting an instance of RuntimePluginCreator for the first time","description":"","tags":[],"sequence":2,"id":"8gb70fevqz-lqzrj67g3c"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the RuntimePluginCreator","status":"pass","exception":{},"rawTitle":"getting the RuntimePluginCreator","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8gb70fevqz-17oajv9czgb-167c1qn6udp","code":"() => {\r\n            firstRuntimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            mapHasSpy = sinon.spy(Map.prototype, Map.prototype.has.name);\r\n            mapSetSpy = sinon.spy(Map.prototype, Map.prototype.set.name);\r\n            mapGetSpy = sinon.spy(Map.prototype, Map.prototype.get.name);\r\n            runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n        }","duration":2},{"title":"the cache should be checked if an instance already exists for the app id","status":"pass","exception":{},"rawTitle":"the cache should be checked if an instance already exists for the app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8gb70fevqz-17oajv9czgb-rot2mr60oj","code":"() => {\r\n            mapHasSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"a new instance should not be added to the cache","status":"pass","exception":{},"rawTitle":"a new instance should not be added to the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8gb70fevqz-17oajv9czgb-lqztl6z0e8","code":"() => {\r\n            mapSetSpy.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"the existing instance should be retrieved from the cache","status":"pass","exception":{},"rawTitle":"the existing instance should be retrieved from the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"8gb70fevqz-17oajv9czgb-15m7651wja3","code":"() => {\r\n            mapGetSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the exiting instance should be returned","status":"pass","exception":{},"rawTitle":"the exiting instance should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"8gb70fevqz-17oajv9czgb-hhom1n8wol","code":"() => {\r\n            runtimePluginCreator.should.be.eql(firstRuntimePluginCreator);\r\n        }","duration":0}],"title":"Getting an instance of RuntimePluginCreator for the second time","description":"","tags":[],"sequence":3,"id":"8gb70fevqz-17oajv9czgb"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting an existing the RuntimePluginCreator","status":"pass","exception":{},"rawTitle":"deleting an existing the RuntimePluginCreator","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8gb70fevqz-2rq9rjhv9s-7o1al5ft0g","code":"() => {\r\n            Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            mapHasSpy = sinon.spy(Map.prototype, Map.prototype.has.name);\r\n            mapDeleteSpy = sinon.spy(Map.prototype, Map.prototype.delete.name);\r\n            Services.RuntimePluginCreator.deleteRuntimePluginCreatorForApp(appId);\r\n        }","duration":1},{"title":"the cache should be checked if an instance already exists for the app id","status":"pass","exception":{},"rawTitle":"the cache should be checked if an instance already exists for the app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8gb70fevqz-2rq9rjhv9s-rot2mr60oj","code":"() => {\r\n            mapHasSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"the existing instance should be deleted","status":"pass","exception":{},"rawTitle":"the existing instance should be deleted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8gb70fevqz-2rq9rjhv9s-jkm9po5v40","code":"() => {\r\n            mapDeleteSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0}],"title":"Deleting the RuntimePluginCreator for an app","description":"","tags":[],"sequence":4,"id":"8gb70fevqz-2rq9rjhv9s"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting an existing the RuntimePluginCreator","status":"pass","exception":{},"rawTitle":"deleting an existing the RuntimePluginCreator","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"8gb70fevqz-s2a63xgq11-7o1al5ft0g","code":"() => {\r\n            mapHasSpy = sinon.spy(Map.prototype, Map.prototype.has.name);\r\n            mapDeleteSpy = sinon.spy(Map.prototype, Map.prototype.delete.name);\r\n            Services.RuntimePluginCreator.deleteRuntimePluginCreatorForApp(appId);\r\n        }","duration":1},{"title":"the cache should be checked if an instance already exists for the app id","status":"pass","exception":{},"rawTitle":"the cache should be checked if an instance already exists for the app id","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"8gb70fevqz-s2a63xgq11-rot2mr60oj","code":"() => {\r\n            mapHasSpy.calledWith(appId).should.be.eql(true);\r\n        }","duration":0},{"title":"nothing should be deleted","status":"pass","exception":{},"rawTitle":"nothing should be deleted","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"8gb70fevqz-s2a63xgq11-167lotn26d","code":"() => {\r\n            mapDeleteSpy.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"Deleting the RuntimePluginCreator that doesn't exist","description":"","tags":[],"sequence":5,"id":"8gb70fevqz-s2a63xgq11"}],"title":"Creation of runtime plugins for use within the published app","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/RuntimePluginCreator.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"8gb70fevqz-9pbsb4-j3fzkukkqr","code":"() => {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"8gb70fevqz-9pbsb4"},"id":"8gb70fevqz","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":63,"failedCount":0,"pendingCount":0,"totalCount":63,"totalRuleViolations":0,"duration":141,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":20,"failedCount":0,"pendingCount":0,"totalCount":20,"totalRuleViolations":0,"duration":47,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is setup so method: 'GET', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant/noHeaders', headers: [object Object].","status":"pass","exception":{},"rawTitle":"request arg is setup so method: '<method>', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>', headers: <headers>.","description":"","docString":"","values":["<method>","http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-93izmm2vid-xxi4i9cwur","code":"() => {\r\n            DebugContracts.assertNonEmptyUpperCase(scenarioOutlineContext.example.method);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.urlPathVariant);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.expectedRequestBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                binaryBody: scenarioOutlineContext.example.serializedBody\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":0},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-93izmm2vid-lqxq5id0ps","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: 200,\r\n                headers: HashTableUtility.create(),\r\n                responseType: \"pabinary\",\r\n            };\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":0},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-93izmm2vid-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-93izmm2vid-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            let expectedBody;\r\n            if (scenarioOutlineContext.example.serializedBody) {\r\n                DebugContracts.assertObject(scenarioOutlineContext.example.expectedRequestBody);\r\n                expectedBody = {\r\n                    likeType: \"pabinary\",\r\n                    binary: scenarioOutlineContext.example.expectedRequestBody\r\n                };\r\n            }\r\n            const expectedRequest = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                responseType: \"pabinary\",\r\n                bodyData: expectedBody,\r\n                // Note: Because this plugin is bound to a specific App, we set the requestSource so the RNSendHttpPipeline will know\r\n                // which folder to store the response body's download file to.\r\n                requestSource: \"PublishedApp\",\r\n            };\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualPipelineRequest, expectedRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-93izmm2vid-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["urlPathVariant","method","headers","serializedBody","expectedRequestBody"],["/noHeaders","GET","{}","null","null"],["/withHeaders","DELETE","{\"X-MockHeader1\":\"Mock header 2\"}","null","null"],["/fileUpload-appRelativeFile","POST","{}","{\"serializedType\":\"PABinary-appRelativeFileV1\",\"relativeUrl\":\"TestAssets/SampleWithUnicodeChars.json\",\"contentType\":\"image/png\",\"size\":85}","{\"size\":85,\"contentType\":\"image/png\",\"sourceType\":\"appRelativeFile\",\"relativeUrl\":\"TestAssets/SampleWithUnicodeChars.json\"}"],["/fileUpload-base64","POST","{}","{\"serializedType\":\"PABinary-base64StringV1\",\"base64\":\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\",\"contentType\":\"image/png\"}","{\"size\":85,\"contentType\":\"image/png\",\"sourceType\":\"base64String\",\"base64\":\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\"}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is setup so method: 'GET', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant/noHeaders', headers: [object Object].","status":"pass","exception":{},"rawTitle":"request arg is setup so method: '<method>', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>', headers: <headers>.","description":"","docString":"","values":["<method>","http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-93izmm2vid-xxi4i9cwur","code":"() => {\r\n            DebugContracts.assertNonEmptyUpperCase(scenarioOutlineContext.example.method);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.urlPathVariant);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.expectedRequestBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                binaryBody: scenarioOutlineContext.example.serializedBody\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":0},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-93izmm2vid-lqxq5id0ps","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: 200,\r\n                headers: HashTableUtility.create(),\r\n                responseType: \"pabinary\",\r\n            };\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":0},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-93izmm2vid-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-93izmm2vid-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            let expectedBody;\r\n            if (scenarioOutlineContext.example.serializedBody) {\r\n                DebugContracts.assertObject(scenarioOutlineContext.example.expectedRequestBody);\r\n                expectedBody = {\r\n                    likeType: \"pabinary\",\r\n                    binary: scenarioOutlineContext.example.expectedRequestBody\r\n                };\r\n            }\r\n            const expectedRequest = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                responseType: \"pabinary\",\r\n                bodyData: expectedBody,\r\n                // Note: Because this plugin is bound to a specific App, we set the requestSource so the RNSendHttpPipeline will know\r\n                // which folder to store the response body's download file to.\r\n                requestSource: \"PublishedApp\",\r\n            };\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualPipelineRequest, expectedRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-93izmm2vid-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":1}],"example":{"urlPathVariant":"/noHeaders","method":"GET","headers":{},"serializedBody":null,"expectedRequestBody":null},"title":"Published App makes request to SendHttpPipelinePlugin.sendHttpAsync.","sequence":1,"id":"p282aynwk3-93izmm2vid"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":20,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is setup so method: 'DELETE', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant/withHeaders', headers: [object Object].","status":"pass","exception":{},"rawTitle":"request arg is setup so method: '<method>', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>', headers: <headers>.","description":"","docString":"","values":["<method>","http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-93izmm2vid-93ithugm8b","code":"() => {\r\n            DebugContracts.assertNonEmptyUpperCase(scenarioOutlineContext.example.method);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.urlPathVariant);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.expectedRequestBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                binaryBody: scenarioOutlineContext.example.serializedBody\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":17},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-93izmm2vid-lqxq5id0ps","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: 200,\r\n                headers: HashTableUtility.create(),\r\n                responseType: \"pabinary\",\r\n            };\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-93izmm2vid-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-93izmm2vid-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            let expectedBody;\r\n            if (scenarioOutlineContext.example.serializedBody) {\r\n                DebugContracts.assertObject(scenarioOutlineContext.example.expectedRequestBody);\r\n                expectedBody = {\r\n                    likeType: \"pabinary\",\r\n                    binary: scenarioOutlineContext.example.expectedRequestBody\r\n                };\r\n            }\r\n            const expectedRequest = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                responseType: \"pabinary\",\r\n                bodyData: expectedBody,\r\n                // Note: Because this plugin is bound to a specific App, we set the requestSource so the RNSendHttpPipeline will know\r\n                // which folder to store the response body's download file to.\r\n                requestSource: \"PublishedApp\",\r\n            };\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualPipelineRequest, expectedRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-93izmm2vid-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0}],"example":{"urlPathVariant":"/withHeaders","method":"DELETE","headers":{"X-MockHeader1":"Mock header 2"},"serializedBody":null,"expectedRequestBody":null},"title":"Published App makes request to SendHttpPipelinePlugin.sendHttpAsync.","sequence":2,"id":"p282aynwk3-93izmm2vid"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is setup so method: 'POST', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant/fileUpload-appRelativeFile', headers: [object Object].","status":"pass","exception":{},"rawTitle":"request arg is setup so method: '<method>', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>', headers: <headers>.","description":"","docString":"","values":["<method>","http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-93izmm2vid-203r5yn8el","code":"() => {\r\n            DebugContracts.assertNonEmptyUpperCase(scenarioOutlineContext.example.method);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.urlPathVariant);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.expectedRequestBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                binaryBody: scenarioOutlineContext.example.serializedBody\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":10},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-93izmm2vid-lqxq5id0ps","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: 200,\r\n                headers: HashTableUtility.create(),\r\n                responseType: \"pabinary\",\r\n            };\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-93izmm2vid-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-93izmm2vid-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            let expectedBody;\r\n            if (scenarioOutlineContext.example.serializedBody) {\r\n                DebugContracts.assertObject(scenarioOutlineContext.example.expectedRequestBody);\r\n                expectedBody = {\r\n                    likeType: \"pabinary\",\r\n                    binary: scenarioOutlineContext.example.expectedRequestBody\r\n                };\r\n            }\r\n            const expectedRequest = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                responseType: \"pabinary\",\r\n                bodyData: expectedBody,\r\n                // Note: Because this plugin is bound to a specific App, we set the requestSource so the RNSendHttpPipeline will know\r\n                // which folder to store the response body's download file to.\r\n                requestSource: \"PublishedApp\",\r\n            };\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualPipelineRequest, expectedRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-93izmm2vid-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0}],"example":{"urlPathVariant":"/fileUpload-appRelativeFile","method":"POST","headers":{},"serializedBody":{"serializedType":"PABinary-appRelativeFileV1","relativeUrl":"TestAssets/SampleWithUnicodeChars.json","contentType":"image/png","size":85},"expectedRequestBody":{"size":85,"contentType":"image/png","sourceType":"appRelativeFile","relativeUrl":"TestAssets/SampleWithUnicodeChars.json"}},"title":"Published App makes request to SendHttpPipelinePlugin.sendHttpAsync.","sequence":3,"id":"p282aynwk3-93izmm2vid"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is setup so method: 'POST', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant/fileUpload-base64', headers: [object Object].","status":"pass","exception":{},"rawTitle":"request arg is setup so method: '<method>', url: 'http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>', headers: <headers>.","description":"","docString":"","values":["<method>","http://tempuri.org/SendHttpPipelinePlugin/V1/sendHttpAsync/requestVariant<urlPathVariant>"],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-93izmm2vid-1392k5wzek3","code":"() => {\r\n            DebugContracts.assertNonEmptyUpperCase(scenarioOutlineContext.example.method);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.urlPathVariant);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.expectedRequestBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                binaryBody: scenarioOutlineContext.example.serializedBody\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":7},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with a successful response","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-93izmm2vid-lqxq5id0ps","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: 200,\r\n                headers: HashTableUtility.create(),\r\n                responseType: \"pabinary\",\r\n            };\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-93izmm2vid-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called with the correct parameters","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-93izmm2vid-a55g5cdbe8","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            let expectedBody;\r\n            if (scenarioOutlineContext.example.serializedBody) {\r\n                DebugContracts.assertObject(scenarioOutlineContext.example.expectedRequestBody);\r\n                expectedBody = {\r\n                    likeType: \"pabinary\",\r\n                    binary: scenarioOutlineContext.example.expectedRequestBody\r\n                };\r\n            }\r\n            const expectedRequest = {\r\n                method: scenarioOutlineContext.example.method,\r\n                url: urlBase + scenarioOutlineContext.example.urlPathVariant,\r\n                headers: scenarioOutlineContext.example.headers,\r\n                responseType: \"pabinary\",\r\n                bodyData: expectedBody,\r\n                // Note: Because this plugin is bound to a specific App, we set the requestSource so the RNSendHttpPipeline will know\r\n                // which folder to store the response body's download file to.\r\n                requestSource: \"PublishedApp\",\r\n            };\r\n            HttpPipeline.verifySendHttpPipelineRequest(actualPipelineRequest, expectedRequest);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-93izmm2vid-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":1}],"example":{"urlPathVariant":"/fileUpload-base64","method":"POST","headers":{},"serializedBody":{"serializedType":"PABinary-base64StringV1","base64":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==","contentType":"image/png"},"expectedRequestBody":{"size":85,"contentType":"image/png","sourceType":"base64String","base64":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=="}},"title":"Published App makes request to SendHttpPipelinePlugin.sendHttpAsync.","sequence":4,"id":"p282aynwk3-93izmm2vid"}],"title":"Published App makes request to SendHttpPipelinePlugin.sendHttpAsync.","description":"These scenarios verify the request variants.\n\nGiven:\nactionName = sendHttpAsync","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":45,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-150xcg6474z-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.httpStatus);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.responseBodyName);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.responseBodyName ? MockImage[scenarioOutlineContext.example.responseBodyName] : null);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: 200, response: null","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: <httpStatus>, response: <responseBodyName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-150xcg6474z-dluke9l1nf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                responseType: \"pabinary\",\r\n            };\r\n            if (scenarioOutlineContext.example.responseBodyName)\r\n                stubResponse.response = MockImage[scenarioOutlineContext.example.responseBodyName];\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-150xcg6474z-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-150xcg6474z-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-150xcg6474z-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be <expectedPluginReturnValue>","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-150xcg6474z-15m4v8pjmu8","code":"() => {\r\n            successfulPluginResult.args.should.have.lengthOf(1);\r\n            const actualResult = successfulPluginResult.args[0];\r\n            const expectedResult = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                binaryBody: null\r\n            };\r\n            if (scenarioOutlineContext.example.serializedBody)\r\n                expectedResult.binaryBody = scenarioOutlineContext.example.serializedBody;\r\n            actualResult.should.be.eql(expectedResult);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["httpStatus","headers","responseBodyName","serializedBody"],["200","{}","null","null"],["201","{\"X-MockHeader1\":\"Mock header 2\"}","null","null"],["200","{}","binaryBodyAppRelativeFile","{\"serializedType\":\"PABinary-appRelativeFileV1\",\"relativeUrl\":\"TestAssets/SampleWithUnicodeChars.json\",\"contentType\":\"image/png\",\"size\":85}"],["300","{}","binaryBodyBase64","{\"serializedType\":\"PABinary-base64StringV1\",\"base64\":\"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\",\"contentType\":\"image/png\"}"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-150xcg6474z-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.httpStatus);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.responseBodyName);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.responseBodyName ? MockImage[scenarioOutlineContext.example.responseBodyName] : null);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: 200, response: null","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: <httpStatus>, response: <responseBodyName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-150xcg6474z-dluke9l1nf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                responseType: \"pabinary\",\r\n            };\r\n            if (scenarioOutlineContext.example.responseBodyName)\r\n                stubResponse.response = MockImage[scenarioOutlineContext.example.responseBodyName];\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-150xcg6474z-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":2},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-150xcg6474z-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-150xcg6474z-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be <expectedPluginReturnValue>","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-150xcg6474z-15m4v8pjmu8","code":"() => {\r\n            successfulPluginResult.args.should.have.lengthOf(1);\r\n            const actualResult = successfulPluginResult.args[0];\r\n            const expectedResult = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                binaryBody: null\r\n            };\r\n            if (scenarioOutlineContext.example.serializedBody)\r\n                expectedResult.binaryBody = scenarioOutlineContext.example.serializedBody;\r\n            actualResult.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"httpStatus":200,"headers":{},"responseBodyName":null,"serializedBody":null},"title":"SendHttpPipelinePlugin.sendHttpAsync returns a response and the SendHttpPipelinePluginService should send the response to the published app.","sequence":1,"id":"p282aynwk3-150xcg6474z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-150xcg6474z-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.httpStatus);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.responseBodyName);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.responseBodyName ? MockImage[scenarioOutlineContext.example.responseBodyName] : null);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: 201, response: null","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: <httpStatus>, response: <responseBodyName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-150xcg6474z-dluke9l1nf","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                responseType: \"pabinary\",\r\n            };\r\n            if (scenarioOutlineContext.example.responseBodyName)\r\n                stubResponse.response = MockImage[scenarioOutlineContext.example.responseBodyName];\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-150xcg6474z-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-150xcg6474z-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-150xcg6474z-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be <expectedPluginReturnValue>","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-150xcg6474z-15m4v8pjmu8","code":"() => {\r\n            successfulPluginResult.args.should.have.lengthOf(1);\r\n            const actualResult = successfulPluginResult.args[0];\r\n            const expectedResult = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                binaryBody: null\r\n            };\r\n            if (scenarioOutlineContext.example.serializedBody)\r\n                expectedResult.binaryBody = scenarioOutlineContext.example.serializedBody;\r\n            actualResult.should.be.eql(expectedResult);\r\n        }","duration":1}],"example":{"httpStatus":201,"headers":{"X-MockHeader1":"Mock header 2"},"responseBodyName":null,"serializedBody":null},"title":"SendHttpPipelinePlugin.sendHttpAsync returns a response and the SendHttpPipelinePluginService should send the response to the published app.","sequence":2,"id":"p282aynwk3-150xcg6474z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-150xcg6474z-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.httpStatus);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.responseBodyName);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.responseBodyName ? MockImage[scenarioOutlineContext.example.responseBodyName] : null);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":19},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: 200, response: binaryBodyAppRelativeFile","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: <httpStatus>, response: <responseBodyName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-150xcg6474z-144kwj5jmqz","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                responseType: \"pabinary\",\r\n            };\r\n            if (scenarioOutlineContext.example.responseBodyName)\r\n                stubResponse.response = MockImage[scenarioOutlineContext.example.responseBodyName];\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-150xcg6474z-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-150xcg6474z-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-150xcg6474z-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be <expectedPluginReturnValue>","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-150xcg6474z-15m4v8pjmu8","code":"() => {\r\n            successfulPluginResult.args.should.have.lengthOf(1);\r\n            const actualResult = successfulPluginResult.args[0];\r\n            const expectedResult = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                binaryBody: null\r\n            };\r\n            if (scenarioOutlineContext.example.serializedBody)\r\n                expectedResult.binaryBody = scenarioOutlineContext.example.serializedBody;\r\n            actualResult.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"httpStatus":200,"headers":{},"responseBodyName":"binaryBodyAppRelativeFile","serializedBody":{"serializedType":"PABinary-appRelativeFileV1","relativeUrl":"TestAssets/SampleWithUnicodeChars.json","contentType":"image/png","size":85}},"title":"SendHttpPipelinePlugin.sendHttpAsync returns a response and the SendHttpPipelinePluginService should send the response to the published app.","sequence":3,"id":"p282aynwk3-150xcg6474z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-150xcg6474z-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.httpStatus);\r\n            DebugContracts.assertJsonHashTable(scenarioOutlineContext.example.headers);\r\n            DebugContracts.assertNonEmptyOrNull(scenarioOutlineContext.example.responseBodyName);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.responseBodyName ? MockImage[scenarioOutlineContext.example.responseBodyName] : null);\r\n            DebugContracts.assertObjectOrNull(scenarioOutlineContext.example.serializedBody);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":5},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: 300, response: binaryBodyBase64","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with response: status: <httpStatus>, response: <responseBodyName>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-150xcg6474z-t9wbv4l0ww","code":"() => {\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            const stubResponse = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                responseType: \"pabinary\",\r\n            };\r\n            if (scenarioOutlineContext.example.responseBodyName)\r\n                stubResponse.response = MockImage[scenarioOutlineContext.example.responseBodyName];\r\n            DebugContracts.assertIsValid(stubResponse, AppMagic.Services.SendHttpPipelineResponse.isValid);\r\n            sendHttpAsyncStub.returns(Promise.resolve(stubResponse));\r\n        }","duration":0},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":3,"id":"p282aynwk3-150xcg6474z-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"p282aynwk3-150xcg6474z-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.responseBodyName);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok on success","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok on success","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"p282aynwk3-150xcg6474z-6r42t2yd25","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be <expectedPluginReturnValue>","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-150xcg6474z-15m4v8pjmu8","code":"() => {\r\n            successfulPluginResult.args.should.have.lengthOf(1);\r\n            const actualResult = successfulPluginResult.args[0];\r\n            const expectedResult = {\r\n                status: scenarioOutlineContext.example.httpStatus,\r\n                headers: HashTableUtility.create(scenarioOutlineContext.example.headers),\r\n                binaryBody: null\r\n            };\r\n            if (scenarioOutlineContext.example.serializedBody)\r\n                expectedResult.binaryBody = scenarioOutlineContext.example.serializedBody;\r\n            actualResult.should.be.eql(expectedResult);\r\n        }","duration":0}],"example":{"httpStatus":300,"headers":{},"responseBodyName":"binaryBodyBase64","serializedBody":{"serializedType":"PABinary-base64StringV1","base64":"iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==","contentType":"image/png"}},"title":"SendHttpPipelinePlugin.sendHttpAsync returns a response and the SendHttpPipelinePluginService should send the response to the published app.","sequence":4,"id":"p282aynwk3-150xcg6474z"}],"title":"SendHttpPipelinePlugin.sendHttpAsync returns a response and the SendHttpPipelinePluginService should send the response to the published app.","description":"These scenarios verify the response variants.\n\nGiven:\nactionName = sendHttpAsync","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":18,"failedCount":0,"pendingCount":0,"totalCount":18,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-14kytdefvct-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.errorToThrow);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedErrorName);\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.expectedSerializedVersion);\r\n            DebugContracts.assertObject(errorsToThrow[scenarioOutlineContext.example.errorToThrow]);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":5},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: Error","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: <errorToThrow>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-14kytdefvct-vk72h2bwdf","code":"() => {\r\n            DebugContracts.assertError(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error);\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            sendHttpAsyncStub.returns(Promise.reject(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error));\r\n        }","duration":0},{"title":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"p282aynwk3-14kytdefvct-w3y8olhpa3","code":"() => {\r\n            // In order for the SendHttpPipelinePlugin to be able to serialize ServiceErrors, the errorTypesSetVersion needs to be >=2.\r\n            // In product code, this is configured by a FeatureGate in the PluginVersionManager.ts.\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged: true,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion: 2,\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":2},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"p282aynwk3-14kytdefvct-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"p282aynwk3-14kytdefvct-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-14kytdefvct-7o1erwlilc","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(spy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.expectedErrorName,\r\n                message: errorsToThrow[scenarioOutlineContext.example.errorToThrow].message,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["errorToThrow","expectedErrorName","expectedSerializedVersion"],["Error","\"Error\"","0"],["ApplicationError","\"Core.ApplicationError\"","0"],["ServiceError","\"AppMagic.Services.ServiceError\"","1"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-14kytdefvct-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.errorToThrow);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedErrorName);\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.expectedSerializedVersion);\r\n            DebugContracts.assertObject(errorsToThrow[scenarioOutlineContext.example.errorToThrow]);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":5},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: Error","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: <errorToThrow>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-14kytdefvct-vk72h2bwdf","code":"() => {\r\n            DebugContracts.assertError(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error);\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            sendHttpAsyncStub.returns(Promise.reject(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error));\r\n        }","duration":0},{"title":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"p282aynwk3-14kytdefvct-w3y8olhpa3","code":"() => {\r\n            // In order for the SendHttpPipelinePlugin to be able to serialize ServiceErrors, the errorTypesSetVersion needs to be >=2.\r\n            // In product code, this is configured by a FeatureGate in the PluginVersionManager.ts.\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged: true,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion: 2,\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":2},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"p282aynwk3-14kytdefvct-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":3},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"p282aynwk3-14kytdefvct-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-14kytdefvct-7o1erwlilc","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(spy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.expectedErrorName,\r\n                message: errorsToThrow[scenarioOutlineContext.example.errorToThrow].message,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"errorToThrow":"Error","expectedErrorName":"Error","expectedSerializedVersion":0},"title":"SendHttpPipelinePlugin.sendHttpAsync recieves an error from the ISendHttpPipeline.","sequence":1,"id":"p282aynwk3-14kytdefvct"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-14kytdefvct-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.errorToThrow);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedErrorName);\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.expectedSerializedVersion);\r\n            DebugContracts.assertObject(errorsToThrow[scenarioOutlineContext.example.errorToThrow]);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: ApplicationError","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: <errorToThrow>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-14kytdefvct-7o1i2u1f5s","code":"() => {\r\n            DebugContracts.assertError(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error);\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            sendHttpAsyncStub.returns(Promise.reject(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error));\r\n        }","duration":1},{"title":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"p282aynwk3-14kytdefvct-w3y8olhpa3","code":"() => {\r\n            // In order for the SendHttpPipelinePlugin to be able to serialize ServiceErrors, the errorTypesSetVersion needs to be >=2.\r\n            // In product code, this is configured by a FeatureGate in the PluginVersionManager.ts.\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged: true,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion: 2,\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":0},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"p282aynwk3-14kytdefvct-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"p282aynwk3-14kytdefvct-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-14kytdefvct-7o1erwlilc","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(spy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.expectedErrorName,\r\n                message: errorsToThrow[scenarioOutlineContext.example.errorToThrow].message,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"errorToThrow":"ApplicationError","expectedErrorName":"Core.ApplicationError","expectedSerializedVersion":0},"title":"SendHttpPipelinePlugin.sendHttpAsync recieves an error from the ISendHttpPipeline.","sequence":2,"id":"p282aynwk3-14kytdefvct"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"request arg is mocked","status":"pass","exception":{},"rawTitle":"request arg is mocked","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-14kytdefvct-jkoymga8v4","code":"() => {\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.errorToThrow);\r\n            DebugContracts.assertNonEmpty(scenarioOutlineContext.example.expectedErrorName);\r\n            DebugContracts.assertNumber(scenarioOutlineContext.example.expectedSerializedVersion);\r\n            DebugContracts.assertObject(errorsToThrow[scenarioOutlineContext.example.errorToThrow]);\r\n            request.action = \"sendHttpAsync\";\r\n            const requestArg = {\r\n                method: \"GET\",\r\n                url: urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow,\r\n                headers: {},\r\n                binaryBody: null\r\n            };\r\n            request.actionArgs = [requestArg];\r\n        }","duration":6},{"title":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: ServiceError","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync is stubbed with mock error: <errorToThrow>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":2,"id":"p282aynwk3-14kytdefvct-7nvn92b4f4","code":"() => {\r\n            DebugContracts.assertError(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error);\r\n            sendHttpAsyncStub = sinon.stub(AppMagic.Runtime.App.Host.AppHostSendHttpPipeline.prototype, \"sendHttpAsync\");\r\n            sendHttpAsyncStub.returns(Promise.reject(errorsToThrow[scenarioOutlineContext.example.errorToThrow].error));\r\n        }","duration":1},{"title":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","status":"pass","exception":{},"rawTitle":"errorTypesSetVersion is set to 2 (the minimum required by this plugin)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"p282aynwk3-14kytdefvct-w3y8olhpa3","code":"() => {\r\n            // In order for the SendHttpPipelinePlugin to be able to serialize ServiceErrors, the errorTypesSetVersion needs to be >=2.\r\n            // In product code, this is configured by a FeatureGate in the PluginVersionManager.ts.\r\n            const mockAppHostState = {\r\n                isPluginMetadataExchanged: true,\r\n                localPlugins: HashTableUtility.create(),\r\n                serialization: {\r\n                    errorTypesSetVersion: 2,\r\n                }\r\n            };\r\n            DebugContracts.assertFunction(Services.RuntimePluginCreator.prototype[\"getAppHostState\"]);\r\n            getAppHostStateStub = sinon.stub(Services.RuntimePluginCreator.prototype, \"getAppHostState\")\r\n                .returns(mockAppHostState);\r\n        }","duration":1},{"title":"executing the action","status":"pass","exception":{},"rawTitle":"executing the action","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":4,"id":"p282aynwk3-14kytdefvct-vgphls1qqt","code":"() => {\r\n            bus.send(request);\r\n            messageContext = spy.sentMessages[0].context;\r\n        }","duration":1},{"title":"AppHostSendHttpPipeline.sendHttpAsync should be called","status":"pass","exception":{},"rawTitle":"AppHostSendHttpPipeline.sendHttpAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":5,"id":"p282aynwk3-14kytdefvct-jkppjx1qzk","code":"() => {\r\n            sendHttpAsyncStub.callCount.should.be.eql(1);\r\n            sendHttpAsyncStub.firstCall.args.should.have.lengthOf(1);\r\n            const actualPipelineRequest = sendHttpAsyncStub.firstCall.args[0];\r\n            actualPipelineRequest.url.should.be.eql(urlBase + \"/\" + scenarioOutlineContext.example.errorToThrow);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with serialized error","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with serialized error","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"p282aynwk3-14kytdefvct-7o1erwlilc","code":"() => {\r\n            Utilities_1.verifyCordovaPluginResultErrorSentWithSerializedError(spy, request.callbackId, {\r\n                errorName: scenarioOutlineContext.example.expectedErrorName,\r\n                message: errorsToThrow[scenarioOutlineContext.example.errorToThrow].message,\r\n                serializedVersion: scenarioOutlineContext.example.expectedSerializedVersion,\r\n            });\r\n        }","duration":0}],"example":{"errorToThrow":"ServiceError","expectedErrorName":"AppMagic.Services.ServiceError","expectedSerializedVersion":1},"title":"SendHttpPipelinePlugin.sendHttpAsync recieves an error from the ISendHttpPipeline.","sequence":3,"id":"p282aynwk3-14kytdefvct"}],"title":"SendHttpPipelinePlugin.sendHttpAsync recieves an error from the ISendHttpPipeline.","description":"Verify we are serializing the ServiceErrors correctly.\n\nGiven:\nactionName = sendHttpAsync","tags":[]}],"title":"Making http requests from within the published app using the sendHttpPipeline plugin.","description":"Published apps that make http requests will send them via the host to the SendHttpPipelinePluginService.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/SendHttpPipelinePluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":21,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the SendHttpPipelinePluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the SendHttpPipelinePluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"p282aynwk3-9pbsb4-a57vk6t0z4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_2.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.SendHttpPipelinePluginService);\r\n            request = new Services.SendHttpPipelineRequest();\r\n            request.service = SendHttpPipelinePluginServiceName;\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":21}],"title":"","description":"","tags":[],"id":"p282aynwk3-9pbsb4"},"id":"p282aynwk3","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":2,"duration":14,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a launch request to the 'UrlLauncherPluginService' with a supportedUrl","status":"pass","exception":{},"rawTitle":"a launch request to the 'UrlLauncherPluginService' with a <url>","description":"","docString":"","values":["UrlLauncherPluginService"],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-jkm8bp1dds-11l69ilub4w","code":"() => {\r\n            request = new Services.UrlLauncherRequest();\r\n            request.actionArgs = [scenarioOutlineContext.example.url];\r\n            request.service = stepContext.values[0];\r\n            request.callbackId = scenarioOutlineContext.example.callbackId;\r\n            contextSendStub = sinon.stub(abus_1.MessageHandlerContext.prototype, \"send\");\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\").returns(scenarioOutlineContext.example.supported ? Promise.resolve(true) : Promise.reject(new Error(\"MockError\")));\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            bus.send(request);\r\n        }","duration":4},{"title":"the result message should indicate whether the URL was successfully launched","status":"pass","exception":{},"rawTitle":"the result message should indicate whether the URL was successfully launched","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported"}],"type":"Then","sequence":2,"id":"drvk1dkygz-jkm8bp1dds-rot1y031t7","code":"() => {\r\n            contextSendStub.firstCall.args[0].args[0].should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0},{"title":"the URL should be launched","status":"pass","exception":{},"rawTitle":"the URL should be launched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"drvk1dkygz-jkm8bp1dds-jkmrxym9r4","code":"() => {\r\n            openUrlStub.called.should.eql(scenarioOutlineContext.example.openUrlCalled);\r\n        }","duration":1},{"title":"only one result message should be sent","status":"pass","exception":{},"rawTitle":"only one result message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-jkm8bp1dds-cn5nqloeow","code":"() => {\r\n            contextSendStub.calledOnce.should.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["supported","openUrlCalled","result","url","callbackId"],["true","true","true","supportedUrl","testlaunchsupported"],["false","true","false","unsupportedUrl","testlaunchnotsupported"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a launch request to the 'UrlLauncherPluginService' with a supportedUrl","status":"pass","exception":{},"rawTitle":"a launch request to the 'UrlLauncherPluginService' with a <url>","description":"","docString":"","values":["UrlLauncherPluginService"],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-jkm8bp1dds-11l69ilub4w","code":"() => {\r\n            request = new Services.UrlLauncherRequest();\r\n            request.actionArgs = [scenarioOutlineContext.example.url];\r\n            request.service = stepContext.values[0];\r\n            request.callbackId = scenarioOutlineContext.example.callbackId;\r\n            contextSendStub = sinon.stub(abus_1.MessageHandlerContext.prototype, \"send\");\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\").returns(scenarioOutlineContext.example.supported ? Promise.resolve(true) : Promise.reject(new Error(\"MockError\")));\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            bus.send(request);\r\n        }","duration":4},{"title":"the result message should indicate whether the URL was successfully launched","status":"pass","exception":{},"rawTitle":"the result message should indicate whether the URL was successfully launched","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported"}],"type":"Then","sequence":2,"id":"drvk1dkygz-jkm8bp1dds-rot1y031t7","code":"() => {\r\n            contextSendStub.firstCall.args[0].args[0].should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":0},{"title":"the URL should be launched","status":"pass","exception":{},"rawTitle":"the URL should be launched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"drvk1dkygz-jkm8bp1dds-jkmrxym9r4","code":"() => {\r\n            openUrlStub.called.should.eql(scenarioOutlineContext.example.openUrlCalled);\r\n        }","duration":1},{"title":"only one result message should be sent","status":"pass","exception":{},"rawTitle":"only one result message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-jkm8bp1dds-cn5nqloeow","code":"() => {\r\n            contextSendStub.calledOnce.should.eql(true);\r\n        }","duration":0}],"example":{"supported":true,"openUrlCalled":true,"result":true,"url":"supportedUrl","callbackId":"testlaunchsupported"},"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported","sequence":1,"id":"drvk1dkygz-jkm8bp1dds"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a launch request to the 'UrlLauncherPluginService' with a unsupportedUrl","status":"pass","exception":{},"rawTitle":"a launch request to the 'UrlLauncherPluginService' with a <url>","description":"","docString":"","values":["UrlLauncherPluginService"],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-jkm8bp1dds-11l81k3xee8","code":"() => {\r\n            request = new Services.UrlLauncherRequest();\r\n            request.actionArgs = [scenarioOutlineContext.example.url];\r\n            request.service = stepContext.values[0];\r\n            request.callbackId = scenarioOutlineContext.example.callbackId;\r\n            contextSendStub = sinon.stub(abus_1.MessageHandlerContext.prototype, \"send\");\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\").returns(scenarioOutlineContext.example.supported ? Promise.resolve(true) : Promise.reject(new Error(\"MockError\")));\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the result message should indicate whether the URL was successfully launched","status":"pass","exception":{},"rawTitle":"the result message should indicate whether the URL was successfully launched","description":"","docString":"","values":[],"ruleViolations":[{"rule":5,"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported"}],"type":"Then","sequence":2,"id":"drvk1dkygz-jkm8bp1dds-rot1y031t7","code":"() => {\r\n            contextSendStub.firstCall.args[0].args[0].should.be.eql(scenarioOutlineContext.example.result);\r\n        }","duration":1},{"title":"the URL should be launched","status":"pass","exception":{},"rawTitle":"the URL should be launched","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"drvk1dkygz-jkm8bp1dds-jkmrxym9r4","code":"() => {\r\n            openUrlStub.called.should.eql(scenarioOutlineContext.example.openUrlCalled);\r\n        }","duration":0},{"title":"only one result message should be sent","status":"pass","exception":{},"rawTitle":"only one result message should be sent","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-jkm8bp1dds-cn5nqloeow","code":"() => {\r\n            contextSendStub.calledOnce.should.eql(true);\r\n        }","duration":1}],"example":{"supported":false,"openUrlCalled":true,"result":false,"url":"unsupportedUrl","callbackId":"testlaunchnotsupported"},"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported","sequence":2,"id":"drvk1dkygz-jkm8bp1dds"}],"title":"When calling the plugin handler with non ms-apps protocols that are supported and unsupported","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the UrlLauncherPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the UrlLauncherPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-qu2vppctnv-duj3qinml7","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            request = new Services.UrlLauncherRequest;\r\n            request.service = \"UrlLauncherPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = \"appId\";\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"executing launchInNewWindowAsync with args [http://tempuri.org]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"drvk1dkygz-qu2vppctnv-kg4anpyh37","code":"() => {\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\");\r\n            openUrlStub.returns(scenarioOutlineContext.example.openUrlSucceeds ? Promise.resolve() : Promise.reject(new Error(\"MockError\")));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the call to openUrlAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to openUrlAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"drvk1dkygz-qu2vppctnv-xcxzvi6soj","code":"() => {\r\n            openUrlStub.callCount.should.be.eql(1);\r\n            openUrlStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectedTargetArgs);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-qu2vppctnv-kr15mwgwr7","code":"() => {\r\n            spy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            pluginResult = spy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Error) {\r\n                DebugContracts.assertArray(pluginResult.args);\r\n                const error = pluginResult.args[0];\r\n                DebugContracts.assertError(error);\r\n                // Here is a test that will fail on purpose, so we can see the error message and stack in the test result.\r\n                Core.Promise.formatError(error, /*includeStack*/ true).should.be.eql(null);\r\n            }\r\n        }","duration":0},{"title":"plugin result value should be true","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"drvk1dkygz-qu2vppctnv-44jjh41hfn","code":"() => {\r\n            const expectedPluginReturnValue = scenarioOutlineContext.example.expectedPluginReturnValue;\r\n            pluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["actionName","actionArgs","expectedTargetArgs","openUrlSucceeds","expectedPluginReturnValue"],["launchInNewWindowAsync","[\"http://tempuri.org\"]","[\"http://tempuri.org\"]","true","true"],["launchInNewWindowAsync","[\"http://tempuri.org\"]","[\"http://tempuri.org\"]","false","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the UrlLauncherPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the UrlLauncherPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-qu2vppctnv-duj3qinml7","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            request = new Services.UrlLauncherRequest;\r\n            request.service = \"UrlLauncherPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = \"appId\";\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"executing launchInNewWindowAsync with args [http://tempuri.org]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"drvk1dkygz-qu2vppctnv-kg4anpyh37","code":"() => {\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\");\r\n            openUrlStub.returns(scenarioOutlineContext.example.openUrlSucceeds ? Promise.resolve() : Promise.reject(new Error(\"MockError\")));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":2},{"title":"the call to openUrlAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to openUrlAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"drvk1dkygz-qu2vppctnv-xcxzvi6soj","code":"() => {\r\n            openUrlStub.callCount.should.be.eql(1);\r\n            openUrlStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectedTargetArgs);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-qu2vppctnv-kr15mwgwr7","code":"() => {\r\n            spy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            pluginResult = spy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Error) {\r\n                DebugContracts.assertArray(pluginResult.args);\r\n                const error = pluginResult.args[0];\r\n                DebugContracts.assertError(error);\r\n                // Here is a test that will fail on purpose, so we can see the error message and stack in the test result.\r\n                Core.Promise.formatError(error, /*includeStack*/ true).should.be.eql(null);\r\n            }\r\n        }","duration":0},{"title":"plugin result value should be true","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"drvk1dkygz-qu2vppctnv-44jjh41hfn","code":"() => {\r\n            const expectedPluginReturnValue = scenarioOutlineContext.example.expectedPluginReturnValue;\r\n            pluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionName":"launchInNewWindowAsync","actionArgs":["http://tempuri.org"],"expectedTargetArgs":["http://tempuri.org"],"openUrlSucceeds":true,"expectedPluginReturnValue":true},"title":"Plugin should preserve function signature through the Plugin communication pipeline.","sequence":1,"id":"drvk1dkygz-qu2vppctnv"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the UrlLauncherPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the UrlLauncherPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-qu2vppctnv-duj3qinml7","code":"() => {\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            bus.registerHandler(Services.UrlLauncherPluginService);\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            request = new Services.UrlLauncherRequest;\r\n            request.service = \"UrlLauncherPlugin\";\r\n            request.callbackId = \"test\";\r\n            request.appId = \"appId\";\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"executing launchInNewWindowAsync with args [http://tempuri.org]","status":"pass","exception":{},"rawTitle":"executing <actionName> with args [<actionArgs>]","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"drvk1dkygz-qu2vppctnv-kg4anpyh37","code":"() => {\r\n            openUrlStub = sinon.stub(react_native_1.Linking, \"openURL\");\r\n            openUrlStub.returns(scenarioOutlineContext.example.openUrlSucceeds ? Promise.resolve() : Promise.reject(new Error(\"MockError\")));\r\n            request.action = scenarioOutlineContext.example.actionName;\r\n            request.actionArgs = scenarioOutlineContext.example.actionArgs;\r\n            bus.send(request);\r\n        }","duration":1},{"title":"the call to openUrlAsync should have correct args","status":"pass","exception":{},"rawTitle":"the call to openUrlAsync should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"drvk1dkygz-qu2vppctnv-xcxzvi6soj","code":"() => {\r\n            openUrlStub.callCount.should.be.eql(1);\r\n            openUrlStub.firstCall.args.should.be.eql(scenarioOutlineContext.example.expectedTargetArgs);\r\n        }","duration":0},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"drvk1dkygz-qu2vppctnv-kr15mwgwr7","code":"() => {\r\n            spy.messageType(Services.CordovaPluginResult).wasReceivedCount.should.be.eql(1);\r\n            pluginResult = spy.messageType(Services.CordovaPluginResult).firstMessage.message;\r\n            pluginResult.callbackId.should.be.eql(request.callbackId);\r\n            DebugContracts.assertStrictEnumEqual(pluginResult.status, ApiHost_1.ApiHost.Status.Ok, ApiHost_1.ApiHost.Status);\r\n            pluginResult.status.should.be.eql(ApiHost_1.ApiHost.Status.Ok);\r\n            if (pluginResult.status === ApiHost_1.ApiHost.Status.Error) {\r\n                DebugContracts.assertArray(pluginResult.args);\r\n                const error = pluginResult.args[0];\r\n                DebugContracts.assertError(error);\r\n                // Here is a test that will fail on purpose, so we can see the error message and stack in the test result.\r\n                Core.Promise.formatError(error, /*includeStack*/ true).should.be.eql(null);\r\n            }\r\n        }","duration":1},{"title":"plugin result value should be false","status":"pass","exception":{},"rawTitle":"plugin result value should be <expectedPluginReturnValue>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"drvk1dkygz-qu2vppctnv-15yyxjklqjv","code":"() => {\r\n            const expectedPluginReturnValue = scenarioOutlineContext.example.expectedPluginReturnValue;\r\n            pluginResult.args.should.be.eql([expectedPluginReturnValue]);\r\n        }","duration":0}],"example":{"actionName":"launchInNewWindowAsync","actionArgs":["http://tempuri.org"],"expectedTargetArgs":["http://tempuri.org"],"openUrlSucceeds":false,"expectedPluginReturnValue":false},"title":"Plugin should preserve function signature through the Plugin communication pipeline.","sequence":2,"id":"drvk1dkygz-qu2vppctnv"}],"title":"Plugin should preserve function signature through the Plugin communication pipeline.","description":"This scenario tests the communication system from the PublishedApp to the AppHost. Because the Plugin makes\na Cordova.exec call to a handler via a communication channel, which then gets routed through the service via abus,\nthis scenario detects whether anything within this communication pipeline has changed (i.e. added a new action name,\nmodified the action arguments, or changed the return type).\n\nactionName: Name of the action invoked from the service.\nactionArgs: The args parameters that were passed through with the actionName.\nexpectedTargetArgs: The args parameters passed into the internal action (stubbed).\nopenUrlSucceeds: Determines whether the call to openUrlAsync succeeds or throws. \"undefined\" if canOpenUrlAsync returns false.\nexpectedPluginReturnValue: Expected return value of the entire plugin call to the action name.","tags":[]}],"title":"Launch a URL from a published app","description":"Published Apps support the ability to define a launch function which launches a program based on the protocol and URL provided by the user\n\nRules:\n* If the protocol is supported, then it will launch the program and return true.\n* If the protocol is not supported, then it will attempt to launch the program and will return false.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/UrlLauncherPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks are setup","status":"pass","exception":{},"rawTitle":"mocks are setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"drvk1dkygz-9pbsb4-j3fzkukkqr","code":"() => {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n        }","duration":0}],"title":"","description":"","tags":[],"id":"drvk1dkygz-9pbsb4"},"id":"drvk1dkygz","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":21,"failedCount":0,"pendingCount":0,"totalCount":21,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionName: 'exchangePluginManagerVersion', arg[appVersion]: '1'","status":"pass","exception":{},"rawTitle":"actionName: 'exchangePluginManagerVersion', arg[appVersion]: '1'","description":"","docString":"","values":["exchangePluginManagerVersion",1],"ruleViolations":[],"type":"Given","sequence":1,"id":"4wlk98rvfn-w2gu4u0q63-257wbvqbs3","code":"() => {\r\n            // Setup spys\r\n            setAppPluginManagerVersionSpy = sinon.spy(AppMagic.Runtime.App.Plugins.PluginVersionManager.prototype, \"setAppPluginManagerVersion\");\r\n            setClientPluginManagerVersionSpy = sinon.spy(AppMagic.Runtime.App.Plugins.PluginVersionManager.prototype, \"setClientPluginManagerVersion\");\r\n            request.action = \"exchangePluginManagerVersion\";\r\n            request.actionArgs = [\"1\"];\r\n        }","duration":1},{"title":"requesting the version of the plugin manager","status":"pass","exception":{},"rawTitle":"requesting the version of the plugin manager","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4wlk98rvfn-w2gu4u0q63-7o2m8da8g0","code":"() => {\r\n            bus.send(request);\r\n        }","duration":1},{"title":"The PluginVersionManager should be created for the app","status":"pass","exception":{},"rawTitle":"The PluginVersionManager should be created for the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4wlk98rvfn-w2gu4u0q63-2rwhs327c0","code":"() => {\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            pluginVersionManager = runtimePluginCreator.pluginVersionManager;\r\n        }","duration":1},{"title":"the call to PluginVersionManager.setAppPluginManagerVersion should have correct args","status":"pass","exception":{},"rawTitle":"the call to PluginVersionManager.setAppPluginManagerVersion should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4wlk98rvfn-w2gu4u0q63-a5bowiwd28","code":"() => {\r\n            setAppPluginManagerVersionSpy.callCount.should.be.eql(1);\r\n            setAppPluginManagerVersionSpy.firstCall.args.should.be.eql([\"1\"]);\r\n        }","duration":0},{"title":"the call to PluginVersionManager.setClientPluginManagerVersion should have been called with no args","status":"pass","exception":{},"rawTitle":"the call to PluginVersionManager.setClientPluginManagerVersion should have been called with no args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4wlk98rvfn-w2gu4u0q63-q9irovfikz","code":"() => {\r\n            setClientPluginManagerVersionSpy.callCount.should.be.eql(1);\r\n            setClientPluginManagerVersionSpy.firstCall.args.should.be.eql([]);\r\n        }","duration":0},{"title":"verify correct value is set for PluginVersionManager.getAppPluginManagerVersion()","status":"pass","exception":{},"rawTitle":"verify correct value is set for PluginVersionManager.getAppPluginManagerVersion()","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4wlk98rvfn-w2gu4u0q63-25a544mrar","code":"() => {\r\n            pluginVersionManager.getAppPluginManagerVersion().should.be.eql(\"1\");\r\n        }","duration":0},{"title":"verify correct value is set for PluginVersionManager.getClientPluginManagerVersion()","status":"pass","exception":{},"rawTitle":"verify correct value is set for PluginVersionManager.getClientPluginManagerVersion()","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4wlk98rvfn-w2gu4u0q63-i79jtn01nk","code":"() => {\r\n            pluginVersionManager.getClientPluginManagerVersion().should.be.eql(\"1\");\r\n        }","duration":0},{"title":"the PluginVersionManager.versionsExchanged OneTime-event should not have fired (because the plugin versions haven't been exchanged yet)","status":"pass","exception":{},"rawTitle":"the PluginVersionManager.versionsExchanged OneTime-event should not have fired (because the plugin versions haven't been exchanged yet)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4wlk98rvfn-w2gu4u0q63-i7914ui4qo","code":"() => {\r\n            let wasEventFired = false;\r\n            pluginVersionManager.versionsExchanged.waitAsync()\r\n                .then(() => {\r\n                wasEventFired = true;\r\n            });\r\n            // Note, we don't wait for the promise to complete. if the event was already fired, the above promise\r\n            // should complete synchronously. For this test, we don't expect the event to have fired.\r\n            chai.expect(wasEventFired).eql(false);\r\n        }","duration":1},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4wlk98rvfn-w2gu4u0q63-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be the value of the client's version.","status":"pass","exception":{},"rawTitle":"plugin result value should be the value of the client's version.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4wlk98rvfn-w2gu4u0q63-mwsf6l3qm8","code":"() => {\r\n            successfulPluginResult.args.should.be.eql([\"1\"]);\r\n        }","duration":0}],"title":"Published app requests the version of the plugin manager","description":"","tags":[],"sequence":1,"id":"4wlk98rvfn-w2gu4u0q63"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"actionName: 'exchangeAllPluginVersions', arg[appVersion]: '1'","status":"pass","exception":{},"rawTitle":"actionName: 'exchangeAllPluginVersions', arg[appVersion]: '1'","description":"","docString":"","values":["exchangeAllPluginVersions",1],"ruleViolations":[],"type":"Given","sequence":1,"id":"4wlk98rvfn-q9irlc4tcz-ggrms1hgsg","code":"() => {\r\n            // Setup spys\r\n            setAppPluginVersionHashTableSpy = sinon.spy(AppMagic.Runtime.App.Plugins.PluginVersionManager.prototype, \"setAppPluginVersionHashTable\");\r\n            const originalSetClientPluginVersionHashTable = AppMagic.Runtime.App.Plugins.PluginVersionManager.prototype.setClientPluginVersionHashTable;\r\n            setClientPluginVersionHashTableSpy = sinon.stub(AppMagic.Runtime.App.Plugins.PluginVersionManager.prototype, \"setClientPluginVersionHashTable\")\r\n                // Can't use lambda notation if we want 'this' keyword to bind to the actual PluginVersionManager instance.\r\n                .callsFake(function (origValue) {\r\n                // The original but replace the default values with our stub versions\r\n                originalSetClientPluginVersionHashTable.call(this, AppMagic.Utility.jsonClone(stubClientPluginVersions));\r\n            });\r\n            request.action = \"exchangeAllPluginVersions\";\r\n            // make a clone in case the plugin modifies the inputs.\r\n            request.actionArgs = [AppMagic.Utility.jsonClone(mockAppPluginVersions)];\r\n        }","duration":6},{"title":"requesting the version of the plugin manager","status":"pass","exception":{},"rawTitle":"requesting the version of the plugin manager","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4wlk98rvfn-q9irlc4tcz-7o2m8da8g0","code":"() => {\r\n            bus.send(request);\r\n        }","duration":2},{"title":"The PluginVersionManager should be created for the app","status":"pass","exception":{},"rawTitle":"The PluginVersionManager should be created for the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4wlk98rvfn-q9irlc4tcz-2rwhs327c0","code":"() => {\r\n            const runtimePluginCreator = Services.RuntimePluginCreator.getRuntimePluginCreatorForApp(appId);\r\n            pluginVersionManager = runtimePluginCreator.pluginVersionManager;\r\n        }","duration":0},{"title":"the call to PluginVersionManager.setAppPluginVersionHashTable should have correct args","status":"pass","exception":{},"rawTitle":"the call to PluginVersionManager.setAppPluginVersionHashTable should have correct args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4wlk98rvfn-q9irlc4tcz-a569vcmrm8","code":"() => {\r\n            setAppPluginVersionHashTableSpy.callCount.should.be.eql(1);\r\n            setAppPluginVersionHashTableSpy.firstCall.args.should.be.eql([mockAppPluginVersions]);\r\n        }","duration":0},{"title":"the call to PluginVersionManager.setClientPluginVersionHashTable should have been called with no args","status":"pass","exception":{},"rawTitle":"the call to PluginVersionManager.setClientPluginVersionHashTable should have been called with no args","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4wlk98rvfn-q9irlc4tcz-a54c1ghw9s","code":"() => {\r\n            setClientPluginVersionHashTableSpy.callCount.should.be.eql(1);\r\n            setClientPluginVersionHashTableSpy.firstCall.args.should.be.eql([]);\r\n        }","duration":0},{"title":"verify correct value is set for PluginVersionManager.getAllAppPluginVersions()","status":"pass","exception":{},"rawTitle":"verify correct value is set for PluginVersionManager.getAllAppPluginVersions()","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4wlk98rvfn-q9irlc4tcz-xvt8vk7ivx","code":"() => {\r\n            pluginVersionManager.getAllAppPluginVersions().should.be.eql(mockAppPluginVersions);\r\n        }","duration":0},{"title":"verify correct value is set for PluginVersionManager.getAllClientPluginVersions()","status":"pass","exception":{},"rawTitle":"verify correct value is set for PluginVersionManager.getAllClientPluginVersions()","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4wlk98rvfn-q9irlc4tcz-hx40zolqb1","code":"() => {\r\n            pluginVersionManager.getAllClientPluginVersions().should.be.eql(stubClientPluginVersions);\r\n        }","duration":0},{"title":"the PluginVersionManager.versionsExchanged OneTime-event should've fired.","status":"pass","exception":{},"rawTitle":"the PluginVersionManager.versionsExchanged OneTime-event should've fired.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4wlk98rvfn-q9irlc4tcz-udsov570it","code":"() => {\r\n            let wasEventFired = false;\r\n            pluginVersionManager.versionsExchanged.waitAsync()\r\n                .then(() => {\r\n                wasEventFired = true;\r\n            });\r\n            // Note, we don't wait for the promise to complete. if the event was already fired, the above promise\r\n            // should complete synchronously.\r\n            chai.expect(wasEventFired).eql(true);\r\n        }","duration":3},{"title":"plugin should end up sending a CordovaPluginResult with status of Ok","status":"pass","exception":{},"rawTitle":"plugin should end up sending a CordovaPluginResult with status of Ok","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4wlk98rvfn-q9irlc4tcz-kr15mwgwr7","code":"() => {\r\n            successfulPluginResult = Utilities_1.verifyCordovaPluginResultSentWithStatusOfOk(spy, request.callbackId);\r\n        }","duration":0},{"title":"plugin result value should be the value of the client's version.","status":"pass","exception":{},"rawTitle":"plugin result value should be the value of the client's version.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4wlk98rvfn-q9irlc4tcz-mwsf6l3qm8","code":"() => {\r\n            successfulPluginResult.args.should.be.eql([stubClientPluginVersions]);\r\n        }","duration":0}],"title":"Published app requests the version of all plugins","description":"","tags":[],"sequence":2,"id":"4wlk98rvfn-q9irlc4tcz"}],"title":"Managing the versions plugins of the host and published app","description":"Rules:\n* Get the version of the plugin manager\n* Get the versions of all plugins","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/VersionSupportPluginService.Spec.js","background":{"type":"Background","ruleViolations":[],"statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the VersionSupportPluginService is registered to listen to events","status":"pass","exception":{},"rawTitle":"the VersionSupportPluginService is registered to listen to events","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4wlk98rvfn-9pbsb4-r5gcb0duyt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            Utilities_1.setupDebugContractsToFailChai();\r\n            // Initialize the process\r\n            bus = new abus_1.Bus().makeGlobal();\r\n            spy = MessageSpy_1.MessageSpy.Register(bus, true);\r\n            spy.ensureSubscriber(Infrastructure_1.WorkflowResultCommand.TYPE);\r\n            spy.ensureSubscriber(Services.CordovaPluginResult);\r\n            appId = \"appId\";\r\n            tryGetAppInfoFromCacheStub = Utilities_1.createStubForSettingCachedAppInfoInRuntimeAdapter();\r\n            bus.registerHandler(Services.VersionSupportPluginService);\r\n            request = new Services.VersionSupportRequest();\r\n            request.service = \"VersionSupport\";\r\n            request.callbackId = \"test\";\r\n            request.appId = appId;\r\n            RuntimeMocks.setupAsync();\r\n            const runtimeAdapter = new Adapters.RuntimeAdapter();\r\n            yield runtimeAdapter.loadAsync();\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IOpenAppService);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IOpenAppService).toConstantValue(new Mocks_1.OpenAppMockService());\r\n            Utilities_1.mockKernelInternetConnection();\r\n        })","duration":8}],"title":"","description":"","tags":[],"id":"4wlk98rvfn-9pbsb4"},"id":"4wlk98rvfn","path":"Services/CordovaPlugin/Plugins"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the \"StatusBarPluginService\" is registered","status":"pass","exception":{},"rawTitle":"the \"StatusBarPluginService\" is registered","description":"","docString":"","values":["StatusBarPluginService"],"ruleViolations":[],"type":"When","sequence":1,"id":"mn5refndot-16dqo00dscz-122eqnt4w63","code":"() => {\r\n            registry = new Services.CordovaPluginRegistry();\r\n            serviceName = stepContext.values[0];\r\n            registration = {\r\n                request: Services.StatusBarRequest\r\n            };\r\n            registry.registerCordovaPlugin(serviceName, registration);\r\n        }","duration":0},{"title":"the registration can be retrieved from the registry","status":"pass","exception":{},"rawTitle":"the registration can be retrieved from the registry","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"mn5refndot-16dqo00dscz-ph6lw8dmxs","code":"() => {\r\n            registry.getCordovaPlugin(serviceName).should.be.eql(registration);\r\n        }","duration":0}],"title":"Registering a plugin with the registry","description":"","tags":[],"sequence":1,"id":"mn5refndot-16dqo00dscz"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the \"StatusBarPluginService\" is already registered","status":"pass","exception":{},"rawTitle":"the \"StatusBarPluginService\" is already registered","description":"","docString":"","values":["StatusBarPluginService"],"ruleViolations":[],"type":"Given","sequence":1,"id":"mn5refndot-jkqgwcqko0-52oyg0qq1f","code":"() => {\r\n            registry = new Services.CordovaPluginRegistry();\r\n            serviceName = stepContext.values[0];\r\n            registration = {\r\n                request: Services.StatusBarRequest\r\n            };\r\n            registry.registerCordovaPlugin(serviceName, registration);\r\n        }","duration":0},{"title":"the plugin is registered again","status":"pass","exception":{},"rawTitle":"the plugin is registered again","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"mn5refndot-jkqgwcqko0-163u7ffcstv","code":"() => {\r\n            try {\r\n                registry.registerCordovaPlugin(serviceName, registration);\r\n            }\r\n            catch (error) {\r\n                errorCaught = error;\r\n            }\r\n        }","duration":0},{"title":"the second registration is not allowed","status":"pass","exception":{},"rawTitle":"the second registration is not allowed","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"mn5refndot-jkqgwcqko0-ys8gsm4225","code":"() => {\r\n            errorCaught.should.be.eql(`${serviceName} already registered`);\r\n        }","duration":0}],"title":"Registering a plugin with the registry that has already been registered","description":"","tags":[],"sequence":2,"id":"mn5refndot-jkqgwcqko0"}],"title":"Published app requires various plugins to be registered to listen for messages between the host and the published app","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Registry/CordovaPluginRegistry.Spec.js","id":"mn5refndot","path":"Services/CordovaPlugin/Registry"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"finding plugins to be registered within a namespace","status":"pass","exception":{},"rawTitle":"finding plugins to be registered within a namespace","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"14bzjwiuvn1-6508jc32ez-144l2a0gkul","code":"() => {\r\n            pluginsToRegister = Services.findAllDecoratedClasses(TestData);\r\n        }","duration":0},{"title":"'2' plugins should be returned to be registered","status":"pass","exception":{},"rawTitle":"'2' plugins should be returned to be registered","description":"","docString":"","values":[2],"ruleViolations":[],"type":"Then","sequence":2,"id":"14bzjwiuvn1-6508jc32ez-shl6t3yyvf","code":"() => {\r\n            pluginsToRegister.length.should.be.eql(stepContext.values[0]);\r\n        }","duration":0},{"title":"Plugin1 should be a plugin to be registered","status":"pass","exception":{},"rawTitle":"Plugin1 should be a plugin to be registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"14bzjwiuvn1-6508jc32ez-v8iucsy56d","code":"() => {\r\n            pluginsToRegister.indexOf(Plugin1).should.be.eql(0);\r\n        }","duration":1},{"title":"Plugin2 should be a plugin to be registered","status":"pass","exception":{},"rawTitle":"Plugin2 should be a plugin to be registered","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"14bzjwiuvn1-6508jc32ez-12z52vxicd","code":"() => {\r\n            pluginsToRegister.indexOf(Plugin2).should.be.eql(1);\r\n        }","duration":1},{"title":"service name is set to 'plugin1'","status":"pass","exception":{},"rawTitle":"service name is set to 'plugin1'","description":"","docString":"","values":["plugin1"],"ruleViolations":[],"type":"and","sequence":5,"id":"14bzjwiuvn1-6508jc32ez-ggxmnss6bk","code":"() => {\r\n            pluginsToRegister[0][Services.serviceNameKey].should.be.eql(stepContext.values[0]);\r\n        }","duration":1},{"title":"service name is set correctly on 'plugin2'","status":"pass","exception":{},"rawTitle":"service name is set correctly on 'plugin2'","description":"","docString":"","values":["plugin2"],"ruleViolations":[],"type":"and","sequence":6,"id":"14bzjwiuvn1-6508jc32ez-ggol05l2ww","code":"() => {\r\n            pluginsToRegister[1][Services.serviceNameKey].should.be.eql(stepContext.values[0]);\r\n        }","duration":1},{"title":"registration is set correctly on Plugin1","status":"pass","exception":{},"rawTitle":"registration is set correctly on Plugin1","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"14bzjwiuvn1-6508jc32ez-2ic0au4897","code":"() => {\r\n            pluginsToRegister[0][Services.registrationKey].should.be.eql({ request: Plugin1Request });\r\n        }","duration":0},{"title":"registration is set correctly on Plugin2","status":"pass","exception":{},"rawTitle":"registration is set correctly on Plugin2","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"14bzjwiuvn1-6508jc32ez-p3pz2ft58r","code":"() => {\r\n            pluginsToRegister[1][Services.registrationKey].should.be.eql({ request: Plugin2Request });\r\n        }","duration":0}],"title":"Find all plugins to be registered","description":"","tags":[],"sequence":1,"id":"14bzjwiuvn1-6508jc32ez"}],"title":"Automatically register plugin services that are decorated with @registerCordovaPlugin","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Registry/RegisterCordovaPlugins.Spec.js","id":"14bzjwiuvn1","path":"Services/CordovaPlugin/Registry"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a known set of packager profiles is returned","status":"pass","exception":{},"rawTitle":"a known set of packager profiles is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"xhn40pr2st-tt8dsfao43-jks3kjvetc","code":"() => {\r\n            testProfiles = {\r\n                \"docServerTestProfiles\": [\r\n                    {\r\n                        \"name\": \"Prod\",\r\n                        \"settings\": {\r\n                            \"playerResourcesEndpoint\": \"https://paplayercdn.azureedge.net\",\r\n                            \"docServerEnvironment\": \"Production\"\r\n                        },\r\n                        \"variants\": [\r\n                            {\r\n                                \"name\": \"Global\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"US First Release\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://preview.create.powerapps.com\"\r\n                                }\r\n                            },\r\n                            {\r\n                                \"name\": \"US\",\r\n                                \"settings\": {\r\n                                    \"docServerEndpoint\": \"https://us.create.powerapps.com\"\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            };\r\n            getTestProfilesAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getTestProfilesAsync.name)\r\n                .callsFake(() => WinJS.Promise.wrap(testProfiles));\r\n        }","duration":2},{"title":"the packager profiles are returned","status":"pass","exception":{},"rawTitle":"the packager profiles are returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"xhn40pr2st-tt8dsfao43-jkjcissu9s","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const debugService = new Services_1.DebugService();\r\n            packagerProfiles = yield debugService.getPackagerProfilesAsync();\r\n        })","duration":1},{"title":"the expected number of packager profiles should be returned","status":"pass","exception":{},"rawTitle":"the expected number of packager profiles should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"xhn40pr2st-tt8dsfao43-jko9bonj34","code":"() => {\r\n            packagerProfiles.length.should.eql(testProfiles.docServerTestProfiles[0].variants.length + 1); // plus one for the default value prepended\r\n        }","duration":0},{"title":"the packager profile name should match the expected names","status":"pass","exception":{},"rawTitle":"the packager profile name should match the expected names","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xhn40pr2st-tt8dsfao43-12oikj358i5","code":"() => {\r\n            const expectedNames = [\r\n                \"Default\",\r\n                \"Prod - Global\",\r\n                \"Prod - US First Release\",\r\n                \"Prod - US\"\r\n            ];\r\n            packagerProfiles.forEach((profile, index) => profile.name.should.eql(expectedNames[index]));\r\n        }","duration":0},{"title":"the packager profile properties should match the expected values","status":"pass","exception":{},"rawTitle":"the packager profile properties should match the expected values","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"xhn40pr2st-tt8dsfao43-a52e5ogd0g","code":"() => {\r\n            const profile = packagerProfiles[1];\r\n            const expectedProfileSet = testProfiles.docServerTestProfiles[0];\r\n            const expectedProfile = expectedProfileSet.variants[0];\r\n            profile.playerResourcesEndpoint.should.eql(expectedProfileSet.settings.playerResourcesEndpoint);\r\n            profile.docServerEnvironment.should.eql(expectedProfileSet.settings.docServerEnvironment);\r\n            profile.docServerEndpoint.should.eql(expectedProfile.settings.docServerEndpoint);\r\n        }","duration":0}],"title":"Get the available packager profiles","description":"","tags":[],"sequence":1,"id":"xhn40pr2st-tt8dsfao43"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a constant packager profile","status":"pass","exception":{},"rawTitle":"a constant packager profile","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"xhn40pr2st-falmuleq1f-lr0yri5jfk","code":"() => {\r\n            testProfile = {\r\n                name: \"Test\",\r\n                docServerEnvironment: \"docServerEnvironment\",\r\n                playerResourcesEndpoint: \"playerResourcesEndpoint\",\r\n                docServerEndpoint: \"docServerEndpoint\"\r\n            };\r\n            setActivePackagerProfileStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.setActivePackagerProfile.name).returns(true);\r\n        }","duration":1},{"title":"the packager profile is changed","status":"pass","exception":{},"rawTitle":"the packager profile is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"xhn40pr2st-falmuleq1f-jknd9iov0w","code":"() => {\r\n            const debugService = new Services_1.DebugService();\r\n            debugService.setActivePackagerProfile(testProfile);\r\n        }","duration":0},{"title":"setActivePackagerProfile stub should be called once","status":"pass","exception":{},"rawTitle":"setActivePackagerProfile stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"xhn40pr2st-falmuleq1f-66ojplg9yt","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            setActivePackagerProfileStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the expected values","status":"pass","exception":{},"rawTitle":"it should be called with the expected values","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"xhn40pr2st-falmuleq1f-unh08ab5xv","code":"() => {\r\n            setActivePackagerProfileStub.calledWith(testProfile.docServerEndpoint, testProfile.docServerEnvironment, testProfile.playerResourcesEndpoint).should.be.eql(true);\r\n        }","duration":0}],"title":"Change the active packager profile","description":"","tags":[],"sequence":2,"id":"xhn40pr2st-falmuleq1f"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the environment is changed","status":"pass","exception":{},"rawTitle":"the environment is changed","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xhn40pr2st-cnan04f3i8-15qucrt91xc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            switchToEnvironmentAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.switchToEnvironmentAsync.name).returns(Promise.resolve());\r\n            const debugService = new Services_1.DebugService();\r\n            yield debugService.setActiveEndpointAsync(testEnvironment);\r\n        })","duration":1},{"title":"switchToEnvironmentAsyncStub stub should be called once","status":"pass","exception":{},"rawTitle":"switchToEnvironmentAsyncStub stub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xhn40pr2st-cnan04f3i8-lr39j7n0w0","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            switchToEnvironmentAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0},{"title":"it should be called with the expected values","status":"pass","exception":{},"rawTitle":"it should be called with the expected values","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"xhn40pr2st-cnan04f3i8-unh08ab5xv","code":"() => {\r\n            switchToEnvironmentAsyncStub.calledWith(testEnvironment).should.be.eql(true);\r\n        }","duration":0}],"title":"Change the active environment endpoint","description":"","tags":[],"sequence":3,"id":"xhn40pr2st-cnan04f3i8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the evironment enpoints are fetched","status":"pass","exception":{},"rawTitle":"the evironment enpoints are fetched","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"xhn40pr2st-16881bgg4hv-o53hisrk0z","code":"() => {\r\n            getEnvironmentEndpointsStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getEnvironmentEndpoints.name).returns(Promise.resolve([]));\r\n            const debugService = new Services_1.DebugService();\r\n            debugService.getEndpointNames();\r\n        }","duration":0},{"title":"getEnvironmentEndpointsStub should be called once","status":"pass","exception":{},"rawTitle":"getEnvironmentEndpointsStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"xhn40pr2st-16881bgg4hv-lqzmns8qv4","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            getEnvironmentEndpointsStub.calledOnce.should.be.true;\r\n        }","duration":0}],"title":"Get the debug environment endpoint names","description":"","tags":[],"sequence":4,"id":"xhn40pr2st-16881bgg4hv"}],"title":"Provide a service to retrieve and change debug options","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/DebugService.Spec.js","id":"xhn40pr2st","path":"Services"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":39,"failedCount":0,"pendingCount":0,"totalCount":39,"totalRuleViolations":0,"duration":29,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an active plan","status":"pass","exception":{},"rawTitle":"the user has an active plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-16b9d2arw2o-16b2g9hs7v4","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.enrollAsync.name);\r\n            loadAfterEnrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.loadAfterEnroll.name);\r\n            enrollRuntimeStub.returns(true);\r\n            trackMetricStub = new TrackMetricStub_1.TrackMetricStub();\r\n            trackMetricStub.setup();\r\n        }","duration":5},{"title":"calling enroll","status":"pass","exception":{},"rawTitle":"calling enroll","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-16b9d2arw2o-krvh6t1kwt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.enrollAsync();\r\n        })","duration":1},{"title":"runtime enroll function should be called","status":"pass","exception":{},"rawTitle":"runtime enroll function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"tscg6kh99p-16b9d2arw2o-86ect0mrnh","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"runtime enroll function should be called before load after enroll function is called","status":"pass","exception":{},"rawTitle":"runtime enroll function should be called before load after enroll function is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-16b9d2arw2o-jkmxablvc0","code":"() => {\r\n            enrollRuntimeStub.calledBefore(loadAfterEnrollRuntimeStub).should.be.eql(true);\r\n        }","duration":0},{"title":"runtime load after enroll function should be called","status":"pass","exception":{},"rawTitle":"runtime load after enroll function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"tscg6kh99p-16b9d2arw2o-v8iuigmhi5","code":"() => {\r\n            loadAfterEnrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"enroll should return that the user has a plan","status":"pass","exception":{},"rawTitle":"enroll should return that the user has a plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"tscg6kh99p-16b9d2arw2o-lrr7luwxi5","code":"() => {\r\n            result.should.be.eql(true);\r\n        }","duration":0}],"title":"Calling enroll for a user with an active plan","description":"","tags":[],"sequence":1,"id":"tscg6kh99p-16b9d2arw2o"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has without an active plan","status":"pass","exception":{},"rawTitle":"the user has without an active plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-16aze94f0u8-16b08mxsxsw","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.enrollAsync.name);\r\n            loadAfterEnrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.loadAfterEnroll.name);\r\n            enrollRuntimeStub.returns(false);\r\n            trackMetricStub = new TrackMetricStub_1.TrackMetricStub();\r\n            trackMetricStub.setup();\r\n        }","duration":4},{"title":"calling enroll","status":"pass","exception":{},"rawTitle":"calling enroll","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-16aze94f0u8-krvh6t1kwt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.enrollAsync();\r\n        })","duration":1},{"title":"track metric should be called once","status":"pass","exception":{},"rawTitle":"track metric should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-16aze94f0u8-2y57j1mkir","code":"() => {\r\n            trackMetricStub.trackMetricStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"runtime enroll function should be called","status":"pass","exception":{},"rawTitle":"runtime enroll function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-16aze94f0u8-86ect0mrnh","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"runtime load after enroll function should not be called","status":"pass","exception":{},"rawTitle":"runtime load after enroll function should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"tscg6kh99p-16aze94f0u8-o53gcd6z6r","code":"() => {\r\n            loadAfterEnrollRuntimeStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"enroll should return that the user does not have a plan","status":"pass","exception":{},"rawTitle":"enroll should return that the user does not have a plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"tscg6kh99p-16aze94f0u8-11qggpgrncd","code":"() => {\r\n            result.should.be.eql(false);\r\n        }","duration":0}],"title":"Calling enroll for a user without an active plan","description":"","tags":[],"sequence":2,"id":"tscg6kh99p-16aze94f0u8"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user does have an expired premium plan","status":"pass","exception":{},"rawTitle":"user does have an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-olxa1ym9k3-16b5k2xh2rk","code":"() => {\r\n            userHasPremiumPlanStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.hasExpiredPremiumPlan.name);\r\n            userHasPremiumPlanStub.returns(true);\r\n        }","duration":0},{"title":"checking user has an expired premium plan","status":"pass","exception":{},"rawTitle":"checking user has an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-olxa1ym9k3-17voyolzfmz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            userHasExpirePremiumPlan = enrollmentService.hasExpiredPremiumPlan();\r\n        })","duration":0},{"title":"runtime hasExpiredPremiumPlan should be called","status":"pass","exception":{},"rawTitle":"runtime hasExpiredPremiumPlan should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-olxa1ym9k3-f9tl690ibh","code":"() => {\r\n            userHasPremiumPlanStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should indicate the user has an expired premium plan","status":"pass","exception":{},"rawTitle":"should indicate the user has an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-olxa1ym9k3-dq5gt2q5id","code":"() => {\r\n            userHasExpirePremiumPlan.should.be.eql(true);\r\n        }","duration":0}],"title":"Checking a user has an expired premium plan","description":"","tags":[],"sequence":3,"id":"tscg6kh99p-olxa1ym9k3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user does not have an expired premium plan","status":"pass","exception":{},"rawTitle":"user does not have an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-w249n54ybf-mlfbxhdn03","code":"() => {\r\n            userHasPremiumPlanStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.hasExpiredPremiumPlan.name);\r\n            userHasPremiumPlanStub.returns(false);\r\n        }","duration":11},{"title":"checking user has an expired premium plan","status":"pass","exception":{},"rawTitle":"checking user has an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-w249n54ybf-17voyolzfmz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            userHasExpirePremiumPlan = enrollmentService.hasExpiredPremiumPlan();\r\n        })","duration":0},{"title":"runtime hasExpiredPremiumPlan should be called","status":"pass","exception":{},"rawTitle":"runtime hasExpiredPremiumPlan should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-w249n54ybf-f9tl690ibh","code":"() => {\r\n            userHasPremiumPlanStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should indicate the user does not have an expired premium plan","status":"pass","exception":{},"rawTitle":"should indicate the user does not have an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-w249n54ybf-mlfi5jt5c5","code":"() => {\r\n            userHasExpirePremiumPlan.should.be.eql(false);\r\n        }","duration":0}],"title":"Checking a user does not have an expired premium plan","description":"","tags":[],"sequence":4,"id":"tscg6kh99p-w249n54ybf"},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an Active plan","status":"pass","exception":{},"rawTitle":"the user has an <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-7nu6e76i68-12387zi82p1","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkEnrollmentPlanAsync.name);\r\n            enrollRuntimeStub.returns(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0},{"title":"calling an API checkEnrollmentPlanAsync to get the enrollment status","status":"pass","exception":{},"rawTitle":"calling an API checkEnrollmentPlanAsync to get the enrollment status","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-7nu6e76i68-muia3qdfod","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.checkEnrollmentPlanAsync();\r\n        })","duration":0},{"title":"runtime check enroll plan function should be called","status":"pass","exception":{},"rawTitle":"runtime check enroll plan function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-7nu6e76i68-jkotjmzqu8","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"check enroll status API should return true","status":"pass","exception":{},"rawTitle":"check enroll status API should return <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-7nu6e76i68-yt0patxuql","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["userPlan","apiResult"],["Active","true"],["Non-Active","false"],["ExpiredPremium","false"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an Active plan","status":"pass","exception":{},"rawTitle":"the user has an <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-7nu6e76i68-12387zi82p1","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkEnrollmentPlanAsync.name);\r\n            enrollRuntimeStub.returns(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0},{"title":"calling an API checkEnrollmentPlanAsync to get the enrollment status","status":"pass","exception":{},"rawTitle":"calling an API checkEnrollmentPlanAsync to get the enrollment status","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-7nu6e76i68-muia3qdfod","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.checkEnrollmentPlanAsync();\r\n        })","duration":0},{"title":"runtime check enroll plan function should be called","status":"pass","exception":{},"rawTitle":"runtime check enroll plan function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-7nu6e76i68-jkotjmzqu8","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"check enroll status API should return true","status":"pass","exception":{},"rawTitle":"check enroll status API should return <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-7nu6e76i68-yt0patxuql","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0}],"example":{"userPlan":"Active","apiResult":true},"title":"Calling an API to check Enrollment status for a user","sequence":1,"id":"tscg6kh99p-7nu6e76i68"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an Non-Active plan","status":"pass","exception":{},"rawTitle":"the user has an <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-7nu6e76i68-16b4v90lrv4","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkEnrollmentPlanAsync.name);\r\n            enrollRuntimeStub.returns(scenarioOutlineContext.example.apiResult);\r\n        }","duration":1},{"title":"calling an API checkEnrollmentPlanAsync to get the enrollment status","status":"pass","exception":{},"rawTitle":"calling an API checkEnrollmentPlanAsync to get the enrollment status","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-7nu6e76i68-muia3qdfod","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.checkEnrollmentPlanAsync();\r\n        })","duration":0},{"title":"runtime check enroll plan function should be called","status":"pass","exception":{},"rawTitle":"runtime check enroll plan function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-7nu6e76i68-jkotjmzqu8","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"check enroll status API should return false","status":"pass","exception":{},"rawTitle":"check enroll status API should return <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-7nu6e76i68-h2ggsfi9or","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0}],"example":{"userPlan":"Non-Active","apiResult":false},"title":"Calling an API to check Enrollment status for a user","sequence":2,"id":"tscg6kh99p-7nu6e76i68"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has an ExpiredPremium plan","status":"pass","exception":{},"rawTitle":"the user has an <userPlan> plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-7nu6e76i68-gg6rvjtcaz","code":"() => {\r\n            enrollRuntimeStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.checkEnrollmentPlanAsync.name);\r\n            enrollRuntimeStub.returns(scenarioOutlineContext.example.apiResult);\r\n        }","duration":0},{"title":"calling an API checkEnrollmentPlanAsync to get the enrollment status","status":"pass","exception":{},"rawTitle":"calling an API checkEnrollmentPlanAsync to get the enrollment status","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-7nu6e76i68-muia3qdfod","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            result = yield enrollmentService.checkEnrollmentPlanAsync();\r\n        })","duration":0},{"title":"runtime check enroll plan function should be called","status":"pass","exception":{},"rawTitle":"runtime check enroll plan function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-7nu6e76i68-jkotjmzqu8","code":"() => {\r\n            enrollRuntimeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"check enroll status API should return false","status":"pass","exception":{},"rawTitle":"check enroll status API should return <apiResult>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-7nu6e76i68-h2ggsfi9or","code":"() => {\r\n            result.should.be.eql(scenarioOutlineContext.example.apiResult);\r\n        }","duration":1}],"example":{"userPlan":"ExpiredPremium","apiResult":false},"title":"Calling an API to check Enrollment status for a user","sequence":3,"id":"tscg6kh99p-7nu6e76i68"}],"title":"Calling an API to check Enrollment status for a user","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user does have a premium plan","status":"pass","exception":{},"rawTitle":"user does have a premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-16b9aal017k-10s9qi7posj","code":"() => {\r\n            userHasPremiumPlanStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.hasActivePremiumPlan.name);\r\n            userHasPremiumPlanStub.returns(true);\r\n        }","duration":1},{"title":"checking user has a premium plan","status":"pass","exception":{},"rawTitle":"checking user has a premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-16b9aal017k-16l0b8q5qy3","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            userHasPremium = enrollmentService.hasActivePremiumPlan();\r\n        })","duration":0},{"title":"runtime hasExpiredPremiumPlan should be called","status":"pass","exception":{},"rawTitle":"runtime hasExpiredPremiumPlan should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-16b9aal017k-f9tl690ibh","code":"() => {\r\n            userHasPremiumPlanStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should indicate the user has an expired premium plan","status":"pass","exception":{},"rawTitle":"should indicate the user has an expired premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"tscg6kh99p-16b9aal017k-dq5gt2q5id","code":"() => {\r\n            userHasPremium.should.be.eql(true);\r\n        }","duration":0}],"title":"Checking a user has a premium plan","description":"","tags":[],"sequence":6,"id":"tscg6kh99p-16b9aal017k"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"user does not have a premium plan","status":"pass","exception":{},"rawTitle":"user does not have a premium plan","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"tscg6kh99p-x6uznqd3lv-8agacy5fqd","code":"() => {\r\n            upgradeOrRenewPlanStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.upgradeOrRenewPlanAsync.name);\r\n        }","duration":1},{"title":"the user tries to upgrade or renew a trial","status":"pass","exception":{},"rawTitle":"the user tries to upgrade or renew a trial","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"tscg6kh99p-x6uznqd3lv-11lb8kl020w","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let enrollmentService = new Services_1.EnrollmentService();\r\n            enrollmentService.upgradeOrRenewPlanAsync();\r\n        })","duration":1},{"title":"runtime upgradeOrRenewPlanAsync should be called","status":"pass","exception":{},"rawTitle":"runtime upgradeOrRenewPlanAsync should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"tscg6kh99p-x6uznqd3lv-jkppjx1qzk","code":"() => {\r\n            upgradeOrRenewPlanStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"User upgrades or renews trial","description":"","tags":[],"sequence":7,"id":"tscg6kh99p-x6uznqd3lv"}],"title":"Enrollment of a User","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Enrollment/EnrollmentService.Spec.js","id":"tscg6kh99p","path":"Services/Enrollment"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"linking player resources to installed app with 'testresourcefolder' and 'testappfolder'"}],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"linking player resources to installed app with 'testresourcefolder' and 'testappfolder'","status":"pass","exception":{},"rawTitle":"linking player resources to installed app with 'testresourcefolder' and 'testappfolder'","description":"","docString":"","values":["testresourcefolder","testappfolder"],"ruleViolations":[],"type":"When","sequence":1,"id":"15wfp4we8gj-p4pw1w7phf-ckwxxowcuz","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield installAppRepository.linkResourceToAppAsync(stepContext.values[0], stepContext.values[1]);\r\n        })","duration":1},{"title":"should call linkResourceToAppAsync method once","status":"pass","exception":{},"rawTitle":"should call linkResourceToAppAsync method once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"15wfp4we8gj-p4pw1w7phf-thg2lp6ynv","code":"() => {\r\n            linkOrCopyFoldersAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"linkResourceToAppAsync should be called with the following parameters: 'testresourcefolder' and 'testappfolder'","status":"pass","exception":{},"rawTitle":"linkResourceToAppAsync should be called with the following parameters: 'testresourcefolder' and 'testappfolder'","description":"","docString":"","values":["testresourcefolder","testappfolder"],"ruleViolations":[],"type":"and","sequence":3,"id":"15wfp4we8gj-p4pw1w7phf-ggv71n92u8","code":"() => {\r\n            linkOrCopyFoldersAsyncStub.calledWith(stepContext.values[0], stepContext.values[1]).should.be.eql(true);\r\n        }","duration":0}],"title":"Creating a hard link between files in resource folder and files in installed app folder","description":"","tags":[],"sequence":1,"id":"15wfp4we8gj-p4pw1w7phf"}],"title":"Installing a PowerApp on an iOS device","description":"Published app needs to be installed on a device to optimize performance and support offline mode.\nOn iOS devices, creating a hard link between player resource folder and installed app folder allows the app to use the files in\nplayer resource folder without having to copy them over to the installed app folder which saves installation time.\nFor other platforms, we use URL redirect to achive the same result.","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.ios.Spec.js","id":"15wfp4we8gj","path":"Services/Install"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":2,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[{"rule":10,"title":"getting the appIds"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the appIds","status":"pass","exception":{},"rawTitle":"getting the appIds","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr16uvh6o0-lqx4dx6yn4-6r42n6sgph","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            result = yield installAppRepository.getAllInstalledAppIdsAsync();\r\n        })","duration":0},{"title":"we should get only the installed appIds","status":"pass","exception":{},"rawTitle":"we should get only the installed appIds","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr16uvh6o0-lqx4dx6yn4-a53yyxestc","code":"() => {\r\n            result.length.should.be.eql(1);\r\n            result[0].should.be.eql(firstAppId);\r\n        }","duration":1}],"title":"Getting the installed AppIds when offline","description":"","tags":[],"sequence":1,"id":"lr16uvh6o0-lqx4dx6yn4"},{"type":"Scenario","ruleViolations":[{"rule":10,"title":"getting the appIds"}],"statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the appIds","status":"pass","exception":{},"rawTitle":"getting the appIds","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"lr16uvh6o0-h2gg0m3k8r-6r42n6sgph","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            result = yield installAppRepository.getAllInstalledAppInfoAsync();\r\n        })","duration":1},{"title":"we should get only the installed appIds","status":"pass","exception":{},"rawTitle":"we should get only the installed appIds","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"lr16uvh6o0-h2gg0m3k8r-a53yyxestc","code":"() => {\r\n            result.length.should.be.eql(1);\r\n            result[0].appId.should.be.eql(firstAppId);\r\n        }","duration":0}],"title":"Getting the installed App Infos when offline","description":"","tags":[],"sequence":2,"id":"lr16uvh6o0-h2gg0m3k8r"}],"title":"Getting installed App Ids when offline","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","id":"lr16uvh6o0","path":"Services/Install"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":226,"failedCount":0,"pendingCount":0,"totalCount":226,"totalRuleViolations":0,"duration":237,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is connected to the network","status":"pass","exception":{},"rawTitle":"the app is connected to the network","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-rwzqh2apgb-q2ll492v5f","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"getting the folder path for notInstalled","status":"pass","exception":{},"rawTitle":"getting the folder path for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-rwzqh2apgb-v8iu0jnd1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getAppFolderFullPathStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getAppFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            installedAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: scenarioOutlineContext.example.folderName,\r\n                folderNumber: 0,\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                playerResourceHash: \"hash\",\r\n                version: \"\",\r\n                sienaVersion: \"\",\r\n                platformSpecificResourcesVersion: \"\",\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            appFolderPath = yield installService.getInstalledAppFolderPathAsync(installedAppInfo);\r\n        })","duration":8},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-rwzqh2apgb-17qoto5rh43","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getAppFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-rwzqh2apgb-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(appFolderPath);\r\n            }\r\n            else {\r\n                appFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appId","folderName","status","shouldGetFolderPath","expectedResult"],["notInstalled","folder0","0","false","null"],["started","folder1","1","false","null"],["completed","folder2","2","true","file://2"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is connected to the network","status":"pass","exception":{},"rawTitle":"the app is connected to the network","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-rwzqh2apgb-q2ll492v5f","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"getting the folder path for notInstalled","status":"pass","exception":{},"rawTitle":"getting the folder path for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-rwzqh2apgb-v8iu0jnd1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getAppFolderFullPathStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getAppFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            installedAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: scenarioOutlineContext.example.folderName,\r\n                folderNumber: 0,\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                playerResourceHash: \"hash\",\r\n                version: \"\",\r\n                sienaVersion: \"\",\r\n                platformSpecificResourcesVersion: \"\",\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            appFolderPath = yield installService.getInstalledAppFolderPathAsync(installedAppInfo);\r\n        })","duration":8},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-rwzqh2apgb-17qoto5rh43","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getAppFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-rwzqh2apgb-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(appFolderPath);\r\n            }\r\n            else {\r\n                appFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"appId":"notInstalled","folderName":"folder0","status":0,"shouldGetFolderPath":false,"expectedResult":null},"title":"Get the folder path the app is installed in","sequence":1,"id":"4r6gkw2qyt-rwzqh2apgb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is connected to the network","status":"pass","exception":{},"rawTitle":"the app is connected to the network","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-rwzqh2apgb-q2ll492v5f","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"getting the folder path for started","status":"pass","exception":{},"rawTitle":"getting the folder path for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-rwzqh2apgb-ys8h5tcvc5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getAppFolderFullPathStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getAppFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            installedAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: scenarioOutlineContext.example.folderName,\r\n                folderNumber: 0,\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                playerResourceHash: \"hash\",\r\n                version: \"\",\r\n                sienaVersion: \"\",\r\n                platformSpecificResourcesVersion: \"\",\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            appFolderPath = yield installService.getInstalledAppFolderPathAsync(installedAppInfo);\r\n        })","duration":1},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-rwzqh2apgb-17qoto5rh43","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getAppFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-rwzqh2apgb-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(appFolderPath);\r\n            }\r\n            else {\r\n                appFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"appId":"started","folderName":"folder1","status":1,"shouldGetFolderPath":false,"expectedResult":null},"title":"Get the folder path the app is installed in","sequence":2,"id":"4r6gkw2qyt-rwzqh2apgb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app is connected to the network","status":"pass","exception":{},"rawTitle":"the app is connected to the network","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-rwzqh2apgb-q2ll492v5f","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"getting the folder path for completed","status":"pass","exception":{},"rawTitle":"getting the folder path for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-rwzqh2apgb-17nibuq0r77","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getAppFolderFullPathStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getAppFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            installedAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: scenarioOutlineContext.example.folderName,\r\n                folderNumber: 0,\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                playerResourceHash: \"hash\",\r\n                version: \"\",\r\n                sienaVersion: \"\",\r\n                platformSpecificResourcesVersion: \"\",\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            appFolderPath = yield installService.getInstalledAppFolderPathAsync(installedAppInfo);\r\n        })","duration":1},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-rwzqh2apgb-17qoto5rh43","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getAppFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path file://2 is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-rwzqh2apgb-jkr61kxsg0","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(appFolderPath);\r\n            }\r\n            else {\r\n                appFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"appId":"completed","folderName":"folder2","status":2,"shouldGetFolderPath":true,"expectedResult":"file://2"},"title":"Get the folder path the app is installed in","sequence":3,"id":"4r6gkw2qyt-rwzqh2apgb"}],"title":"Get the folder path the app is installed in","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":9,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the folder path for notInstalled","status":"pass","exception":{},"rawTitle":"getting the folder path for <hash>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-330ludi76d-v8iu0jnd1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const playerResources = {\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                folder: scenarioOutlineContext.example.folderName\r\n            };\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(playerResources);\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getPlayerResourcesFolderFullPathStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            getFullFolderPathAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            playerResourcesFolderPath = yield installService.getStaticContentFolderPathAsync(scenarioOutlineContext.example.hash);\r\n        })","duration":2},{"title":"the repository is called to get the player resources information","status":"pass","exception":{},"rawTitle":"the repository is called to get the player resources information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-330ludi76d-j1pu6a6yt9","code":"() => {\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(false);\r\n            }\r\n            else {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(true);\r\n                getPlayerResourcesStub.calledWith(scenarioOutlineContext.example.hash).should.be.eql(true);\r\n            }\r\n        }","duration":0},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-330ludi76d-sesn7ar4bk","code":"() => {\r\n            getPlayerResourcesFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getPlayerResourcesFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-330ludi76d-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(playerResourcesFolderPath);\r\n            }\r\n            else {\r\n                playerResourcesFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["hash","folderName","status","useSharedPlayerResources","shouldGetFolderPath","expectedResult"],["notInstalled","folder0","0","false","false","null"],["started","folder1","1","false","false","null"],["completed","folder2","2","false","true","file://2"],["null","","","true","false","file://playerResources"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the folder path for notInstalled","status":"pass","exception":{},"rawTitle":"getting the folder path for <hash>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-330ludi76d-v8iu0jnd1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const playerResources = {\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                folder: scenarioOutlineContext.example.folderName\r\n            };\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(playerResources);\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getPlayerResourcesFolderFullPathStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            getFullFolderPathAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            playerResourcesFolderPath = yield installService.getStaticContentFolderPathAsync(scenarioOutlineContext.example.hash);\r\n        })","duration":2},{"title":"the repository is called to get the player resources information","status":"pass","exception":{},"rawTitle":"the repository is called to get the player resources information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-330ludi76d-j1pu6a6yt9","code":"() => {\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(false);\r\n            }\r\n            else {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(true);\r\n                getPlayerResourcesStub.calledWith(scenarioOutlineContext.example.hash).should.be.eql(true);\r\n            }\r\n        }","duration":0},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-330ludi76d-sesn7ar4bk","code":"() => {\r\n            getPlayerResourcesFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getPlayerResourcesFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-330ludi76d-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(playerResourcesFolderPath);\r\n            }\r\n            else {\r\n                playerResourcesFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"hash":"notInstalled","folderName":"folder0","status":0,"useSharedPlayerResources":false,"shouldGetFolderPath":false,"expectedResult":null},"title":"Get the folder path the static content is installed in","sequence":1,"id":"4r6gkw2qyt-330ludi76d"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the folder path for started","status":"pass","exception":{},"rawTitle":"getting the folder path for <hash>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-330ludi76d-ys8h5tcvc5","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const playerResources = {\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                folder: scenarioOutlineContext.example.folderName\r\n            };\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(playerResources);\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getPlayerResourcesFolderFullPathStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            getFullFolderPathAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            playerResourcesFolderPath = yield installService.getStaticContentFolderPathAsync(scenarioOutlineContext.example.hash);\r\n        })","duration":2},{"title":"the repository is called to get the player resources information","status":"pass","exception":{},"rawTitle":"the repository is called to get the player resources information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-330ludi76d-j1pu6a6yt9","code":"() => {\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(false);\r\n            }\r\n            else {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(true);\r\n                getPlayerResourcesStub.calledWith(scenarioOutlineContext.example.hash).should.be.eql(true);\r\n            }\r\n        }","duration":0},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-330ludi76d-sesn7ar4bk","code":"() => {\r\n            getPlayerResourcesFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getPlayerResourcesFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path null is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-330ludi76d-md8ti2h3s5","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(playerResourcesFolderPath);\r\n            }\r\n            else {\r\n                playerResourcesFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"hash":"started","folderName":"folder1","status":1,"useSharedPlayerResources":false,"shouldGetFolderPath":false,"expectedResult":null},"title":"Get the folder path the static content is installed in","sequence":2,"id":"4r6gkw2qyt-330ludi76d"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the folder path for completed","status":"pass","exception":{},"rawTitle":"getting the folder path for <hash>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-330ludi76d-17nibuq0r77","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const playerResources = {\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                folder: scenarioOutlineContext.example.folderName\r\n            };\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(playerResources);\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getPlayerResourcesFolderFullPathStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            getFullFolderPathAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            playerResourcesFolderPath = yield installService.getStaticContentFolderPathAsync(scenarioOutlineContext.example.hash);\r\n        })","duration":2},{"title":"the repository is called to get the player resources information","status":"pass","exception":{},"rawTitle":"the repository is called to get the player resources information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-330ludi76d-j1pu6a6yt9","code":"() => {\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(false);\r\n            }\r\n            else {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(true);\r\n                getPlayerResourcesStub.calledWith(scenarioOutlineContext.example.hash).should.be.eql(true);\r\n            }\r\n        }","duration":0},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-330ludi76d-sesn7ar4bk","code":"() => {\r\n            getPlayerResourcesFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getPlayerResourcesFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path file://2 is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-330ludi76d-jkr61kxsg0","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(playerResourcesFolderPath);\r\n            }\r\n            else {\r\n                playerResourcesFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"hash":"completed","folderName":"folder2","status":2,"useSharedPlayerResources":false,"shouldGetFolderPath":true,"expectedResult":"file://2"},"title":"Get the folder path the static content is installed in","sequence":3,"id":"4r6gkw2qyt-330ludi76d"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the folder path for null","status":"pass","exception":{},"rawTitle":"getting the folder path for <hash>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-330ludi76d-a4qour5njx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const playerResources = {\r\n                status: Number(scenarioOutlineContext.example.status),\r\n                folder: scenarioOutlineContext.example.folderName\r\n            };\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(playerResources);\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            getPlayerResourcesFolderFullPathStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceFolderFullPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            getFullFolderPathAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(scenarioOutlineContext.example.expectedResult);\r\n            playerResourcesFolderPath = yield installService.getStaticContentFolderPathAsync(scenarioOutlineContext.example.hash);\r\n        })","duration":2},{"title":"the repository is called to get the player resources information","status":"pass","exception":{},"rawTitle":"the repository is called to get the player resources information","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-330ludi76d-j1pu6a6yt9","code":"() => {\r\n            if (scenarioOutlineContext.example.useSharedPlayerResources) {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(false);\r\n            }\r\n            else {\r\n                getPlayerResourcesStub.calledOnce.should.be.eql(true);\r\n                getPlayerResourcesStub.calledWith(scenarioOutlineContext.example.hash).should.be.eql(true);\r\n            }\r\n        }","duration":1},{"title":"the repository is called to get the folder path","status":"pass","exception":{},"rawTitle":"the repository is called to get the folder path","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-330ludi76d-sesn7ar4bk","code":"() => {\r\n            getPlayerResourcesFolderFullPathStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n            getPlayerResourcesFolderFullPathStub.calledWith(scenarioOutlineContext.example.folderName).should.be.eql(scenarioOutlineContext.example.shouldGetFolderPath);\r\n        }","duration":0},{"title":"the folder path file://playerResources is returned","status":"pass","exception":{},"rawTitle":"the folder path <expectedResult> is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-330ludi76d-6ejeb3x6s3","code":"() => {\r\n            if (scenarioOutlineContext.example.expectedResult === null) {\r\n                should.not.exist(playerResourcesFolderPath);\r\n            }\r\n            else {\r\n                playerResourcesFolderPath.should.be.eql(scenarioOutlineContext.example.expectedResult);\r\n            }\r\n        }","duration":0}],"example":{"hash":null,"folderName":"","status":"","useSharedPlayerResources":true,"shouldGetFolderPath":false,"expectedResult":"file://playerResources"},"title":"Get the folder path the static content is installed in","sequence":4,"id":"4r6gkw2qyt-330ludi76d"}],"title":"Get the folder path the static content is installed in","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":171,"failedCount":0,"pendingCount":0,"totalCount":171,"totalRuleViolations":0,"duration":157,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-h1oe0hdld1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":22},{"title":"the installed app info is obtained from the repository for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-12by22godit","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-r2i5t90ybx","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-15vnjvud21v","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-dhytu8joyl","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-jkm8ianns0","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-jklzrcne3k","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-jklyjz4bwg","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-ol3u021drx","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-10k3aifo3sl","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-h1o7mviipn","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-itj7xdj3ut","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-8hg6rd0zj4","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-12ry9jxx6cz","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-f0a9jhqxnn","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-h1oe1fbnad","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":1},{"title":"shared resource files are downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-65099trb0l","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-tjwhpf5nal","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["appId","appInstallStatus","playerResourcesInstallStatus","appVersion","installVersion","appSienaVersion","installSienaVersion","platformSpecificResourcesVersion","appInstallNeeded","appUpdateNeeded","playerResourcesInstallNeeded","appPackageResourcesKind","downloadFilesAsyncNeeded","numberOfEventsDispatched"],["appAlreadyInstalled","2","2","version0","version0","version1","version1","3.18081.0","false","false","false","null","false","0"],["appNotInstalled","0","0","version0","","version1","","3.18081.0","true","false","true","null","false","4"],["appNotInstalledResourcesInstalled","0","2","version0","","version1","","3.18081.0","true","false","false","null","false","4"],["appNotInstalledResourcesStarted","0","1","version0","","version1","","3.18081.0","true","false","true","null","false","4"],["appStartedInstall","1","2","version0","version0","version1","version1","3.18081.0","true","false","false","null","false","4"],["appUpdateNeeded","2","2","version0","version1","version2","version2","3.18081.0","true","true","false","null","false","4"],["appUpdateNeededSienaVersion","2","2","version0","version0","version1","version2","3.18081.0","true","true","false","null","false","4"],["appWithSharedResources","0","","version0","","version1","version2","3.18081.0","true","false","false","\"split\"","true","4"],["appWithSharedResourcesInstalledBy2.0.810","2","","version0","version0","version1","version1","2.0.810","true","true","false","\"split\"","true","4"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":24,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-h1oe0hdld1","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":22},{"title":"the installed app info is obtained from the repository for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-12by22godit","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-r2i5t90ybx","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-15vnjvud21v","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-dhytu8joyl","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-jkm8ianns0","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-jklzrcne3k","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-jklyjz4bwg","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-ol3u021drx","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-10k3aifo3sl","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-h1o7mviipn","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-itj7xdj3ut","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-8hg6rd0zj4","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-12ry9jxx6cz","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-f0a9jhqxnn","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-h1oe1fbnad","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":1},{"title":"shared resource files are downloaded for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-65099trb0l","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appAlreadyInstalled","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-tjwhpf5nal","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":1}],"example":{"appId":"appAlreadyInstalled","appInstallStatus":2,"playerResourcesInstallStatus":2,"appVersion":"version0","installVersion":"version0","appSienaVersion":"version1","installSienaVersion":"version1","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":false,"appUpdateNeeded":false,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":0},"title":"Install a published app","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app appNotInstalled","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-jknjnliyrc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":15},{"title":"the installed app info is obtained from the repository for appNotInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-jklr7y8hs0","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appNotInstalled","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-15m4ddvgqqd","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appNotInstalled","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-x0dopq6lyd","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appNotInstalled","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-4de7wwxpnh","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":1},{"title":"the installed app index is updated for appNotInstalled","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-jkow41pxj4","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appNotInstalled","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-jkor146v7k","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appNotInstalled","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-jkll8yjkfk","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appNotInstalled","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-p215zhm2xv","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appNotInstalled","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-17dz5o3j9qb","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appNotInstalled","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-143sx4ugexh","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appNotInstalled","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-h1o850z43n","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appNotInstalled","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-itj78dykyl","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appNotInstalled","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-jkpn3a419c","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appNotInstalled","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-jknpjrdx9s","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the installed app info is returned for appNotInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-jkq7vza75s","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appNotInstalled","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-r2i5u4un0t","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appNotInstalled","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-jkppv8f5vk","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appNotInstalled","appInstallStatus":0,"playerResourcesInstallStatus":0,"appVersion":"version0","installVersion":"","appSienaVersion":"version1","installSienaVersion":"","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":false,"playerResourcesInstallNeeded":true,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"installing the app appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-tgo1esssvx","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":10},{"title":"the installed app info is obtained from the repository for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-xgdv06n2ed","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-kldv3xjpub","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-itj1to3m77","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-jklofzyngg","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-17niih9b72l","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-15vnjqnnrgj","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-v8iuigmhi5","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-jkpcpvgyow","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-jkoqpstvr4","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-rot2lb6qej","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-jkrrmkfeyo","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-md8sr70fhp","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-ys8a45vay3","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the code copy scenario is tracked for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-65097dplkt","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-v8ive1tff9","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-kldv5tftoz","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appNotInstalledResourcesInstalled","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-1vr4di1g1h","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":1}],"example":{"appId":"appNotInstalledResourcesInstalled","appInstallStatus":0,"playerResourcesInstallStatus":2,"appVersion":"version0","installVersion":"","appSienaVersion":"version1","installSienaVersion":"","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":false,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"installing the app appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-jksj6jp6kg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":21},{"title":"the installed app info is obtained from the repository for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-jkkvizj1nk","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-143sqk5zwaj","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-jkqlarnnb4","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-jknirjczvk","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-12z0b9qymj","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the app is downloaded for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-jkrfnzuqsg","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-10k32v3f80r","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-12z0ec2mvv","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-jkq1mm6q68","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-jklxlbmum8","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-jkrhilalds","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-12ry9j47vob","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-v8iueou9st","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-86edu9i2o5","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-12z0b9qymj","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-jkk9ksrk1s","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appNotInstalledResourcesStarted","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-jkn39bb0e8","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appNotInstalledResourcesStarted","appInstallStatus":0,"playerResourcesInstallStatus":1,"appVersion":"version0","installVersion":"","appSienaVersion":"version1","installSienaVersion":"","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":false,"playerResourcesInstallNeeded":true,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"installing the app appStartedInstall","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-bwlb6nxebf","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":12},{"title":"the installed app info is obtained from the repository for appStartedInstall","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-16256rtxyzh","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appStartedInstall","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-4qkjfyr3n7","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appStartedInstall","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-mjqa8gqefp","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appStartedInstall","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-9fsdnw5q6r","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appStartedInstall","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-bwlb1h82yb","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appStartedInstall","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-19gnr272bh","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appStartedInstall","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-11l7s4euvb4","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appStartedInstall","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-gg0o8viyul","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appStartedInstall","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-11l24oseucg","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appStartedInstall","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-11l20lov6lc","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appStartedInstall","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-qouehf7e4r","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appStartedInstall","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-x6uxwbhqtv","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appStartedInstall","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-vf055btez7","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appStartedInstall","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-x6uyih83y3","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appStartedInstall","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-11l3m0mkicg","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appStartedInstall","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-x6v4evkmd1","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appStartedInstall","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-yjchopmcj9","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appStartedInstall","appInstallStatus":1,"playerResourcesInstallStatus":2,"appVersion":"version0","installVersion":"version0","appSienaVersion":"version1","installSienaVersion":"version1","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":false,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app appUpdateNeeded","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-bq3zjfotqt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":13},{"title":"the installed app info is obtained from the repository for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-jkk9d96m4g","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":1},{"title":"the package hash is retrieved for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-jkorbhl74w","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-jkir78rbkw","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-6ejlyx53il","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-jkqj3k6ok0","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-o53menpd6l","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the player resources information is retrieved for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-jkp1rq234w","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-jkjf1bnv28","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-17nibgccf23","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-jkobh089cw","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-jkoqi0rt8g","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-jkjerw5m2o","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-jkrcbvz23k","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-tgnww53rgr","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-jklfpzx1b4","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-jkmgzt63wg","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appUpdateNeeded","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-9y8zx7s9lf","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appUpdateNeeded","appInstallStatus":2,"playerResourcesInstallStatus":2,"appVersion":"version0","installVersion":"version1","appSienaVersion":"version2","installSienaVersion":"version2","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":true,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"installing the app appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-163u72p31ab","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":10},{"title":"the installed app info is obtained from the repository for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-jhoekdjbur","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-16b0j9rw474","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-6mq0vkfaez","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-12k4jraq6hf","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-rwzvlizsq5","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-a6fpac1097","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-oda43yq73v","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-1b5smxwa31","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-h9uw2r5qur","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":1},{"title":"the player resources index is updated for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-330n7n6qal","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-16b4vo3qsuo","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-6ilgt0r6m3","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-q54yarb9tn","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-q552r254vx","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-q553rd2cfp","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-163ucxoiict","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appUpdateNeededSienaVersion","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-16b814xztvk","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appUpdateNeededSienaVersion","appInstallStatus":2,"playerResourcesInstallStatus":2,"appVersion":"version0","installVersion":"version0","appSienaVersion":"version1","installSienaVersion":"version2","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":true,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":null,"downloadFilesAsyncNeeded":false,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":23,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app appWithSharedResources","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-a54rc4zbps","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":21},{"title":"the installed app info is obtained from the repository for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-a5a4sqhpls","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-12oidoz852b","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-fme4h1r6sd","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-ohny5vzecr","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-a55fwdvw6o","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-a54dpt15cw","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the player resources information is retrieved for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-a52ulujrb4","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":1},{"title":"the next static content folder number is retrieved for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-oho48ngu31","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-8iyw1jowp9","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-a52qoenqf4","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-fme2mkk47h","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appWithSharedResources","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-a5bsb3w6ao","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the download app scenario is tracked for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-a53lhb7j8g","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-a58coej36o","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appWithSharedResources","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-1802ystr1nh","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appWithSharedResources","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-he8qxo97yb","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appWithSharedResources","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-9d7cqp3fph","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appWithSharedResources","appInstallStatus":0,"playerResourcesInstallStatus":"","appVersion":"version0","installVersion":"","appSienaVersion":"version1","installSienaVersion":"version2","platformSpecificResourcesVersion":"3.18081.0","appInstallNeeded":true,"appUpdateNeeded":false,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":"split","downloadFilesAsyncNeeded":true,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":19,"failedCount":0,"pendingCount":0,"totalCount":19,"totalRuleViolations":0,"duration":17,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c00xg6njzp-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":1},{"title":"installing the app appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"installing the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c00xg6njzp-aw468m0qod","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateOpenAppDataCallCount = (scenarioOutlineContext.example.appInstallNeeded ? (scenarioOutlineContext.example.playerResourcesInstallNeeded ? 4 : 2) : 0);\r\n            generateNewInstallAppFolder = scenarioOutlineContext.example.appInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.appInstallStatus);\r\n            generateNewPlayerResourcesFolder = scenarioOutlineContext.example.playerResourcesInstallNeeded && Services_1.InstallStatus.Started !== Number(scenarioOutlineContext.example.playerResourcesInstallStatus);\r\n            appInfo.appId = scenarioOutlineContext.example.appId;\r\n            appInfo.version = scenarioOutlineContext.example.appVersion;\r\n            appInfo.sienaVersion = scenarioOutlineContext.example.appSienaVersion;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryInstalledAppInfo = {\r\n                appId: scenarioOutlineContext.example.appId,\r\n                folderName: nextAppFolderNumber.toString(),\r\n                folderNumber: nextAppFolderNumber,\r\n                status: Number(scenarioOutlineContext.example.appInstallStatus),\r\n                playerResourceHash: \"hash\",\r\n                version: scenarioOutlineContext.example.installVersion,\r\n                sienaVersion: scenarioOutlineContext.example.installSienaVersion,\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: \"\",\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = undefined;\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: nextPlayerResourcesFolderNumber,\r\n                folder: \"s\" + nextPlayerResourcesFolderNumber.toString(),\r\n                platformSpecificResourcesVersion: scenarioOutlineContext.example.platformSpecificResourcesVersion,\r\n                status: Number(scenarioOutlineContext.example.playerResourcesInstallStatus)\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            if (scenarioOutlineContext.example.sharedResources) {\r\n                packageManifest.downloadzip = false;\r\n            }\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                repositoryInstalledAppInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            scenarioGuid = trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":15},{"title":"the installed app info is obtained from the repository for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the installed app info is obtained from the repository for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c00xg6njzp-oxwgk2k9ts","code":"() => {\r\n            getInstalledAppInfoStub.calledOnce.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledTwice.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getInstalledAppInfoStub.calledWith(scenarioOutlineContext.example.appId);\r\n        }","duration":0},{"title":"the package hash is retrieved for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the package hash is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"4r6gkw2qyt-c00xg6njzp-oxuq6x308w","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            getPackageHashStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the previous installation is removed if needed for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the previous installation is removed if needed for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"4r6gkw2qyt-c00xg6njzp-8zbn41lmd","code":"() => {\r\n            deleteFolderStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appUpdateNeeded);\r\n            deleteFolderStub.calledWith(repositoryInstalledAppInfo.folderName).should.be.eql(scenarioOutlineContext.example.appUpdateNeeded);\r\n        }","duration":0},{"title":"the next app folder number is retrieved for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the next app folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"4r6gkw2qyt-c00xg6njzp-oxz7sw5lxc","code":"() => {\r\n            getNextAppFolderNumberStub.calledOnce.should.be.eql(generateNewInstallAppFolder);\r\n            getNextAppFolderNumberStub.notCalled.should.be.eql(!generateNewInstallAppFolder);\r\n        }","duration":0},{"title":"the installed app index is updated for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the installed app index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"4r6gkw2qyt-c00xg6njzp-w6dp1j4wej","code":"() => {\r\n            updateInstalledAppIndexStub.calledTwice.should.be.eql(generateNewInstallAppFolder);\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(!generateNewInstallAppFolder && scenarioOutlineContext.example.appInstallNeeded);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the app is downloaded for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the app is downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"4r6gkw2qyt-c00xg6njzp-oy14uhx7u8","code":"() => {\r\n            downloadAppPackageStub.calledOnce.should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            downloadAppPackageStub.calledWith(appInfo.playerPackageUrl, nextAppFolderNumber.toString()).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":1},{"title":"the player resources information is retrieved for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the player resources information is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp-949dednm39","code":"() => {\r\n            const shouldRetrievePlayerResourcesInfo = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            getPlayerResourcesStub.calledOnce.should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.notCalled.should.be.eql(!shouldRetrievePlayerResourcesInfo);\r\n            getPlayerResourcesStub.calledWith(repositoryPlayerResourcesInfo.hash).should.be.eql(shouldRetrievePlayerResourcesInfo);\r\n        }","duration":0},{"title":"the next static content folder number is retrieved for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the next static content folder number is retrieved for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":10,"id":"4r6gkw2qyt-c00xg6njzp-nb3o79mwqr","code":"() => {\r\n            getNextPlayerResourcesFolderNumberStub.calledOnce.should.be.eql(generateNewPlayerResourcesFolder);\r\n            getNextPlayerResourcesFolderNumberStub.notCalled.should.be.eql(!generateNewPlayerResourcesFolder);\r\n        }","duration":0},{"title":"the player resources are downloaded for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the player resources are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":11,"id":"4r6gkw2qyt-c00xg6njzp-oxu2rxccm8","code":"() => {\r\n            downloadPlayerResourcesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            downloadPlayerResourcesStub.calledWith(playerResourcesDomain + repositoryPlayerResourcesInfo.hash + \"/\" + playerResourcesZipFileName).should.be.eql(scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the player resources index is updated for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the player resources index is updated for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":12,"id":"4r6gkw2qyt-c00xg6njzp-oxwymn8z68","code":"() => {\r\n            updatePlayerResourcesIndexStub.calledTwice.should.be.eql(generateNewPlayerResourcesFolder);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(!generateNewPlayerResourcesFolder && scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!scenarioOutlineContext.example.playerResourcesInstallNeeded);\r\n        }","duration":0},{"title":"the resources are linked for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the resources are linked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":13,"id":"4r6gkw2qyt-c00xg6njzp-oxzsm2assg","code":"() => {\r\n            const shouldLinkResources = scenarioOutlineContext.example.appInstallNeeded && scenarioOutlineContext.example.appPackageResourcesKind === null;\r\n            linkResourcesStub.calledOnce.should.be.eql(shouldLinkResources);\r\n            linkResourcesStub.notCalled.should.be.eql(!shouldLinkResources);\r\n        }","duration":0},{"title":"scenarios are tracked for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"scenarios are tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":14,"id":"4r6gkw2qyt-c00xg6njzp-oy1ixsw0io","code":"() => {\r\n            trackScenarioStub.startScenarioStub.args.length.should.be.eql(scenarioOutlineContext.example.numberOfEventsDispatched);\r\n            trackScenarioStub.startScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(!scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the download app scenario is tracked for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the download app scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":15,"id":"4r6gkw2qyt-c00xg6njzp-oxuob0yt8g","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.DownloadApp).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the code copy scenario is tracked for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the code copy scenario is tracked for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":16,"id":"4r6gkw2qyt-c00xg6njzp-tl7b672k83","code":"() => {\r\n            const scenario = scenarioOutlineContext.example.appPackageResourcesKind === \"split\" ? Core.Telemetry.ScenarioName.DownloadSharedAppResources : Core.Telemetry.ScenarioName.CopyStaticCodeAndEntities;\r\n            trackScenarioStub.startScenarioStub.calledWith(scenario).should.be.eql(scenarioOutlineContext.example.appInstallNeeded);\r\n        }","duration":0},{"title":"the installed app info is returned for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"the installed app info is returned for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":17,"id":"4r6gkw2qyt-c00xg6njzp-oy0avrnops","code":"() => {\r\n            returnedInstalledAppInfo.should.be.eql(repositoryInstalledAppInfo);\r\n        }","duration":0},{"title":"shared resource files are downloaded for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"shared resource files are downloaded for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":18,"id":"4r6gkw2qyt-c00xg6njzp-oxvjw7x2ow","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n            downloadFilesAsyncStub.notCalled.should.be.eql(!scenarioOutlineContext.example.downloadFilesAsyncNeeded);\r\n        }","duration":0},{"title":"updateOpenAppData function gets called for appWithSharedResourcesInstalledBy2.0.810","status":"pass","exception":{},"rawTitle":"updateOpenAppData function gets called for <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":19,"id":"4r6gkw2qyt-c00xg6njzp-oxukuk3u3k","code":"() => {\r\n            for (let i = 0; i < updateOpenAppDataCallCount; i++) {\r\n                if (scenarioOutlineContext.example.appPackageResourcesKind === \"split\") {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount + 1);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppWithSharedReourcesProperties[i]).should.be.eql(true);\r\n                }\r\n                else {\r\n                    updateOpenAppDataStub.callCount.should.be.eql(updateOpenAppDataCallCount);\r\n                    updateOpenAppDataStub.args[i][0].hasOwnProperty(openAppProperties[i]).should.be.eql(true);\r\n                }\r\n            }\r\n        }","duration":0}],"example":{"appId":"appWithSharedResourcesInstalledBy2.0.810","appInstallStatus":2,"playerResourcesInstallStatus":"","appVersion":"version0","installVersion":"version0","appSienaVersion":"version1","installSienaVersion":"version1","platformSpecificResourcesVersion":"2.0.810","appInstallNeeded":true,"appUpdateNeeded":true,"playerResourcesInstallNeeded":false,"appPackageResourcesKind":"split","downloadFilesAsyncNeeded":true,"numberOfEventsDispatched":4},"title":"Install a published app","sequence":9,"id":"4r6gkw2qyt-c00xg6njzp"}],"title":"Install a published app","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":24,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with version version1, using platform specific resources with version version1","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with version <playerVersion>, using platform specific resources with version <platformSpecificResourcesVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb-16tw4lldejn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = example.appPackageResourcesKind;\r\n            Core.Environment.Version.VERSION_NUMBER = example.playerVersion;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb-cn3srhp4jk","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate } = scenarioOutlineContext.example;\r\n            copyPlatformSpecificStaticResourcesStub.calledOnce.should.be.eql(shouldPlatformSpecificResourcesUpdate);\r\n            copyPlatformSpecificStaticResourcesStub.notCalled.should.be.eql(!shouldPlatformSpecificResourcesUpdate);\r\n        }","duration":1},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb-cn3djn0fy8","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate, appPackageResourcesKind } = scenarioOutlineContext.example;\r\n            const shouldAppIndexUpdate = shouldPlatformSpecificResourcesUpdate;\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(shouldAppIndexUpdate);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!shouldAppIndexUpdate);\r\n            const shouldPlayerResourcesIndexUpdate = shouldPlatformSpecificResourcesUpdate && (appPackageResourcesKind === null);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(shouldPlayerResourcesIndexUpdate);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!shouldPlayerResourcesIndexUpdate);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["playerVersion","platformSpecificResourcesVersion","appPackageResourcesKind","shouldPlatformSpecificResourcesUpdate"],["version1","version1","\"split\"","false"],["version2","version1","\"split\"","true"],["version1","version1","null","false"],["version2","version1","null","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with version version1, using platform specific resources with version version1","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with version <playerVersion>, using platform specific resources with version <platformSpecificResourcesVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb-16tw4lldejn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = example.appPackageResourcesKind;\r\n            Core.Environment.Version.VERSION_NUMBER = example.playerVersion;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb-cn3srhp4jk","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate } = scenarioOutlineContext.example;\r\n            copyPlatformSpecificStaticResourcesStub.calledOnce.should.be.eql(shouldPlatformSpecificResourcesUpdate);\r\n            copyPlatformSpecificStaticResourcesStub.notCalled.should.be.eql(!shouldPlatformSpecificResourcesUpdate);\r\n        }","duration":1},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb-cn3djn0fy8","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate, appPackageResourcesKind } = scenarioOutlineContext.example;\r\n            const shouldAppIndexUpdate = shouldPlatformSpecificResourcesUpdate;\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(shouldAppIndexUpdate);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!shouldAppIndexUpdate);\r\n            const shouldPlayerResourcesIndexUpdate = shouldPlatformSpecificResourcesUpdate && (appPackageResourcesKind === null);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(shouldPlayerResourcesIndexUpdate);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!shouldPlayerResourcesIndexUpdate);\r\n        }","duration":0}],"example":{"playerVersion":"version1","platformSpecificResourcesVersion":"version1","appPackageResourcesKind":"split","shouldPlatformSpecificResourcesUpdate":false},"title":"Platform Resources are updated when the player version changes","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with version version2, using platform specific resources with version version1","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with version <playerVersion>, using platform specific resources with version <platformSpecificResourcesVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb-16tw4lldejn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = example.appPackageResourcesKind;\r\n            Core.Environment.Version.VERSION_NUMBER = example.playerVersion;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":3},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb-cn3srhp4jk","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate } = scenarioOutlineContext.example;\r\n            copyPlatformSpecificStaticResourcesStub.calledOnce.should.be.eql(shouldPlatformSpecificResourcesUpdate);\r\n            copyPlatformSpecificStaticResourcesStub.notCalled.should.be.eql(!shouldPlatformSpecificResourcesUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb-cn3djn0fy8","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate, appPackageResourcesKind } = scenarioOutlineContext.example;\r\n            const shouldAppIndexUpdate = shouldPlatformSpecificResourcesUpdate;\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(shouldAppIndexUpdate);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!shouldAppIndexUpdate);\r\n            const shouldPlayerResourcesIndexUpdate = shouldPlatformSpecificResourcesUpdate && (appPackageResourcesKind === null);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(shouldPlayerResourcesIndexUpdate);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!shouldPlayerResourcesIndexUpdate);\r\n        }","duration":0}],"example":{"playerVersion":"version2","platformSpecificResourcesVersion":"version1","appPackageResourcesKind":"split","shouldPlatformSpecificResourcesUpdate":true},"title":"Platform Resources are updated when the player version changes","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":13,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with version version1, using platform specific resources with version version1","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with version <playerVersion>, using platform specific resources with version <platformSpecificResourcesVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb-16tw4lldejn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = example.appPackageResourcesKind;\r\n            Core.Environment.Version.VERSION_NUMBER = example.playerVersion;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":13},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb-cn3srhp4jk","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate } = scenarioOutlineContext.example;\r\n            copyPlatformSpecificStaticResourcesStub.calledOnce.should.be.eql(shouldPlatformSpecificResourcesUpdate);\r\n            copyPlatformSpecificStaticResourcesStub.notCalled.should.be.eql(!shouldPlatformSpecificResourcesUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb-cn3djn0fy8","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate, appPackageResourcesKind } = scenarioOutlineContext.example;\r\n            const shouldAppIndexUpdate = shouldPlatformSpecificResourcesUpdate;\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(shouldAppIndexUpdate);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!shouldAppIndexUpdate);\r\n            const shouldPlayerResourcesIndexUpdate = shouldPlatformSpecificResourcesUpdate && (appPackageResourcesKind === null);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(shouldPlayerResourcesIndexUpdate);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!shouldPlayerResourcesIndexUpdate);\r\n        }","duration":0}],"example":{"playerVersion":"version1","platformSpecificResourcesVersion":"version1","appPackageResourcesKind":null,"shouldPlatformSpecificResourcesUpdate":false},"title":"Platform Resources are updated when the player version changes","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with version version2, using platform specific resources with version version1","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with version <playerVersion>, using platform specific resources with version <platformSpecificResourcesVersion>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oifht0kqb-16tw4lldejn","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = example.appPackageResourcesKind;\r\n            Core.Environment.Version.VERSION_NUMBER = example.playerVersion;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: \"en-US\"\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            copyPlatformSpecificStaticResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.copyPlatformSpecificStaticResources.name);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":3},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oifht0kqb-cn3srhp4jk","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate } = scenarioOutlineContext.example;\r\n            copyPlatformSpecificStaticResourcesStub.calledOnce.should.be.eql(shouldPlatformSpecificResourcesUpdate);\r\n            copyPlatformSpecificStaticResourcesStub.notCalled.should.be.eql(!shouldPlatformSpecificResourcesUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oifht0kqb-cn3djn0fy8","code":"() => {\r\n            const { shouldPlatformSpecificResourcesUpdate, appPackageResourcesKind } = scenarioOutlineContext.example;\r\n            const shouldAppIndexUpdate = shouldPlatformSpecificResourcesUpdate;\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(shouldAppIndexUpdate);\r\n            updateInstalledAppIndexStub.notCalled.should.be.eql(!shouldAppIndexUpdate);\r\n            const shouldPlayerResourcesIndexUpdate = shouldPlatformSpecificResourcesUpdate && (appPackageResourcesKind === null);\r\n            updatePlayerResourcesIndexStub.calledOnce.should.be.eql(shouldPlayerResourcesIndexUpdate);\r\n            updatePlayerResourcesIndexStub.notCalled.should.be.eql(!shouldPlayerResourcesIndexUpdate);\r\n        }","duration":0}],"example":{"playerVersion":"version2","platformSpecificResourcesVersion":"version1","appPackageResourcesKind":null,"shouldPlatformSpecificResourcesUpdate":true},"title":"Platform Resources are updated when the player version changes","sequence":4,"id":"4r6gkw2qyt-12oifht0kqb"}],"title":"Platform Resources are updated when the player version changes","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with locale en-US, using a player with locale <playerLocale>","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with locale <appLocale>, using a player with locale <playerLocale>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oil3swakl-nh3vyg0z0t","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: Core.Environment.Version.VERSION_NUMBER,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: example.appLocale\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            let packageManifest = {\r\n                hash: \"hash\",\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\",\r\n                downloadzip: false\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updateLanguageFilesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updateResourcesLocaleAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oil3swakl-cn3srhp4jk","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n            updateLanguageFilesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oil3swakl-cn3djn0fy8","code":"() => {\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldIndexUpdate);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appLocale","appPackageResourcesKind","shouldLocaleUpdate","shouldIndexUpdate"],["en-US","\"split\"","false","false"],["es-US","\"split\"","true","true"],["en-US","null","false","false"],["es-US","null","false","true"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with locale en-US, using a player with locale <playerLocale>","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with locale <appLocale>, using a player with locale <playerLocale>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oil3swakl-nh3vyg0z0t","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: Core.Environment.Version.VERSION_NUMBER,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: example.appLocale\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            let packageManifest = {\r\n                hash: \"hash\",\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\",\r\n                downloadzip: false\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updateLanguageFilesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updateResourcesLocaleAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oil3swakl-cn3srhp4jk","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n            updateLanguageFilesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oil3swakl-cn3djn0fy8","code":"() => {\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldIndexUpdate);\r\n        }","duration":0}],"example":{"appLocale":"en-US","appPackageResourcesKind":"split","shouldLocaleUpdate":false,"shouldIndexUpdate":false},"title":"Language Resources are updated when the player locale changes","sequence":1,"id":"4r6gkw2qyt-12oil3swakl"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with locale es-US, using a player with locale <playerLocale>","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with locale <appLocale>, using a player with locale <playerLocale>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oil3swakl-y48qsudaol","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: Core.Environment.Version.VERSION_NUMBER,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: example.appLocale\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            let packageManifest = {\r\n                hash: \"hash\",\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\",\r\n                downloadzip: false\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updateLanguageFilesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updateResourcesLocaleAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oil3swakl-cn3srhp4jk","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n            updateLanguageFilesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oil3swakl-cn3djn0fy8","code":"() => {\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldIndexUpdate);\r\n        }","duration":0}],"example":{"appLocale":"es-US","appPackageResourcesKind":"split","shouldLocaleUpdate":true,"shouldIndexUpdate":true},"title":"Language Resources are updated when the player locale changes","sequence":2,"id":"4r6gkw2qyt-12oil3swakl"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with locale en-US, using a player with locale <playerLocale>","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with locale <appLocale>, using a player with locale <playerLocale>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oil3swakl-nh3vyg0z0t","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: Core.Environment.Version.VERSION_NUMBER,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: example.appLocale\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            let packageManifest = {\r\n                hash: \"hash\",\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\",\r\n                downloadzip: false\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updateLanguageFilesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updateResourcesLocaleAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":4},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oil3swakl-cn3srhp4jk","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n            updateLanguageFilesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oil3swakl-cn3djn0fy8","code":"() => {\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldIndexUpdate);\r\n        }","duration":0}],"example":{"appLocale":"en-US","appPackageResourcesKind":null,"shouldLocaleUpdate":false,"shouldIndexUpdate":false},"title":"Language Resources are updated when the player locale changes","sequence":3,"id":"4r6gkw2qyt-12oil3swakl"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an app is already installed from a player with locale es-US, using a player with locale <playerLocale>","status":"pass","exception":{},"rawTitle":"an app is already installed from a player with locale <appLocale>, using a player with locale <playerLocale>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"4r6gkw2qyt-12oil3swakl-y48qsudaol","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const example = scenarioOutlineContext.example;\r\n            appInfo.appPackageResourcesKind = scenarioOutlineContext.example.appPackageResourcesKind;\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), \"\", \"\");\r\n            repositoryInstalledAppInfo = {\r\n                appId: appInfo.appId,\r\n                folderName: \"1\",\r\n                folderNumber: 1,\r\n                status: Services_1.InstallStatus.Completed,\r\n                playerResourceHash: \"hash\",\r\n                version: appInfo.version,\r\n                sienaVersion: appInfo.sienaVersion,\r\n                platformSpecificResourcesVersion: Core.Environment.Version.VERSION_NUMBER,\r\n                webPackageUrl: \"\",\r\n                appPackageResourcesKind: appInfo.appPackageResourcesKind,\r\n                locale: example.appLocale\r\n            };\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: example.platformSpecificResourcesVersion,\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            let packageManifest = {\r\n                hash: \"hash\",\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\",\r\n                downloadzip: false\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(repositoryInstalledAppInfo);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name);\r\n            updateLanguageFilesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updateResourcesLocaleAsync.name);\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":3},{"title":"the platform specific resources are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the platform specific resources are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"4r6gkw2qyt-12oil3swakl-cn3srhp4jk","code":"() => {\r\n            getPackageHashStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n            updateLanguageFilesStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldLocaleUpdate);\r\n        }","duration":0},{"title":"the index files are updated when the versions are different","status":"pass","exception":{},"rawTitle":"the index files are updated when the versions are different","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"4r6gkw2qyt-12oil3swakl-cn3djn0fy8","code":"() => {\r\n            updateInstalledAppIndexStub.calledOnce.should.be.eql(scenarioOutlineContext.example.shouldIndexUpdate);\r\n        }","duration":0}],"example":{"appLocale":"es-US","appPackageResourcesKind":null,"shouldLocaleUpdate":false,"shouldIndexUpdate":true},"title":"Language Resources are updated when the player locale changes","sequence":4,"id":"4r6gkw2qyt-12oil3swakl"}],"title":"Language Resources are updated when the player locale changes","description":"","tags":[]},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":20,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the app has access to the internet","status":"pass","exception":{},"rawTitle":"the app has access to the internet","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"4r6gkw2qyt-c2oh72bfn9-cn9kx2umgw","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IAppCatalogService);\r\n            Utilities_1.mockKernelInternetConnection();\r\n        }","duration":0},{"title":"installing the app","status":"pass","exception":{},"rawTitle":"installing the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"4r6gkw2qyt-c2oh72bfn9-vifu5j7lil","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            appInfo.playerReadOnlyPackageUrl = \"testReadOnlyPackage\";\r\n            installService = new Services_1.InstallService(new Services_1.InstallAppRepository(), new Services_1.PlayerResourcesRepository(), playerResourcesDomain, playerResourcesZipFileName);\r\n            repositoryPlayerResourcesInfo = {\r\n                hash: \"hash\",\r\n                folderNumber: 1,\r\n                folder: \"s1\",\r\n                platformSpecificResourcesVersion: \"2.0.810\",\r\n                status: 2\r\n            };\r\n            getInstalledAppInfoStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getInstalledAppInfoAsync.name).returns(appInfo);\r\n            let packageManifest = {\r\n                hash,\r\n                staticDependencies: [],\r\n                controlDependencies: {},\r\n                version: \"version\"\r\n            };\r\n            getPackageHashStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.downloadPackageManifestAsResponseJsonAsync.name).returns(packageManifest);\r\n            getNextAppFolderNumberStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.getNextFolderNumberAsync.name).returns(nextAppFolderNumber);\r\n            updateInstalledAppIndexStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.updateInstalledAppIndexAsync.name)\r\n                .callsFake((appId, installedAppInfo) => {\r\n                appInfo = installedAppInfo;\r\n                getInstalledAppInfoStub.returns(installedAppInfo);\r\n            });\r\n            downloadAppPackageStub = sinon.stub(Services_1.InstallAppRepository.prototype, \"downloadAndUnzipPackageAsync\");\r\n            downloadAppPackageStub.onFirstCall().throws(\"Error\");\r\n            deleteFolderStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.deleteFolderAsync.name);\r\n            getPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getPlayerResourceInfoAsync.name).returns(repositoryPlayerResourcesInfo);\r\n            getNextPlayerResourcesFolderNumberStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.getNextFolderNumberAsync.name).returns(nextPlayerResourcesFolderNumber);\r\n            updatePlayerResourcesIndexStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, Services_1.PlayerResourcesRepository.prototype.updatePlayerResourceIndexAsync.name);\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n            downloadPlayerResourcesStub = sinon.stub(Services_1.PlayerResourcesRepository.prototype, \"downloadAndUnzipAsync\");\r\n            linkResourcesStub = sinon.stub(Services_1.InstallAppRepository.prototype, Services_1.InstallAppRepository.prototype.linkResourceToAppAsync.name);\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadFilesAsync.name).returns({ downloadCompletedSuccessfully: true });\r\n            trackScenarioStub.setup();\r\n            returnedInstalledAppInfo = yield installService.checkAndInstallAppIfNeededAsync(appInfo);\r\n        })","duration":19},{"title":"the retry logic is used in case the package is not downloaded using playerPackageUrl","status":"pass","exception":{},"rawTitle":"the retry logic is used in case the package is not downloaded using playerPackageUrl","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"4r6gkw2qyt-c2oh72bfn9-4t69bzmm9p","code":"() => {\r\n            downloadAppPackageStub.calledTwice.should.be.eql(true);\r\n            downloadAppPackageStub.getCall(0).args[0].should.be.eql(appInfo.playerPackageUrl);\r\n            downloadAppPackageStub.getCall(1).args[0].should.be.eql(appInfo.playerReadOnlyPackageUrl);\r\n        }","duration":1}],"title":"When playerPackageUrl fails to download, use readOnlyPackageUrl to download files","description":"","tags":[],"sequence":6,"id":"4r6gkw2qyt-c2oh72bfn9"}],"title":"Install service to manage installation of apps","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallService.Spec.js","id":"4r6gkw2qyt","path":"Services/Install"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":108,"failedCount":0,"pendingCount":0,"totalCount":108,"totalRuleViolations":0,"duration":86,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is first launch","status":"pass","exception":{},"rawTitle":"is first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-seoisw6dhs-4pv2pkhinf","code":"() => {\r\n            setupTest(true, null);\r\n        }","duration":9},{"title":"loading the playerResourcesRepository","status":"pass","exception":{},"rawTitle":"loading the playerResourcesRepository","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-seoisw6dhs-jbme2uuth9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield playerResourcesRepository.loadAsync();\r\n        })","duration":1},{"title":"should try to check if the index file exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-seoisw6dhs-4jaefeyh1v","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should try to check if the index file with name playerResourcesIndex.json exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file with name playerResourcesIndex.json exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-seoisw6dhs-s1dqp638v9","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file","status":"pass","exception":{},"rawTitle":"should create an index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-seoisw6dhs-rpl9dsm0lv","code":"() => {\r\n            createFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should create an index file called playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should create an index file called playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-seoisw6dhs-mlfi70ulgl","code":"() => {\r\n            createFileStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the player resources repository on first client launch","description":"","tags":[],"sequence":1,"id":"hjres6sfoz-seoisw6dhs"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"Attempting to load the player resources repository twice in a row","status":"pass","exception":{},"rawTitle":"Attempting to load the player resources repository twice in a row","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"hjres6sfoz-13j46k5gfwl-16q216tr9cl","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(true, null);\r\n            yield playerResourcesRepository.loadAsync();\r\n            restoreTest(false);\r\n            setupTest(false, null);\r\n            yield playerResourcesRepository.loadAsync();\r\n        })","duration":5},{"title":"should not try to check if the index file exists","status":"pass","exception":{},"rawTitle":"should not try to check if the index file exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"hjres6sfoz-13j46k5gfwl-a54concbvk","code":"() => {\r\n            doesFileExistStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file","status":"pass","exception":{},"rawTitle":"should create an index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"hjres6sfoz-13j46k5gfwl-rpl9dsm0lv","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the player resources repository twice in a row","description":"","tags":[],"sequence":2,"id":"hjres6sfoz-13j46k5gfwl"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is first launch","status":"pass","exception":{},"rawTitle":"is first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-8cvtv77u8l-4pv2pkhinf","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(true, null);\r\n        })","duration":3},{"title":"loading the player resources repository twice in parallel","status":"pass","exception":{},"rawTitle":"loading the player resources repository twice in parallel","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-8cvtv77u8l-8cvtv77u8l","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield Promise.all([playerResourcesRepository.loadAsync(), playerResourcesRepository.loadAsync()]);\r\n        })","duration":0},{"title":"should try to check if the index file exists only once","status":"pass","exception":{},"rawTitle":"should try to check if the index file exists only once","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-8cvtv77u8l-lqydb2ofds","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name playerResourcesIndex.json exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file with name playerResourcesIndex.json exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-8cvtv77u8l-s1dqp638v9","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file only once","status":"pass","exception":{},"rawTitle":"should create an index file only once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-8cvtv77u8l-lr0qaglk7k","code":"() => {\r\n            createFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the player resources repository twice in parallel","description":"","tags":[],"sequence":3,"id":"hjres6sfoz-8cvtv77u8l"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-1118hg1y3cb-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(false, \"\"); // File system returns an empty string for a file with nothing in it\r\n        })","duration":2},{"title":"loading the player resources repository with an empty index","status":"pass","exception":{},"rawTitle":"loading the player resources repository with an empty index","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-1118hg1y3cb-1118hg1y3cb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield playerResourcesRepository.loadAsync();\r\n        })","duration":0},{"title":"should try to check if the index file exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-1118hg1y3cb-4jaefeyh1v","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name playerResourcesIndex.json exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file with name playerResourcesIndex.json exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-1118hg1y3cb-s1dqp638v9","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should not create an index file","status":"pass","exception":{},"rawTitle":"should not create an index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-1118hg1y3cb-12cq9yr9dvp","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":1},{"title":"should read the index file","status":"pass","exception":{},"rawTitle":"should read the index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-1118hg1y3cb-s4w8w0wa9n","code":"() => {\r\n            readTextFromFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file with name playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should read the index file with name playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-1118hg1y3cb-10s9y20ntst","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the player resources repository with an empty index","description":"","tags":[],"sequence":4,"id":"hjres6sfoz-1118hg1y3cb"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-mv9h6ljiw0-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n        })","duration":5},{"title":"loading the player resources repository with a populated index","status":"pass","exception":{},"rawTitle":"loading the player resources repository with a populated index","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-mv9h6ljiw0-mv9h6ljiw0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield playerResourcesRepository.loadAsync();\r\n        })","duration":1},{"title":"should try to check if the index file exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-mv9h6ljiw0-4jaefeyh1v","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name playerResourcesIndex.json exists","status":"pass","exception":{},"rawTitle":"should try to check if the index file with name playerResourcesIndex.json exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-mv9h6ljiw0-s1dqp638v9","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":1},{"title":"should not create an index file","status":"pass","exception":{},"rawTitle":"should not create an index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-mv9h6ljiw0-12cq9yr9dvp","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file","status":"pass","exception":{},"rawTitle":"should read the index file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-mv9h6ljiw0-s4w8w0wa9n","code":"() => {\r\n            readTextFromFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file with name playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should read the index file with name playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-mv9h6ljiw0-10s9y20ntst","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the player resources repository with a populated index","description":"","tags":[],"sequence":5,"id":"hjres6sfoz-mv9h6ljiw0"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mock setup","status":"pass","exception":{},"rawTitle":"mock setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-17z6pl0cgeb-tqkz9r1z4t","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            getAppFolderFullPathStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.getFullFolderPathAsync.name).returns(expectedFullFolderPath);\r\n        })","duration":1},{"title":"getting the full path for the app folder","status":"pass","exception":{},"rawTitle":"getting the full path for the app folder","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-17z6pl0cgeb-17z6pl0cgeb","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            fullFolderPath = yield playerResourcesRepository.getPlayerResourceFolderFullPathAsync(relativeFolder);\r\n        })","duration":0},{"title":"should get the full folder path from the file system","status":"pass","exception":{},"rawTitle":"should get the full folder path from the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-17z6pl0cgeb-13xqjukdc8w","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the folder name to the file system","status":"pass","exception":{},"rawTitle":"should pass the folder name to the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-17z6pl0cgeb-18492i0efw3","code":"() => {\r\n            getAppFolderFullPathStub.calledWith(relativeFolder).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the folder path from the file system","status":"pass","exception":{},"rawTitle":"should return the folder path from the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-17z6pl0cgeb-13xvft5mu74","code":"() => {\r\n            fullFolderPath.should.be.eql(expectedFullFolderPath);\r\n        }","duration":0}],"title":"When getting the full path for the app folder","description":"","tags":[],"sequence":6,"id":"hjres6sfoz-17z6pl0cgeb"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is first launch","status":"pass","exception":{},"rawTitle":"is first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-mv6dv2v0f4-4pv2pkhinf","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(true, null);\r\n        })","duration":2},{"title":"getting the next folder number with an empty index","status":"pass","exception":{},"rawTitle":"getting the next folder number with an empty index","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-mv6dv2v0f4-mv6dv2v0f4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            firstFolderNumber = yield playerResourcesRepository.getNextFolderNumberAsync();\r\n            secondFolderNumber = yield playerResourcesRepository.getNextFolderNumberAsync();\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-mv6dv2v0f4-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return 0 as the first folder number","status":"pass","exception":{},"rawTitle":"should return 0 as the first folder number","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-mv6dv2v0f4-7l9c26ul8t","code":"() => {\r\n            firstFolderNumber.should.be.eql(0);\r\n        }","duration":0},{"title":"should increment the folder number by 1","status":"pass","exception":{},"rawTitle":"should increment the folder number by 1","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-mv6dv2v0f4-pzu05omtow","code":"() => {\r\n            secondFolderNumber.should.be.eql(1);\r\n        }","duration":0}],"title":"When getting the next folder number with an empty index","description":"","tags":[],"sequence":7,"id":"hjres6sfoz-mv6dv2v0f4"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-c7970uu34z-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            expectedFolderNumber = 0;\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: expectedFolderNumber,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            expectedFolderNumber++;\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: expectedFolderNumber,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            expectedFolderNumber++;\r\n            setupTest(false, JSON.stringify([...data]));\r\n        })","duration":2},{"title":"getting the next folder number","status":"pass","exception":{},"rawTitle":"getting the next folder number","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-c7970uu34z-vcxbvlhlcl","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            folderNumber = yield playerResourcesRepository.getNextFolderNumberAsync();\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-c7970uu34z-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the next folder number available","status":"pass","exception":{},"rawTitle":"should return the next folder number available","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-c7970uu34z-x15vamz5i5","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":0}],"title":"When getting the next folder number with a populated index","description":"","tags":[],"sequence":8,"id":"hjres6sfoz-c7970uu34z"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-a56svxgqhs-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 10,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n        })","duration":2},{"title":"getting the next folder number with a populated index that has gaps","status":"pass","exception":{},"rawTitle":"getting the next folder number with a populated index that has gaps","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-a56svxgqhs-a56svxgqhs","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            folderNumber = yield playerResourcesRepository.getNextFolderNumberAsync();\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-a56svxgqhs-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should return the next folder number available","status":"pass","exception":{},"rawTitle":"should return the next folder number available","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-a56svxgqhs-x15vamz5i5","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":0}],"title":"When getting the next folder number with a populated index that has gaps","description":"","tags":[],"sequence":9,"id":"hjres6sfoz-a56svxgqhs"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is first launch","status":"pass","exception":{},"rawTitle":"is first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-mue1opods3-4pv2pkhinf","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(true, null);\r\n        })","duration":3},{"title":"getting the player resource info with an empty index","status":"pass","exception":{},"rawTitle":"getting the player resource info with an empty index","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-mue1opods3-mue1opods3","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            playerResourcesInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(hash);\r\n        })","duration":1},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-mue1opods3-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return no player resource info","status":"pass","exception":{},"rawTitle":"should return no player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-mue1opods3-cxyvnskqo","code":"() => {\r\n            should.not.exist(playerResourcesInfo);\r\n        }","duration":0}],"title":"When getting the player resource info with an empty index","description":"","tags":[],"sequence":10,"id":"hjres6sfoz-mue1opods3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-dvfibt7s5v-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n        })","duration":3},{"title":"getting the player resource info with a populated index and the info does not exist","status":"pass","exception":{},"rawTitle":"getting the player resource info with a populated index and the info does not exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-dvfibt7s5v-dvfibt7s5v","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            playerResourceInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(thirdHash);\r\n        })","duration":1},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-dvfibt7s5v-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return no player resource info","status":"pass","exception":{},"rawTitle":"should return no player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-dvfibt7s5v-cxyvnskqo","code":"() => {\r\n            should.not.exist(playerResourceInfo);\r\n        }","duration":0}],"title":"When getting the player resource info with a populated index and the info does not exist","description":"","tags":[],"sequence":11,"id":"hjres6sfoz-dvfibt7s5v"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"is not first launch","status":"pass","exception":{},"rawTitle":"is not first launch","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-a55fu9i3og-6hq1jqhvn9","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n        })","duration":3},{"title":"getting the installed app info with a populated index and the info exists","status":"pass","exception":{},"rawTitle":"getting the installed app info with a populated index and the info exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-a55fu9i3og-a55fu9i3og","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            playerResourceInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(secondHash);\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-a55fu9i3og-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the player resource info","status":"pass","exception":{},"rawTitle":"should return the player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-a55fu9i3og-ct46onun4","code":"() => {\r\n            playerResourceInfo.should.be.eql(data.get(secondHash));\r\n        }","duration":0}],"title":"When getting the installed app info with a populated index and the info exists","description":"","tags":[],"sequence":12,"id":"hjres6sfoz-a55fu9i3og"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-1k4hsnst6l-2rwskkv5r4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            setupTest(true, null);\r\n            playerResourceInfo = {\r\n                hash: hash,\r\n                folder: hash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            expectedData = new Map();\r\n            expectedData.set(hash, playerResourceInfo);\r\n            expectedDataString = JSON.stringify([...expectedData]);\r\n            yield playerResourcesRepository.updatePlayerResourceIndexAsync(hash, playerResourceInfo);\r\n        })","duration":3},{"title":"updating the player resources index with an empty index","status":"pass","exception":{},"rawTitle":"updating the player resources index with an empty index","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-1k4hsnst6l-1k4hsnst6l","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            retrievedInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(hash);\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-1k4hsnst6l-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should write to the file system","status":"pass","exception":{},"rawTitle":"should write to the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-1k4hsnst6l-17uuezoz6ot","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should write to the playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-1k4hsnst6l-mlfgqt363h","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"rawTitle":"should write the updated index to file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-1k4hsnst6l-lr2b38lyjk","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":0},{"title":"should be able to retrieve the updated player resource info","status":"pass","exception":{},"rawTitle":"should be able to retrieve the updated player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-1k4hsnst6l-14cuid1v1lp","code":"() => {\r\n            retrievedInfo.should.be.eql(playerResourceInfo);\r\n        }","duration":0}],"title":"When updating the player resources index with an empty index","description":"","tags":[],"sequence":13,"id":"hjres6sfoz-1k4hsnst6l"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-12pezjgub7h-2rwskkv5r4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n            playerResourceInfo = {\r\n                hash: thirdHash,\r\n                folder: thirdHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            };\r\n            expectedData = new Map();\r\n            expectedData.set(firstHash, data.get(firstHash));\r\n            expectedData.set(secondHash, data.get(secondHash));\r\n            expectedData.set(thirdHash, playerResourceInfo);\r\n            expectedDataString = JSON.stringify([...expectedData]);\r\n            yield playerResourcesRepository.updatePlayerResourceIndexAsync(thirdHash, playerResourceInfo);\r\n        })","duration":3},{"title":"updating the player resource info with a populated index and the info does not exist","status":"pass","exception":{},"rawTitle":"updating the player resource info with a populated index and the info does not exist","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-12pezjgub7h-12pezjgub7h","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            retrievedInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(thirdHash);\r\n        })","duration":1},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-12pezjgub7h-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the file system","status":"pass","exception":{},"rawTitle":"should write to the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-12pezjgub7h-17uuezoz6ot","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should write to the playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-12pezjgub7h-mlfgqt363h","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"rawTitle":"should write the updated index to file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-12pezjgub7h-lr2b38lyjk","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":0},{"title":"should be able to retrieve the updated player resource info","status":"pass","exception":{},"rawTitle":"should be able to retrieve the updated player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-12pezjgub7h-14cuid1v1lp","code":"() => {\r\n            retrievedInfo.should.be.eql(playerResourceInfo);\r\n        }","duration":1}],"title":"When updating the player resource info with a populated index and the info does not exist","description":"","tags":[],"sequence":14,"id":"hjres6sfoz-12pezjgub7h"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-a51uhag64g-2rwskkv5r4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            data = new Map();\r\n            data.set(firstHash, {\r\n                hash: firstHash,\r\n                folder: firstHash,\r\n                folderNumber: 0,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Completed\r\n            });\r\n            data.set(secondHash, {\r\n                hash: secondHash,\r\n                folder: secondHash,\r\n                folderNumber: 1,\r\n                platformSpecificResourcesVersion: \"\",\r\n                status: Services_1.InstallStatus.Started\r\n            });\r\n            setupTest(false, JSON.stringify([...data]));\r\n            playerResourceInfo = data.get(secondHash);\r\n            playerResourceInfo.status = Services_1.InstallStatus.Completed;\r\n            expectedData = new Map();\r\n            expectedData.set(firstHash, data.get(firstHash));\r\n            expectedData.set(secondHash, playerResourceInfo);\r\n            expectedDataString = JSON.stringify([...expectedData]);\r\n            yield playerResourcesRepository.updatePlayerResourceIndexAsync(secondHash, playerResourceInfo);\r\n        })","duration":3},{"title":"getting the player resource info with a populated index and the info exists","status":"pass","exception":{},"rawTitle":"getting the player resource info with a populated index and the info exists","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-a51uhag64g-a51uhag64g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            retrievedInfo = yield playerResourcesRepository.getPlayerResourceInfoAsync(secondHash);\r\n        })","duration":0},{"title":"should initialize the index","status":"pass","exception":{},"rawTitle":"should initialize the index","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-a51uhag64g-da79pszkkb","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the file system","status":"pass","exception":{},"rawTitle":"should write to the file system","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-a51uhag64g-17uuezoz6ot","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the playerResourcesIndex.json","status":"pass","exception":{},"rawTitle":"should write to the playerResourcesIndex.json","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-a51uhag64g-mlfgqt363h","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.PlayerResourcesRepository.playerResourcesIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"rawTitle":"should write the updated index to file","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-a51uhag64g-lr2b38lyjk","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":0},{"title":"should be able to retrieve the updated player resource info","status":"pass","exception":{},"rawTitle":"should be able to retrieve the updated player resource info","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-a51uhag64g-14cuid1v1lp","code":"() => {\r\n            retrievedInfo.should.be.eql(playerResourceInfo);\r\n        }","duration":0}],"title":"When getting the player resource info with a populated index and the info exists","description":"","tags":[],"sequence":15,"id":"hjres6sfoz-a51uhag64g"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-f09nm4uk8b-2rwskkv5r4","code":"() => {\r\n            downloadAndUnzipPackageStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadZipToFolderAsync.name).returns(Promise.resolve(result));\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n        }","duration":1},{"title":"downloading and unzipping the player resources zip","status":"pass","exception":{},"rawTitle":"downloading and unzipping the player resources zip","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-f09nm4uk8b-f09nm4uk8b","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield playerResourcesRepository.downloadAndUnzipAsync(playerResourcesUrl, folderToUnzipTo);\r\n        })","duration":0},{"title":"updateOpenAppData function should be called","status":"pass","exception":{},"rawTitle":"updateOpenAppData function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-f09nm4uk8b-pwyffhow0t","code":"() => {\r\n            updateOpenAppDataStub.calledTwice.should.be.eql(true);\r\n            updateOpenAppDataStub.firstCall.args[0].hasOwnProperty(telemetryDownloadDatapoint);\r\n            updateOpenAppDataStub.secondCall.args[0].hasOwnProperty(telemetryUnzipDatapoint);\r\n        }","duration":0},{"title":"should get download and unzip package","status":"pass","exception":{},"rawTitle":"should get download and unzip package","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-f09nm4uk8b-144l36yg8f9","code":"() => {\r\n            downloadAndUnzipPackageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the player resources url to be downloaded","status":"pass","exception":{},"rawTitle":"should pass the player resources url to be downloaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-f09nm4uk8b-143spmowuir","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[0].should.be.eql(playerResourcesUrl);\r\n        }","duration":0},{"title":"should pass the folder the player resources should be unzipped to","status":"pass","exception":{},"rawTitle":"should pass the folder the player resources should be unzipped to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-f09nm4uk8b-cuatbtpf4","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(folderToUnzipTo);\r\n        }","duration":0}],"title":"When downloading and unzipping the player resources zip","description":"","tags":[],"sequence":16,"id":"hjres6sfoz-f09nm4uk8b"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-rplh5xrqmt-2rwskkv5r4","code":"() => {\r\n            downloadAndUnzipPackageStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadZipToFolderAsync.name).returns(Promise.resolve(result));\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n        }","duration":1},{"title":"downloading and unzipping the same player resources twice at the same time","status":"pass","exception":{},"rawTitle":"downloading and unzipping the same player resources twice at the same time","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-rplh5xrqmt-rplh5xrqmt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield Promise.all([\r\n                playerResourcesRepository.downloadAndUnzipAsync(playerResourcesUrl, folderToUnzipTo),\r\n                playerResourcesRepository.downloadAndUnzipAsync(playerResourcesUrl, folderToUnzipTo)\r\n            ]);\r\n        })","duration":0},{"title":"updateOpenAppData function should be called","status":"pass","exception":{},"rawTitle":"updateOpenAppData function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-rplh5xrqmt-pwyffhow0t","code":"() => {\r\n            updateOpenAppDataStub.calledTwice.should.be.eql(true);\r\n            updateOpenAppDataStub.firstCall.args[0].hasOwnProperty(telemetryDownloadDatapoint);\r\n            updateOpenAppDataStub.secondCall.args[0].hasOwnProperty(telemetryUnzipDatapoint);\r\n        }","duration":1},{"title":"should get download and unzip package","status":"pass","exception":{},"rawTitle":"should get download and unzip package","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-rplh5xrqmt-144l36yg8f9","code":"() => {\r\n            downloadAndUnzipPackageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the player resources url to be downloaded","status":"pass","exception":{},"rawTitle":"should pass the player resources url to be downloaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-rplh5xrqmt-143spmowuir","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[0].should.be.eql(playerResourcesUrl);\r\n        }","duration":0},{"title":"should pass the folder the player resources should be unzipped to","status":"pass","exception":{},"rawTitle":"should pass the folder the player resources should be unzipped to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-rplh5xrqmt-cuatbtpf4","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(folderToUnzipTo);\r\n        }","duration":0}],"title":"When downloading and unzipping the same player resources twice at the same time","description":"","tags":[],"sequence":17,"id":"hjres6sfoz-rplh5xrqmt"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-o5vombzs8r-2rwskkv5r4","code":"() => {\r\n            downloadAndUnzipPackageStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.downloadZipToFolderAsync.name).returns(Promise.resolve(result));\r\n            updateOpenAppDataStub = sinon.stub(Core.Telemetry.Log, \"updateOpenAppData\");\r\n        }","duration":2},{"title":"downloading and unzipping the two different player resources at the same time","status":"pass","exception":{},"rawTitle":"downloading and unzipping the two different player resources at the same time","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-o5vombzs8r-o5vombzs8r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield Promise.all([\r\n                playerResourcesRepository.downloadAndUnzipAsync(firstPlayerResourcesUrl, firstFolderToUnzipTo),\r\n                playerResourcesRepository.downloadAndUnzipAsync(secondPlayerResourcesUrl, secondFolderToUnzipTo)\r\n            ]);\r\n        })","duration":0},{"title":"updateOpenAppData function should be called","status":"pass","exception":{},"rawTitle":"updateOpenAppData function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-o5vombzs8r-pwyffhow0t","code":"() => {\r\n            updateOpenAppDataStub.callCount.should.be.eql(4);\r\n            updateOpenAppDataStub.firstCall.args[0].hasOwnProperty(telemetryDownloadDatapoint);\r\n            updateOpenAppDataStub.secondCall.args[0].hasOwnProperty(telemetryUnzipDatapoint);\r\n            updateOpenAppDataStub.thirdCall.args[0].hasOwnProperty(telemetryDownloadDatapoint);\r\n            updateOpenAppDataStub.getCall(3).args[0].hasOwnProperty(telemetryUnzipDatapoint);\r\n        }","duration":0},{"title":"should get download and unzip package","status":"pass","exception":{},"rawTitle":"should get download and unzip package","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-o5vombzs8r-144l36yg8f9","code":"() => {\r\n            downloadAndUnzipPackageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the first player resources url to be downloaded","status":"pass","exception":{},"rawTitle":"should pass the first player resources url to be downloaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-o5vombzs8r-i784ve3uo5","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[0].should.be.eql(firstPlayerResourcesUrl);\r\n        }","duration":0},{"title":"should pass the first folder the player resources should be unzipped to","status":"pass","exception":{},"rawTitle":"should pass the first folder the player resources should be unzipped to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"hjres6sfoz-o5vombzs8r-cwg8oc8g0","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(firstFolderToUnzipTo);\r\n        }","duration":0},{"title":"should pass the second player resources url to be downloaded","status":"pass","exception":{},"rawTitle":"should pass the second player resources url to be downloaded","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"hjres6sfoz-o5vombzs8r-nvkbcermgl","code":"() => {\r\n            downloadAndUnzipPackageStub.secondCall.args[0].should.be.eql(secondPlayerResourcesUrl);\r\n        }","duration":0},{"title":"should pass the second folder the player resources should be unzipped to","status":"pass","exception":{},"rawTitle":"should pass the second folder the player resources should be unzipped to","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":8,"id":"hjres6sfoz-o5vombzs8r-17wjz84rcwj","code":"() => {\r\n            downloadAndUnzipPackageStub.secondCall.args[1].should.be.eql(secondFolderToUnzipTo);\r\n        }","duration":0}],"title":"When downloading and unzipping the two different player resources at the same time","description":"","tags":[],"sequence":18,"id":"hjres6sfoz-o5vombzs8r"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":12,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-j63phguy7x-2rwskkv5r4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            trackScenarioStub = new TrackScenarioStub_1.TrackScenarioStub();\r\n            trackScenarioStub.setup();\r\n            doesFileExistAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, \"doesFileExistAsync\").returns(false);\r\n            sendHttpJsonResponseAsyncStub = sinon.stub(AppMagic.Services.HttpClient.prototype, \"sendHttpJsonResponseAsync\");\r\n            sendHttpJsonResponseAsyncStub.callsFake(() => {\r\n                return WinJS.Promise.wrap(appDependencies);\r\n            });\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, \"downloadFilesAsync\").callsFake(() => {\r\n                return WinJS.Promise.wrap({ downloadCompletedSuccessfully: true });\r\n            });\r\n            yield playerResourcesRepository.prefetchPlayerResourcesAsync();\r\n        })","duration":11},{"title":"pre-downloading player resources","status":"pass","exception":{},"rawTitle":"pre-downloading player resources","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-j63phguy7x-j63phguy7x","code":"() => {\r\n        }","duration":0},{"title":"sendHttpJsonResponseAsync function should be called","status":"pass","exception":{},"rawTitle":"sendHttpJsonResponseAsync function should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-j63phguy7x-jkq7ers8j4","code":"() => {\r\n            sendHttpJsonResponseAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should download player resources","status":"pass","exception":{},"rawTitle":"should download player resources","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-j63phguy7x-6j19lhkrbp","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When pre-downloading player resources","description":"","tags":[],"sequence":19,"id":"hjres6sfoz-j63phguy7x"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":8,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"mocks setup","status":"pass","exception":{},"rawTitle":"mocks setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"hjres6sfoz-a57wlfo9og-2rwskkv5r4","code":"() => {\r\n            addListenerStub = sinon.stub(react_native_1.NativeEventEmitter.prototype, \"addListener\").returns(subscriptionMock);\r\n            removeStub = sinon.stub(Mocks_1.SubscriptionMock.prototype, \"remove\");\r\n            downloadFilesAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, \"downloadFilesAsync\").callsFake(() => {\r\n                return WinJS.Promise.wrap({ downloadCompletedSuccessfully: true });\r\n            });\r\n            manifest = {\r\n                downloadzip: false,\r\n                hash: \"hash\",\r\n                controlDependencies: {},\r\n                staticDependencies: [],\r\n                version: \"version\",\r\n            };\r\n            for (let i = 0; i < 10; i++) {\r\n                manifest.staticDependencies.push({\r\n                    sourcePath: \"/path\",\r\n                    sourceUrl: \"http://file-\" + i + \"url\",\r\n                    resourceType: \"type\",\r\n                    urlVersion: \"version-\" + i\r\n                });\r\n            }\r\n            for (let i = 0; i < 10; i++) {\r\n                const control = [];\r\n                for (let j = 0; j < 3; j++) {\r\n                    control.push({\r\n                        sourcePath: \"/path\",\r\n                        sourceUrl: \"http://file-\" + j + \"url\",\r\n                        resourceType: \"type\",\r\n                        urlVersion: \"version-\" + j\r\n                    });\r\n                }\r\n                manifest.controlDependencies[`control${i}`] = control;\r\n            }\r\n        }","duration":2},{"title":"downloading player resources","status":"pass","exception":{},"rawTitle":"downloading player resources","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"hjres6sfoz-a57wlfo9og-a57wlfo9og","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield playerResourcesRepository.downloadPlayerResourcesAsync(manifest);\r\n        })","duration":5},{"title":"should add an listener for native event","status":"pass","exception":{},"rawTitle":"should add an listener for native event","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"hjres6sfoz-a57wlfo9og-cn7e0xe000","code":"() => {\r\n            addListenerStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should download player resources","status":"pass","exception":{},"rawTitle":"should download player resources","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"hjres6sfoz-a57wlfo9og-6j19lhkrbp","code":"() => {\r\n            downloadFilesAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should remove the native event listener","status":"pass","exception":{},"rawTitle":"should remove the native event listener","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":5,"id":"hjres6sfoz-a57wlfo9og-10vrma8iyol","code":"() => {\r\n            removeStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When downloading player resources","description":"","tags":[],"sequence":20,"id":"hjres6sfoz-a57wlfo9og"}],"title":"PlayerResourcesRepository","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/PlayerResourcesRepository.Spec.js","id":"hjres6sfoz","path":"Services/Install"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":17,"failedCount":0,"pendingCount":0,"totalCount":17,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has access to the app","status":"pass","exception":{},"rawTitle":"the user has access to the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"ryq84c7kst-kvarxmxmm3-2rw5isaxr4","code":"() => {\r\n            launchAppStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns({ appInfo: appMagicAppInfo });\r\n        }","duration":3},{"title":"opening an app","status":"pass","exception":{},"rawTitle":"opening an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"ryq84c7kst-kvarxmxmm3-1cvx9ov5sr","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let openAppService = new Services_1.OpenAppService();\r\n            appInfo = yield openAppService.openAppAsync(appMagicAppInfo.id);\r\n        })","duration":1},{"title":"launchApp should be called","status":"pass","exception":{},"rawTitle":"launchApp should be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"ryq84c7kst-kvarxmxmm3-jkmwlt0b34","code":"() => {\r\n            launchAppStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the expected appInfo should be returned","status":"pass","exception":{},"rawTitle":"the expected appInfo should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"ryq84c7kst-kvarxmxmm3-1717etdpc6l","code":"() => {\r\n            appInfo.should.be.eql(Services_1.convertAppInfo(appMagicAppInfo));\r\n        }","duration":0}],"title":"opening an app","description":"","tags":[],"sequence":1,"id":"ryq84c7kst-kvarxmxmm3"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has access to the app","status":"pass","exception":{},"rawTitle":"the user has access to the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"ryq84c7kst-5t1xysx7nv-2rw5isaxr4","code":"() => {\r\n            launchAppStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns({ appInfo: appMagicAppInfo });\r\n        }","duration":1},{"title":"opening an app","status":"pass","exception":{},"rawTitle":"opening an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"ryq84c7kst-5t1xysx7nv-1cvx9ov5sr","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let openAppService = new Services_1.OpenAppService();\r\n            openAppService.openAppAsync(appMagicAppInfo.id);\r\n            appInfo = yield openAppService.waitForOpenAppAsync(appMagicAppInfo.id);\r\n        })","duration":1},{"title":"the expected appInfo should be returned","status":"pass","exception":{},"rawTitle":"the expected appInfo should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"ryq84c7kst-5t1xysx7nv-jkqzwxk5nk","code":"() => {\r\n            appInfo.should.be.eql(Services_1.convertAppInfo(appMagicAppInfo));\r\n        }","duration":0}],"title":"waiting for an app to open","description":"","tags":[],"sequence":2,"id":"ryq84c7kst-5t1xysx7nv"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user has access to the app","status":"pass","exception":{},"rawTitle":"the user has access to the app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"ryq84c7kst-2laml11lhf-2rw5isaxr4","code":"() => {\r\n            launchAppStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name).returns({ appInfo: appMagicAppInfo });\r\n        }","duration":1},{"title":"opening an app","status":"pass","exception":{},"rawTitle":"opening an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"ryq84c7kst-2laml11lhf-1cvx9ov5sr","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let openAppService = new Services_1.OpenAppService();\r\n            openAppService.openAppAsync(appMagicAppInfo.id);\r\n            try {\r\n                appInfo = yield openAppService.waitForOpenAppAsync(\"wrong id!\");\r\n            }\r\n            catch (error) {\r\n                caughtError = error;\r\n            }\r\n        })","duration":1},{"title":"and error should be thrown","status":"pass","exception":{},"rawTitle":"and error should be thrown","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"ryq84c7kst-2laml11lhf-fqn9ussqd1","code":"() => {\r\n            caughtError.message.should.be.eql(expectedErrorMessage);\r\n        }","duration":0}],"title":"waiting for an app to open but the caller supplies the wrong app id","description":"","tags":[],"sequence":3,"id":"ryq84c7kst-2laml11lhf"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user is offline","status":"pass","exception":{},"rawTitle":"the user is offline","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"ryq84c7kst-lr0qbzrw34-rplg5jnygl","code":"() => {\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IDeviceInfoProvider);\r\n            const infoProvider = new Mocks_1.MockDeviceInfoProvider(false, false);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IDeviceInfoProvider).toConstantValue(infoProvider);\r\n        }","duration":1},{"title":"opening an app","status":"pass","exception":{},"rawTitle":"opening an app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"ryq84c7kst-lr0qbzrw34-1cvx9ov5sr","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            let openAppService = new Services_1.OpenAppService();\r\n            appInfo = yield openAppService.waitForOpenAppAsync(appMagicAppInfo.id);\r\n        })","duration":0},{"title":"null is returned","status":"pass","exception":{},"rawTitle":"null is returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"ryq84c7kst-lr0qbzrw34-jkp7mxxwdc","code":"() => {\r\n            should.equal(appInfo, null);\r\n        }","duration":1}],"title":"Waiting for an app to open offline","description":"","tags":[],"sequence":4,"id":"ryq84c7kst-lr0qbzrw34"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the imported app","status":"pass","exception":{},"rawTitle":"the imported app","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"ryq84c7kst-6ogi281dqd-10bjndr2t1x","code":"() => {\r\n            runtimeAdapterStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, Adapters_1.RuntimeAdapter.prototype.getAppResourcesAsync.name);\r\n            InversifyConfigs_1.kernel.snapshot();\r\n            InversifyConfigs_1.kernel.unbind(InversifyConfigs_1.Types.IStoreProvider);\r\n            InversifyConfigs_1.kernel.bind(InversifyConfigs_1.Types.IStoreProvider).toConstantValue({\r\n                getStore: function () {\r\n                    return store;\r\n                }\r\n            });\r\n        }","duration":1},{"title":"opening an imported app","status":"pass","exception":{},"rawTitle":"opening an imported app","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"ryq84c7kst-6ogi281dqd-2rt1kmx3io","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const store = InversifyConfigs_1.kernel.get(InversifyConfigs_1.Types.IStoreProvider);\r\n            let openAppService = new Services_1.OpenAppService(store);\r\n            importedAppInfo = yield openAppService.openAppAsync(appInfo.appId);\r\n        })","duration":0},{"title":"the expected appInfo should be returned","status":"pass","exception":{},"rawTitle":"the expected appInfo should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"ryq84c7kst-6ogi281dqd-jkqzwxk5nk","code":"() => {\r\n            importedAppInfo.should.be.eql(appInfo);\r\n        }","duration":0},{"title":"Runtime adapter should not be called","status":"pass","exception":{},"rawTitle":"Runtime adapter should not be called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"ryq84c7kst-6ogi281dqd-143sp3d0nyb","code":"() => {\r\n            runtimeAdapterStub.called.should.be.eql(false);\r\n        }","duration":0}],"title":"Opening an imported app","description":"","tags":[],"sequence":5,"id":"ryq84c7kst-6ogi281dqd"}],"title":"opening of an App","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/OpenApp/OpenAppService.Spec.js","id":"ryq84c7kst","path":"Services/OpenApp"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":72,"failedCount":0,"pendingCount":0,"totalCount":72,"totalRuleViolations":4,"duration":55,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":28,"failedCount":0,"pendingCount":0,"totalCount":28,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app1, that requires webcam,microphone,location","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-16b24akgcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":5},{"title":"whether consent is needed should be true","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-2vm5byvjst","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":1},{"title":"the cache is called with app1","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zqh2wt8gj9","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appId","capabilities","authResources","needsConsent","alreadyConsentedCapabilities","alreadyConsentedAuthResources"],["app1","[\"webcam\", \"microphone\", \"location\"]","[]","true","","[]"],["app2","[\"webcam\", \"microphone\", \"location\"]","[]","false","[\"webcam\", \"microphone\", \"location\"]","[]"],["app3","[\"webcam\", \"microphone\", \"location\"]","[]","true","[\"microphone\", \"location\"]","[]"],["app4","[\"webcam\"]","[]","true","[\"microphone\", \"location\"]","[]"],["app4","[]","[]","false","","[]"],["app5","[]","[{\"name\": \"Power BI\", \"resourceId\": \"powerbi\"}]","true","","[]"],["app6","[]","[{\"name\": \"Power BI\", \"resourceId\": \"powerbi\"}]","false","","[\"powerbi\"]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app1, that requires webcam,microphone,location","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-16b24akgcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":5},{"title":"whether consent is needed should be true","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-2vm5byvjst","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":1},{"title":"the cache is called with app1","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zqh2wt8gj9","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app1","capabilities":["webcam","microphone","location"],"authResources":[],"needsConsent":true,"alreadyConsentedCapabilities":"","alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":1,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app2, that requires webcam,microphone,location","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-16b24akgcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be false","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-lr4p8l6qv4","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the cache is called with app2","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zquyyvv0l1","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app2","capabilities":["webcam","microphone","location"],"authResources":[],"needsConsent":false,"alreadyConsentedCapabilities":["webcam","microphone","location"],"alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":2,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app3, that requires webcam,microphone,location","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-16b24akgcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be true","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-2vm5byvjst","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":1},{"title":"the cache is called with app3","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zr954mwk8l","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app3","capabilities":["webcam","microphone","location"],"authResources":[],"needsConsent":true,"alreadyConsentedCapabilities":["microphone","location"],"alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":3,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app4, that requires webcam","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-kspy14g54l","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be true","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-2vm5byvjst","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":1},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the cache is called with app4","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zrnle2d49p","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app4","capabilities":["webcam"],"authResources":[],"needsConsent":true,"alreadyConsentedCapabilities":["microphone","location"],"alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":4,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app4, that requires ","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-b35fhefue8","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be false","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-lr4p8l6qv4","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the cache is called with app4","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zrnle2d49p","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":1}],"example":{"appId":"app4","capabilities":[],"authResources":[],"needsConsent":false,"alreadyConsentedCapabilities":"","alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":5,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app5, that requires ","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-3npe8hc6wt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be true","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-2vm5byvjst","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the cache is called with app5","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zs2br68pg5","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app5","capabilities":[],"authResources":[{"name":"Power BI","resourceId":"powerbi"}],"needsConsent":true,"alreadyConsentedCapabilities":"","alreadyConsentedAuthResources":[]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":6,"id":"2rtzighz4w-135ppx9u3uz"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the user opens a published app, app6, that requires ","status":"pass","exception":{},"rawTitle":"the user opens a published app, <appId>, that requires <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-135ppx9u3uz-3npe8hc6wt","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.alreadyConsentedCapabilities, authResources: scenarioOutlineContext.example.alreadyConsentedAuthResources } };\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            const testAppConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources.map(res => res.resourceId) };\r\n            consentNeeded = yield publishedAppConsentService.isConsentNeededAsync(scenarioOutlineContext.example.appId, testAppConsents);\r\n        })","duration":1},{"title":"whether consent is needed should be false","status":"pass","exception":{},"rawTitle":"whether consent is needed should be <needsConsent>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-135ppx9u3uz-lr4p8l6qv4","code":"() => {\r\n            consentNeeded.should.be.eql(scenarioOutlineContext.example.needsConsent);\r\n        }","duration":0},{"title":"the cache is called twice (once for device capabilities, once for device resources)","status":"pass","exception":{},"rawTitle":"the cache is called twice (once for device capabilities, once for device resources)","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-135ppx9u3uz-i79eqpgzc0","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"the cache is called with app6","status":"pass","exception":{},"rawTitle":"the cache is called with <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-135ppx9u3uz-zshc7yj9gl","code":"() => {\r\n            asyncStorageStub.calledWith(\"PublishedAppConsents\").should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app6","capabilities":[],"authResources":[{"name":"Power BI","resourceId":"powerbi"}],"needsConsent":false,"alreadyConsentedCapabilities":"","alreadyConsentedAuthResources":["powerbi"]},"title":"Check if the user needs to consent for the capabilities for a specific app","sequence":7,"id":"2rtzighz4w-135ppx9u3uz"}],"title":"Check if the user needs to consent for the capabilities for a specific app","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the capabilities of app1 that already has the following capabilities ","status":"pass","exception":{},"rawTitle":"getting the capabilities of <appId> that already has the following capabilities <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-xaafeb7y6j-b33uur2meo","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources } };\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            capabilities = yield publishedAppConsentService.getConsentedCapabilitiesAsync(scenarioOutlineContext.example.appId);\r\n            authResources = yield publishedAppConsentService.getConsentedAuthResourcesAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the following capabilities  should be returned","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-xaafeb7y6j-9y91ffoktn","code":"() => {\r\n            capabilities.should.be.eql(scenarioOutlineContext.example.capabilities);\r\n        }","duration":1},{"title":"the following authResources  should be returned","status":"pass","exception":{},"rawTitle":"the following authResources <authResources> should be returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Get the capabilities that the user already consented to for a specific app"}],"type":"Then","sequence":3,"id":"2rtzighz4w-xaafeb7y6j-jkkuj5khy8","code":"() => {\r\n            authResources.should.be.eql(scenarioOutlineContext.example.authResources);\r\n        }","duration":0},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-xaafeb7y6j-bq3z8ctocd","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appId","capabilities","authResources"],["app1","[]","[]"],["app2","[\"webcam\"]","[\"powerbi\"]"],["app3","[\"webcam\", \"microphone\", \"location\"]","[\"powerbi\"]"],["app4","[]","[\"powerbi\"]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the capabilities of app1 that already has the following capabilities ","status":"pass","exception":{},"rawTitle":"getting the capabilities of <appId> that already has the following capabilities <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-xaafeb7y6j-b33uur2meo","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources } };\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            capabilities = yield publishedAppConsentService.getConsentedCapabilitiesAsync(scenarioOutlineContext.example.appId);\r\n            authResources = yield publishedAppConsentService.getConsentedAuthResourcesAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the following capabilities  should be returned","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-xaafeb7y6j-9y91ffoktn","code":"() => {\r\n            capabilities.should.be.eql(scenarioOutlineContext.example.capabilities);\r\n        }","duration":1},{"title":"the following authResources  should be returned","status":"pass","exception":{},"rawTitle":"the following authResources <authResources> should be returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Get the capabilities that the user already consented to for a specific app"}],"type":"Then","sequence":3,"id":"2rtzighz4w-xaafeb7y6j-jkkuj5khy8","code":"() => {\r\n            authResources.should.be.eql(scenarioOutlineContext.example.authResources);\r\n        }","duration":0},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-xaafeb7y6j-bq3z8ctocd","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app1","capabilities":[],"authResources":[]},"title":"Get the capabilities that the user already consented to for a specific app","sequence":1,"id":"2rtzighz4w-xaafeb7y6j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the capabilities of app2 that already has the following capabilities webcam","status":"pass","exception":{},"rawTitle":"getting the capabilities of <appId> that already has the following capabilities <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-xaafeb7y6j-zlqthcqm1x","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources } };\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            capabilities = yield publishedAppConsentService.getConsentedCapabilitiesAsync(scenarioOutlineContext.example.appId);\r\n            authResources = yield publishedAppConsentService.getConsentedAuthResourcesAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the following capabilities webcam should be returned","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-xaafeb7y6j-jkj8swhrb4","code":"() => {\r\n            capabilities.should.be.eql(scenarioOutlineContext.example.capabilities);\r\n        }","duration":0},{"title":"the following authResources powerbi should be returned","status":"pass","exception":{},"rawTitle":"the following authResources <authResources> should be returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Get the capabilities that the user already consented to for a specific app"}],"type":"Then","sequence":3,"id":"2rtzighz4w-xaafeb7y6j-6ejkrb4vyd","code":"() => {\r\n            authResources.should.be.eql(scenarioOutlineContext.example.authResources);\r\n        }","duration":0},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-xaafeb7y6j-bq3z8ctocd","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app2","capabilities":["webcam"],"authResources":["powerbi"]},"title":"Get the capabilities that the user already consented to for a specific app","sequence":2,"id":"2rtzighz4w-xaafeb7y6j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the capabilities of app3 that already has the following capabilities webcam,microphone,location","status":"pass","exception":{},"rawTitle":"getting the capabilities of <appId> that already has the following capabilities <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-xaafeb7y6j-4ps1l4plh","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources } };\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            capabilities = yield publishedAppConsentService.getConsentedCapabilitiesAsync(scenarioOutlineContext.example.appId);\r\n            authResources = yield publishedAppConsentService.getConsentedAuthResourcesAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the following capabilities webcam,microphone,location should be returned","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-xaafeb7y6j-x0do7c8hb9","code":"() => {\r\n            capabilities.should.be.eql(scenarioOutlineContext.example.capabilities);\r\n        }","duration":0},{"title":"the following authResources powerbi should be returned","status":"pass","exception":{},"rawTitle":"the following authResources <authResources> should be returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Get the capabilities that the user already consented to for a specific app"}],"type":"Then","sequence":3,"id":"2rtzighz4w-xaafeb7y6j-6ejkrb4vyd","code":"() => {\r\n            authResources.should.be.eql(scenarioOutlineContext.example.authResources);\r\n        }","duration":1},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-xaafeb7y6j-bq3z8ctocd","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app3","capabilities":["webcam","microphone","location"],"authResources":["powerbi"]},"title":"Get the capabilities that the user already consented to for a specific app","sequence":3,"id":"2rtzighz4w-xaafeb7y6j"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":1,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"getting the capabilities of app4 that already has the following capabilities ","status":"pass","exception":{},"rawTitle":"getting the capabilities of <appId> that already has the following capabilities <capabilities>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-xaafeb7y6j-b33uur2meo","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            const mockStorage = { [`${scenarioOutlineContext.example.appId}`]: { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources } };\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(Promise.resolve(JSON.stringify(mockStorage)));\r\n            capabilities = yield publishedAppConsentService.getConsentedCapabilitiesAsync(scenarioOutlineContext.example.appId);\r\n            authResources = yield publishedAppConsentService.getConsentedAuthResourcesAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":0},{"title":"the following capabilities  should be returned","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be returned","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-xaafeb7y6j-9y91ffoktn","code":"() => {\r\n            capabilities.should.be.eql(scenarioOutlineContext.example.capabilities);\r\n        }","duration":0},{"title":"the following authResources powerbi should be returned","status":"pass","exception":{},"rawTitle":"the following authResources <authResources> should be returned","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"Get the capabilities that the user already consented to for a specific app"}],"type":"Then","sequence":3,"id":"2rtzighz4w-xaafeb7y6j-6ejkrb4vyd","code":"() => {\r\n            authResources.should.be.eql(scenarioOutlineContext.example.authResources);\r\n        }","duration":0},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-xaafeb7y6j-bq3z8ctocd","code":"() => {\r\n            asyncStorageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0}],"example":{"appId":"app4","capabilities":[],"authResources":["powerbi"]},"title":"Get the capabilities that the user already consented to for a specific app","sequence":4,"id":"2rtzighz4w-xaafeb7y6j"}],"title":"Get the capabilities that the user already consented to for a specific app","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":16,"failedCount":0,"pendingCount":0,"totalCount":16,"totalRuleViolations":0,"duration":28,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the following capabilities  for the app app1","status":"pass","exception":{},"rawTitle":"setting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-crrh9yge8-pzwkz0gcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            saveUserConsentsAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"saveUserConsentsAsync\");\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name);\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify({}));\r\n            appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            yield publishedAppConsentService.setAppConsents(scenarioOutlineContext.example.appId, appConsents);\r\n        })","duration":15},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-crrh9yge8-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the following capabilities  should be set on the cache","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be set on the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-crrh9yge8-15wfv3f4er1","code":"() => {\r\n            const expectedStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify(expectedStorage));\r\n        }","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-crrh9yge8-lqy5jynzpc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            saveUserConsentsAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["appId","capabilities","authResources"],["app1","[]","[]"],["app2","[\"webcam\"]","[\"powerbi\"]"],["app3","[\"webcam\", \"microphone\", \"location\"]","[\"powerbi\"]"],["app4","[]","[\"powerbi\"]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the following capabilities  for the app app1","status":"pass","exception":{},"rawTitle":"setting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-crrh9yge8-pzwkz0gcsg","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            saveUserConsentsAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"saveUserConsentsAsync\");\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name);\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify({}));\r\n            appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            yield publishedAppConsentService.setAppConsents(scenarioOutlineContext.example.appId, appConsents);\r\n        })","duration":15},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-crrh9yge8-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the following capabilities  should be set on the cache","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be set on the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-crrh9yge8-15wfv3f4er1","code":"() => {\r\n            const expectedStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify(expectedStorage));\r\n        }","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-crrh9yge8-lqy5jynzpc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            saveUserConsentsAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"example":{"appId":"app1","capabilities":[],"authResources":[]},"title":"Set the capabilities that the user just consented to","sequence":1,"id":"2rtzighz4w-crrh9yge8"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the following capabilities webcam for the app app2","status":"pass","exception":{},"rawTitle":"setting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-crrh9yge8-7d5xwar90r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            saveUserConsentsAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"saveUserConsentsAsync\");\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name);\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify({}));\r\n            appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            yield publishedAppConsentService.setAppConsents(scenarioOutlineContext.example.appId, appConsents);\r\n        })","duration":5},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-crrh9yge8-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the following capabilities webcam should be set on the cache","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be set on the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-crrh9yge8-lr0fiwsbwg","code":"() => {\r\n            const expectedStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify(expectedStorage));\r\n        }","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-crrh9yge8-lqy5jynzpc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            saveUserConsentsAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"example":{"appId":"app2","capabilities":["webcam"],"authResources":["powerbi"]},"title":"Set the capabilities that the user just consented to","sequence":2,"id":"2rtzighz4w-crrh9yge8"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the following capabilities webcam,microphone,location for the app app3","status":"pass","exception":{},"rawTitle":"setting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-crrh9yge8-11j3qtbr69f","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            saveUserConsentsAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"saveUserConsentsAsync\");\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name);\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify({}));\r\n            appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            yield publishedAppConsentService.setAppConsents(scenarioOutlineContext.example.appId, appConsents);\r\n        })","duration":4},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-crrh9yge8-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the following capabilities webcam,microphone,location should be set on the cache","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be set on the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-crrh9yge8-lr15s7otj4","code":"() => {\r\n            const expectedStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify(expectedStorage));\r\n        }","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-crrh9yge8-lqy5jynzpc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            saveUserConsentsAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"example":{"appId":"app3","capabilities":["webcam","microphone","location"],"authResources":["powerbi"]},"title":"Set the capabilities that the user just consented to","sequence":3,"id":"2rtzighz4w-crrh9yge8"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"setting the following capabilities  for the app app4","status":"pass","exception":{},"rawTitle":"setting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-crrh9yge8-t9zwwdea8w","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            RuntimeMocks.setupAsync();\r\n            saveUserConsentsAsyncStub = sinon.stub(Adapters_1.RuntimeAdapter.prototype, \"saveUserConsentsAsync\");\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name);\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify({}));\r\n            appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            yield publishedAppConsentService.setAppConsents(scenarioOutlineContext.example.appId, appConsents);\r\n        })","duration":4},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-crrh9yge8-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the following capabilities  should be set on the cache","status":"pass","exception":{},"rawTitle":"the following capabilities <capabilities> should be set on the cache","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-crrh9yge8-15wfv3f4er1","code":"() => {\r\n            const expectedStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify(expectedStorage));\r\n        }","duration":0},{"title":"saveUserConsentsAsyncStub should be called once","status":"pass","exception":{},"rawTitle":"saveUserConsentsAsyncStub should be called once","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"2rtzighz4w-crrh9yge8-lqy5jynzpc","code":"() => {\r\n            // tslint:disable-next-line:no-unused-expression\r\n            saveUserConsentsAsyncStub.calledOnce.should.be.true;\r\n        }","duration":0}],"example":{"appId":"app4","capabilities":[],"authResources":["powerbi"]},"title":"Set the capabilities that the user just consented to","sequence":4,"id":"2rtzighz4w-crrh9yge8"}],"title":"Set the capabilities that the user just consented to","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting the following capabilities  for the app app1","status":"pass","exception":{},"rawTitle":"deleting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-hkmfamj2z-pzwu6xgdxc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            const appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            const initialStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify(initialStorage));\r\n            yield publishedAppConsentService.clearAppConsentsAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":2},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-hkmfamj2z-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the capabilities are removed for app app1","status":"pass","exception":{},"rawTitle":"the capabilities are removed for app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-hkmfamj2z-nbhgfhxbd1","code":"() => {\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify({}));\r\n        }","duration":1}],"tables":[{"name":"","description":"","dataTable":[["appId","capabilities","authResources"],["app1","[]","[]"],["app2","[\"webcam\"]","[\"powerbi\"]"],["app3","[\"webcam\", \"microphone\", \"location\"]","[\"powerbi\"]"],["app4","[]","[\"powerbi\"]"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting the following capabilities  for the app app1","status":"pass","exception":{},"rawTitle":"deleting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-hkmfamj2z-pzwu6xgdxc","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            const appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            const initialStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify(initialStorage));\r\n            yield publishedAppConsentService.clearAppConsentsAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":2},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-hkmfamj2z-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the capabilities are removed for app app1","status":"pass","exception":{},"rawTitle":"the capabilities are removed for app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-hkmfamj2z-nbhgfhxbd1","code":"() => {\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify({}));\r\n        }","duration":1}],"example":{"appId":"app1","capabilities":[],"authResources":[]},"title":"Delete the capabilities that the user just revoked permissions to","sequence":1,"id":"2rtzighz4w-hkmfamj2z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting the following capabilities webcam for the app app2","status":"pass","exception":{},"rawTitle":"deleting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-hkmfamj2z-r2atgkcon4","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            const appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            const initialStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify(initialStorage));\r\n            yield publishedAppConsentService.clearAppConsentsAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":2},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-hkmfamj2z-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the capabilities are removed for app app2","status":"pass","exception":{},"rawTitle":"the capabilities are removed for app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-hkmfamj2z-nbvchkjun1","code":"() => {\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify({}));\r\n        }","duration":0}],"example":{"appId":"app2","capabilities":["webcam"],"authResources":["powerbi"]},"title":"Delete the capabilities that the user just revoked permissions to","sequence":2,"id":"2rtzighz4w-hkmfamj2z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting the following capabilities webcam,microphone,location for the app app3","status":"pass","exception":{},"rawTitle":"deleting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-hkmfamj2z-s5r2yeteg0","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            const appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            const initialStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify(initialStorage));\r\n            yield publishedAppConsentService.clearAppConsentsAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-hkmfamj2z-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the capabilities are removed for app app3","status":"pass","exception":{},"rawTitle":"the capabilities are removed for app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-hkmfamj2z-nc9inbleal","code":"() => {\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify({}));\r\n        }","duration":0}],"example":{"appId":"app3","capabilities":["webcam","microphone","location"],"authResources":["powerbi"]},"title":"Delete the capabilities that the user just revoked permissions to","sequence":3,"id":"2rtzighz4w-hkmfamj2z"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"deleting the following capabilities  for the app app4","status":"pass","exception":{},"rawTitle":"deleting the following capabilities <capabilities> for the app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":1,"id":"2rtzighz4w-hkmfamj2z-ta064aebds","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            publishedAppConsentService = new Services.PublishedAppConsentService();\r\n            asyncStorageStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.setItem.name).returns(Promise.resolve());\r\n            const appConsents = { deviceCapabilities: scenarioOutlineContext.example.capabilities, authResources: scenarioOutlineContext.example.authResources };\r\n            const initialStorage = { [`${scenarioOutlineContext.example.appId}`]: appConsents };\r\n            asyncStorageGetStub = sinon.stub(react_native_1.AsyncStorage, react_native_1.AsyncStorage.getItem.name).returns(JSON.stringify(initialStorage));\r\n            yield publishedAppConsentService.clearAppConsentsAsync(scenarioOutlineContext.example.appId);\r\n        })","duration":1},{"title":"the cache is called","status":"pass","exception":{},"rawTitle":"the cache is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":2,"id":"2rtzighz4w-hkmfamj2z-kle0ly7vcd","code":"() => {\r\n            asyncStorageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"the capabilities are removed for app app4","status":"pass","exception":{},"rawTitle":"the capabilities are removed for app <appId>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"2rtzighz4w-hkmfamj2z-ncnywr1ybp","code":"() => {\r\n            asyncStorageStub.getCall(0).args[1].should.be.eql(JSON.stringify({}));\r\n        }","duration":0}],"example":{"appId":"app4","capabilities":[],"authResources":["powerbi"]},"title":"Delete the capabilities that the user just revoked permissions to","sequence":4,"id":"2rtzighz4w-hkmfamj2z"}],"title":"Delete the capabilities that the user just revoked permissions to","description":"","tags":[]}],"title":"Manage and cache device capabilities and auth resources for the published app","description":"Rules:\n* Check if the user needs to consent for the capabilities for a specific app from the cache\n* Get the capabilities that the user already consented to use for a specific app from the cache\n* Set the capabilities that the user just consented to for a specific app in the cache\n* Delete capabilities that the user previously consented to and now has revoked from the cache","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/PublishedAppConsent/PublishedAppConsent.Spec.js","id":"2rtzighz4w","path":"Services/PublishedAppConsent"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":36,"failedCount":0,"pendingCount":0,"totalCount":36,"totalRuleViolations":0,"duration":10,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-falsjoobj1-10k33p9p2a3","code":"() => {\r\n            const response = { \"UpdateNeeded\": true, \"iOSUpdateLink\": scenarioOutlineContext.example.iOSLink, \"AndroidUpdateLink\": scenarioOutlineContext.example.AndroidLink, \"WindowsUpdateLink\": \"WindowsUpdateLink\" };\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":2},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-falsjoobj1-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":1},{"title":"the store link is http://AndroidLink","status":"pass","exception":{},"rawTitle":"the store link is <Link>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-falsjoobj1-z9h3o9u9og","code":"() => {\r\n            updateLink.should.be.equal(scenarioOutlineContext.example.Link);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["Platform","Link","Android Link","iOS Link"],["Android","http://AndroidLink","http://AndroidLink","http://iOSLink"],["iOS","http://iOSLink","http://AndroidLink","http://iOSLink"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-falsjoobj1-10k33p9p2a3","code":"() => {\r\n            const response = { \"UpdateNeeded\": true, \"iOSUpdateLink\": scenarioOutlineContext.example.iOSLink, \"AndroidUpdateLink\": scenarioOutlineContext.example.AndroidLink, \"WindowsUpdateLink\": \"WindowsUpdateLink\" };\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":2},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-falsjoobj1-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":1},{"title":"the store link is http://AndroidLink","status":"pass","exception":{},"rawTitle":"the store link is <Link>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-falsjoobj1-z9h3o9u9og","code":"() => {\r\n            updateLink.should.be.equal(scenarioOutlineContext.example.Link);\r\n        }","duration":0}],"example":{"Platform":"Android","Link":"http://AndroidLink","AndroidLink":"http://AndroidLink","iOSLink":"http://iOSLink"},"title":"Player requires an upgrade","sequence":1,"id":"jkkuugxwu8-falsjoobj1"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on iOS","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-falsjoobj1-t4jf3j0y5v","code":"() => {\r\n            const response = { \"UpdateNeeded\": true, \"iOSUpdateLink\": scenarioOutlineContext.example.iOSLink, \"AndroidUpdateLink\": scenarioOutlineContext.example.AndroidLink, \"WindowsUpdateLink\": \"WindowsUpdateLink\" };\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-falsjoobj1-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the store link is http://iOSLink","status":"pass","exception":{},"rawTitle":"the store link is <Link>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-falsjoobj1-z9csqqyyrk","code":"() => {\r\n            updateLink.should.be.equal(scenarioOutlineContext.example.Link);\r\n        }","duration":0}],"example":{"Platform":"iOS","Link":"http://iOSLink","AndroidLink":"http://AndroidLink","iOSLink":"http://iOSLink"},"title":"Player requires an upgrade","sequence":2,"id":"jkkuugxwu8-falsjoobj1"}],"title":"Player requires an upgrade","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player does not require a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player does not require a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-lqzo1aerow-jkksv9zi1s","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-lqzo1aerow-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-lqzo1aerow-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["Platform"],["Android"],["iOS"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player does not require a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player does not require a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-lqzo1aerow-jkksv9zi1s","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-lqzo1aerow-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-lqzo1aerow-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"Android"},"title":"Player does not require an upgrade","sequence":1,"id":"jkkuugxwu8-lqzo1aerow"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player does not require a forced upgrade on iOS","status":"pass","exception":{},"rawTitle":"the player does not require a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-lqzo1aerow-u8o8n3kgtc","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-lqzo1aerow-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"jkkuugxwu8-lqzo1aerow-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"iOS"},"title":"Player does not require an upgrade","sequence":2,"id":"jkkuugxwu8-lqzo1aerow"}],"title":"Player does not require an upgrade","description":"","tags":[]},{"type":"ScenarioOutline","ruleViolations":[],"statistics":{"passCount":24,"failedCount":0,"pendingCount":0,"totalCount":24,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-10k33p9p2a3","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":1},{"title":"the response returned is null","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-mjq5ffmr23","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"tables":[{"name":"","description":"","dataTable":[["Platform","Response"],["Android","null"],["Android","false"],["Android","empty"],["iOS","null"],["iOS","false"],["iOS","empty"]]}],"examples":[{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-10k33p9p2a3","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":0},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":1},{"title":"the response returned is null","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-mjq5ffmr23","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"Android","Response":null},"title":"Player requires an upgrade and an error occurs","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-10k33p9p2a3","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the response returned is false","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-lqyw7vpbow","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"Android","Response":false},"title":"Player requires an upgrade and an error occurs","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on Android","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-10k33p9p2a3","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the response returned is empty","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-pgzj3ufnb4","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"Android","Response":"empty"},"title":"Player requires an upgrade and an error occurs","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on iOS","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-t4jf3j0y5v","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the response returned is null","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-mjq5ffmr23","code":"() => {\r\n        }","duration":1},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"iOS","Response":null},"title":"Player requires an upgrade and an error occurs","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on iOS","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-t4jf3j0y5v","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the response returned is false","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-lqyw7vpbow","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"iOS","Response":false},"title":"Player requires an upgrade and an error occurs","sequence":5,"id":"jkkuugxwu8-4z93yi3bkb"},{"type":"ScenarioExample","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the player requires a forced upgrade on iOS","status":"pass","exception":{},"rawTitle":"the player requires a forced upgrade on <Platform>","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"jkkuugxwu8-4z93yi3bkb-t4jf3j0y5v","code":"() => {\r\n            store = Utilities_1.createMockStore();\r\n            checkForUpdateAsyncStub = sinon.stub(PlayerVerificationBaseService_1.PlayerVerificationBaseService, \"checkForUpdateAsync\");\r\n            checkForUpdateAsyncStub.callsFake(() => {\r\n                return scenarioOutlineContext.example.response;\r\n            });\r\n        }","duration":1},{"title":"checking if an update is required","status":"pass","exception":{},"rawTitle":"checking if an update is required","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"jkkuugxwu8-4z93yi3bkb-jkpdh7wrsw","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            updateLink = yield servicePlatform[scenarioOutlineContext.example.Platform].getUpdateLinkIfAvailableAsync();\r\n        })","duration":0},{"title":"the response returned is empty","status":"pass","exception":{},"rawTitle":"the response returned is <Response>","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":3,"id":"jkkuugxwu8-4z93yi3bkb-pgzj3ufnb4","code":"() => {\r\n        }","duration":0},{"title":"the store link is null","status":"pass","exception":{},"rawTitle":"the store link is null","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":4,"id":"jkkuugxwu8-4z93yi3bkb-11lba55szb4","code":"() => {\r\n            expect(updateLink).to.be.equal(null);\r\n        }","duration":0}],"example":{"Platform":"iOS","Response":"empty"},"title":"Player requires an upgrade and an error occurs","sequence":6,"id":"jkkuugxwu8-4z93yi3bkb"}],"title":"Player requires an upgrade and an error occurs","description":"","tags":[]}],"title":"Check if force upgrade of Power Apps Client required","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Upgraders/PlayerVerificationService.Spec.js","id":"jkkuugxwu8","path":"Services/Upgraders"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":17,"failedCount":0,"pendingCount":0,"totalCount":17,"totalRuleViolations":4,"duration":15,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":2,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"the main upgrader","status":"pass","exception":{},"rawTitle":"the main upgrader","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"d6apzgctls-zpd2pk6flp-7nz48suh5s","code":"() => {\r\n            moveAppSandboxUpgraderShouldRunAsyncStub = sinon.stub(Upgraders_1.MoveAppSandboxUpgrader.prototype, Upgraders_1.MoveAppSandboxUpgrader.prototype.shouldRunAsync.name).returns(Promise.resolve(true));\r\n            moveAppSandboxRunUpgraderAsyncStub = sinon.stub(Upgraders_1.MoveAppSandboxUpgrader.prototype, Upgraders_1.MoveAppSandboxUpgrader.prototype.runUpgraderAsync.name).returns(Promise.resolve());\r\n            deleteCordovaSpecificFilesUpgraderShouldRunAsyncStub = sinon.stub(Upgraders_1.DeleteCordovaSpecificFilesUpgrader.prototype, Upgraders_1.DeleteCordovaSpecificFilesUpgrader.prototype.shouldRunAsync.name).returns(Promise.resolve(true));\r\n            deleteCordovaSpecificFilesUpgraderRunUpgraderAsyncStub = sinon.stub(Upgraders_1.DeleteCordovaSpecificFilesUpgrader.prototype, Upgraders_1.DeleteCordovaSpecificFilesUpgrader.prototype.runUpgraderAsync.name).returns(Promise.resolve());\r\n            upgrader = index_1.kernel.get(index_1.Types.IPlayerUpgrader);\r\n        }","duration":5},{"title":"you check if you can run the main upgrader","status":"pass","exception":{},"rawTitle":"you check if you can run the main upgrader","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"d6apzgctls-zpd2pk6flp-6iy1cv2s6r","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            canRun = yield upgrader.shouldRunAsync();\r\n        })","duration":1},{"title":"it will return ture","status":"pass","exception":{},"rawTitle":"it will return ture","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"d6apzgctls-zpd2pk6flp-lqwk351cw0","code":"() => {\r\n            canRun.should.be.eql(true);\r\n        }","duration":0},{"title":"the sub upgraders shouldRunAsync are called","status":"pass","exception":{},"rawTitle":"the sub upgraders shouldRunAsync are called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"When you run the main upgrade, all sub upgraders run in order."}],"type":"Then","sequence":4,"id":"d6apzgctls-zpd2pk6flp-yzmh734sr7","code":"() => {\r\n            moveAppSandboxUpgraderShouldRunAsyncStub.calledOnce.should.be.eql(true);\r\n            deleteCordovaSpecificFilesUpgraderShouldRunAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"you run the main upgrader","status":"pass","exception":{},"rawTitle":"you run the main upgrader","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"When you run the main upgrade, all sub upgraders run in order."}],"type":"When","sequence":5,"id":"d6apzgctls-zpd2pk6flp-xc1u7xg3lv","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield upgrader.runUpgraderAsync();\r\n        })","duration":1},{"title":"the sub upgraders runUpgraderAsync are called","status":"pass","exception":{},"rawTitle":"the sub upgraders runUpgraderAsync are called","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":6,"id":"d6apzgctls-zpd2pk6flp-4mon1gbhgr","code":"() => {\r\n            moveAppSandboxRunUpgraderAsyncStub.calledOnce.should.be.eql(true);\r\n            deleteCordovaSpecificFilesUpgraderRunUpgraderAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When you run the main upgrade, all sub upgraders run in order.","description":"","tags":[],"sequence":1,"id":"d6apzgctls-zpd2pk6flp"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":2,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a MoveAppSandbox Upgrader","status":"pass","exception":{},"rawTitle":"a MoveAppSandbox Upgrader","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"d6apzgctls-lr0u6hl3tc-1eniddnpf9","code":"() => {\r\n            upgrader = new Upgraders_1.MoveAppSandboxUpgrader();\r\n            doesFileExistAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.doesFileExistAsync.name).callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return true;\r\n            }));\r\n            readTextFromFileAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.readTextFromFileAsync.name).callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n                return AppIdentityMapContent;\r\n            }));\r\n            linkOrCopyFoldersAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.linkOrCopyFoldersAsync.name).callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n            }));\r\n        }","duration":2},{"title":"shouldRunAsync is called","status":"pass","exception":{},"rawTitle":"shouldRunAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"d6apzgctls-lr0u6hl3tc-jkp644ukps","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            shouldRunResult = yield upgrader.shouldRunAsync();\r\n        })","duration":0},{"title":"it returns true","status":"pass","exception":{},"rawTitle":"it returns true","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"d6apzgctls-lr0u6hl3tc-12cq3qw97er","code":"() => {\r\n            shouldRunResult.should.be.eql(true);\r\n        }","duration":0},{"title":"it should call doesFileExistAsync twice with the right params.","status":"pass","exception":{},"rawTitle":"it should call doesFileExistAsync twice with the right params.","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"d6apzgctls-lr0u6hl3tc-hyt1n6wr31","code":"() => {\r\n            doesFileExistAsyncStub.calledTwice.should.be.eql(true);\r\n            doesFileExistAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.AppIdentityMap).should.be.eql(true);\r\n            doesFileExistAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.StaticContentIdentityMap).should.be.eql(true);\r\n        }","duration":0},{"title":"runUpgraderAsync is called","status":"pass","exception":{},"rawTitle":"runUpgraderAsync is called","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"if the user has data saved in the sandbox, they should be able to load it after the upgrade"}],"type":"When","sequence":5,"id":"d6apzgctls-lr0u6hl3tc-jkjrbkbn0g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            yield upgrader.runUpgraderAsync();\r\n        })","duration":1},{"title":"readTextFromFile is called with the right param","status":"pass","exception":{},"rawTitle":"readTextFromFile is called with the right param","description":"","docString":"","values":[],"ruleViolations":[{"rule":3,"title":"if the user has data saved in the sandbox, they should be able to load it after the upgrade"}],"type":"Then","sequence":6,"id":"d6apzgctls-lr0u6hl3tc-x7pm4wevql","code":"() => {\r\n            readTextFromFileAsyncStub.calledOnce.should.be.eql(true);\r\n            readTextFromFileAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.AppIdentityMap).should.be.eql(true);\r\n        }","duration":0},{"title":"linkOrCopyFoldersAsync is called with the right params","status":"pass","exception":{},"rawTitle":"linkOrCopyFoldersAsync is called with the right params","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":7,"id":"d6apzgctls-lr0u6hl3tc-c7df9qvpjv","code":"() => {\r\n            linkOrCopyFoldersAsyncStub.callCount.should.be.eql(4);\r\n            linkOrCopyFoldersAsyncStub.calledWith(`1/${Config_1.Constants.FolderNames.Cordova.AppUserSavedData}/`, `${Config_1.Constants.FolderNames.ReactNativeAppsSandbox}/b8d1f905-e982-4be6-8475-a95cb6d487c0`);\r\n            linkOrCopyFoldersAsyncStub.calledWith(`2/${Config_1.Constants.FolderNames.Cordova.AppUserSavedData}/`, `${Config_1.Constants.FolderNames.ReactNativeAppsSandbox}/322d7b47-7ae0-4fc9-8d97-cdaa6cde5c9c`);\r\n            linkOrCopyFoldersAsyncStub.calledWith(`3/${Config_1.Constants.FolderNames.Cordova.AppUserSavedData}/`, `${Config_1.Constants.FolderNames.ReactNativeAppsSandbox}/e3dcb410-b2e9-4647-b73c-c2867ce04660`);\r\n            linkOrCopyFoldersAsyncStub.calledWith(`4/${Config_1.Constants.FolderNames.Cordova.AppUserSavedData}/`, `${Config_1.Constants.FolderNames.ReactNativeAppsSandbox}/5cde2b62-e2b4-4cd2-9413-6592057d49d1`);\r\n        }","duration":0}],"title":"if the user has data saved in the sandbox, they should be able to load it after the upgrade","description":"","tags":[],"sequence":2,"id":"d6apzgctls-lr0u6hl3tc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"a DeleteCordovaSpecificFiles Upgrader","status":"pass","exception":{},"rawTitle":"a DeleteCordovaSpecificFiles Upgrader","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"d6apzgctls-7bo68glsx9-pbte9q2pkl","code":"() => {\r\n            upgrader = new Upgraders_1.DeleteCordovaSpecificFilesUpgrader();\r\n            readTextFromFileAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.readTextFromFileAsync.name).callsFake((name) => __awaiter(this, void 0, void 0, function* () {\r\n                if (name === Config_1.Constants.FileNames.Cordova.AppIdentityMap)\r\n                    return AppIdentityMapContent;\r\n                if (name === Config_1.Constants.FileNames.Cordova.StaticContentIdentityMap)\r\n                    return StaticContentMapContent;\r\n            }));\r\n            deleteFolderAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.deleteFolderAsync.name).callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n            }));\r\n            deleteFileAsyncStub = sinon.stub(react_native_file_system_1.RNFileSystem, react_native_file_system_1.RNFileSystem.deleteFileAsync.name).callsFake(() => __awaiter(this, void 0, void 0, function* () {\r\n            }));\r\n        }","duration":2},{"title":"runUpgraderAsync is called","status":"pass","exception":{},"rawTitle":"runUpgraderAsync is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"d6apzgctls-7bo68glsx9-jkjrbkbn0g","code":"() => __awaiter(this, void 0, void 0, function* () {\r\n            upgrader.runUpgraderAsync();\r\n        })","duration":2},{"title":"readTextFromFileAsync should be called twice","status":"pass","exception":{},"rawTitle":"readTextFromFileAsync should be called twice","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"d6apzgctls-7bo68glsx9-17uapn28ct7","code":"() => {\r\n            readTextFromFileAsyncStub.calledTwice.should.be.eql(true);\r\n            readTextFromFileAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.AppIdentityMap).should.be.eql(true);\r\n            readTextFromFileAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.StaticContentIdentityMap).should.be.eql(true);\r\n        }","duration":0},{"title":"deleteFolderAsync should be called for the right files and folders","status":"pass","exception":{},"rawTitle":"deleteFolderAsync should be called for the right files and folders","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"d6apzgctls-7bo68glsx9-1fjgjkfsb7","code":"() => {\r\n            deleteFolderAsyncStub.callCount.should.be.eql(10);\r\n            deleteFileAsyncStub.callCount.should.be.eql(7);\r\n            deleteFolderAsyncStub.calledWith(\"1\");\r\n            deleteFolderAsyncStub.calledWith(\"2\");\r\n            deleteFolderAsyncStub.calledWith(\"3\");\r\n            deleteFolderAsyncStub.calledWith(\"4\");\r\n            deleteFileAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.AppIdentityMap);\r\n            deleteFolderAsyncStub.calledWith(\"s0\");\r\n            deleteFolderAsyncStub.calledWith(\"s1\");\r\n            deleteFolderAsyncStub.calledWith(\"s2\");\r\n            deleteFolderAsyncStub.calledWith(\"s3\");\r\n            deleteFolderAsyncStub.calledWith(\"s4\");\r\n            deleteFileAsyncStub.calledWith(Config_1.Constants.FileNames.Cordova.StaticContentIdentityMap);\r\n            deleteFileAsyncStub(Config_1.Constants.FileNames.Cordova.AppSettings);\r\n            deleteFileAsyncStub(Config_1.Constants.FileNames.Cordova.CacheManager);\r\n            deleteFileAsyncStub(Config_1.Constants.FileNames.Cordova.UserIdentityMap);\r\n            deleteFileAsyncStub(Config_1.Constants.FileNames.Cordova.AppIndex);\r\n            deleteFileAsyncStub(Config_1.Constants.FileNames.Cordova.CachedServerAppIndex);\r\n            deleteFolderAsyncStub(Config_1.Constants.FolderNames.Cordova.UserCache);\r\n        }","duration":1}],"title":"The cordova player specific files are deleted.","description":"","tags":[],"sequence":3,"id":"d6apzgctls-7bo68glsx9"}],"title":"The user can upgrade from Corodva player to react-native Player without using their data","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Upgraders/Upgraders.Spec.js","id":"d6apzgctls","path":"Services/Upgraders"},{"type":"Feature","ruleViolations":[],"statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"scenarios":[{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an actionHandler that has been setup","status":"pass","exception":{},"rawTitle":"an actionHandler that has been setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lqvq86jnkw-a58k9z5qlc-q6vcuvu46d","code":"() => {\r\n            const doDispatch = () => { };\r\n            const doGetState = () => { };\r\n            const nextMiddleware = () => { };\r\n            const store = { dispatch: doDispatch, getState: doGetState };\r\n            let nextHandler = AsyncAction_1.asyncActionsMiddleware(store);\r\n            actionHandler = nextHandler(nextMiddleware);\r\n        }","duration":1},{"title":"passing an AsyncAction","status":"pass","exception":{},"rawTitle":"passing an AsyncAction","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lqvq86jnkw-a58k9z5qlc-4prihpzbf","code":"() => {\r\n            actionHandler(new TestAsyncAction(actionBody));\r\n        }","duration":0},{"title":"the action body is called","status":"pass","exception":{},"rawTitle":"the action body is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lqvq86jnkw-a58k9z5qlc-jkrituvz4w","code":"() => {\r\n            actionBody.calledOnce.should.be.equal(true);\r\n        }","duration":0}],"title":"AsyncActionsMiddleware can handle AsyncActions","description":"","tags":[],"sequence":1,"id":"lqvq86jnkw-a58k9z5qlc"},{"type":"Scenario","ruleViolations":[],"statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"steps":[{"title":"an actionHandler that has been setup","status":"pass","exception":{},"rawTitle":"an actionHandler that has been setup","description":"","docString":"","values":[],"ruleViolations":[],"type":"Given","sequence":1,"id":"lqvq86jnkw-ph3fsrd4zk-q6vcuvu46d","code":"() => {\r\n            const doDispatch = () => { };\r\n            const doGetState = () => { };\r\n            nextMiddleware = sinon.spy();\r\n            const store = { dispatch: doDispatch, getState: doGetState };\r\n            let nextHandler = AsyncAction_1.asyncActionsMiddleware(store);\r\n            actionHandler = nextHandler(nextMiddleware);\r\n        }","duration":0},{"title":"passing an non-AsyncAction","status":"pass","exception":{},"rawTitle":"passing an non-AsyncAction","description":"","docString":"","values":[],"ruleViolations":[],"type":"When","sequence":2,"id":"lqvq86jnkw-ph3fsrd4zk-touq4td3qd","code":"() => {\r\n            actionHandler(simpleAction);\r\n        }","duration":1},{"title":"the nextHandler is called","status":"pass","exception":{},"rawTitle":"the nextHandler is called","description":"","docString":"","values":[],"ruleViolations":[],"type":"Then","sequence":3,"id":"lqvq86jnkw-ph3fsrd4zk-2utzt0esed","code":"() => {\r\n            nextMiddleware.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"nextMiddleware is called with the right action","status":"pass","exception":{},"rawTitle":"nextMiddleware is called with the right action","description":"","docString":"","values":[],"ruleViolations":[],"type":"and","sequence":4,"id":"lqvq86jnkw-ph3fsrd4zk-vgphepgbj1","code":"() => {\r\n            nextMiddleware.calledWith(simpleAction).should.be.eql(true);\r\n        }","duration":0}],"title":"AsyncActionsMiddleware can handle non-AsyncActions correctly","description":"","tags":[],"sequence":2,"id":"lqvq86jnkw-ph3fsrd4zk"}],"title":"AsyncActions and AsyncActionsMiddleware","description":"","tags":[],"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Utilities/AsyncAction.spec.js","id":"lqvq86jnkw","path":"Utilities"}],"suites":[{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should navigate to terms of service link","status":"pass","exception":{},"id":"26u2i7u92b-a3wcdhqov7-4sc2czdbkd","code":"() => {\r\n            // check if Linking.openURL was called\r\n            methodStub.calledOnce.should.be.equal(true);\r\n        }","duration":1},{"title":"should be called with correct terms of service link value","status":"pass","exception":{},"id":"26u2i7u92b-a3wcdhqov7-17oaqazlqr1","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.TermsOfService).should.be.eql(true);\r\n        }","duration":0}],"title":"When clicking on terms of service link","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/AgreementSection.Spec.js","step":{"title":"should be called with correct terms of service link value","status":"pass","exception":{},"id":"26u2i7u92b-a3wcdhqov7-17oaqazlqr1","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.TermsOfService).should.be.eql(true);\r\n        }","duration":0},"id":"26u2i7u92b-a3wcdhqov7"},{"type":"context","children":[],"tests":[{"title":"should navigate to privacy terms link","status":"pass","exception":{},"id":"26u2i7u92b-oaqrd2q4j7-z9ij47uvsw","code":"() => {\r\n            // check if Linking.openURL was called\r\n            methodStub.calledOnce.should.be.equal(true);\r\n        }","duration":0},{"title":"should be called with correct privacy terms link value","status":"pass","exception":{},"id":"26u2i7u92b-oaqrd2q4j7-falo3uti77","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.PrivacyTerms).should.be.eql(true);\r\n        }","duration":1}],"title":"When clicking on privacy terms link","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/AgreementSection.Spec.js","step":{"title":"should be called with correct privacy terms link value","status":"pass","exception":{},"id":"26u2i7u92b-oaqrd2q4j7-falo3uti77","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.PrivacyTerms).should.be.eql(true);\r\n        }","duration":1},"id":"26u2i7u92b-oaqrd2q4j7"}],"tests":[],"title":"<AgreementSection />","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/AgreementSection.Spec.js","id":"26u2i7u92b","path":"Components/Authentication"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should have a WelcomeSection","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-rwzr9xw7aj","code":"() => {\r\n            wrapper.find(\"WelcomeSection\").should.be.length(1);\r\n        }","duration":2},{"title":"should have an AgreementSection","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-16b93k8u868","code":"() => {\r\n            wrapper.find(\"AgreementSection\").should.be.length(1);\r\n        }","duration":1},{"title":"should have a SignUpSection","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-x8k4zvmtoj","code":"() => {\r\n            wrapper.find(\"SignUpSection\").should.be.length(1);\r\n        }","duration":0},{"title":"should have a placeholder text in the input for emailAddress","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-a55n2zl0bk","code":"() => {\r\n            wrapper.find(\"TextBox\").props().placeholder.should.be.eql(Localization_1.localization.SignIn_Email);\r\n        }","duration":1},{"title":"should have an empty emailAddress","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-scgks9ivmt","code":"() => {\r\n            (wrapper.state().emailAddress).should.be.eql(\"\");\r\n        }","duration":1},{"title":"should have a disabled signin button","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-mlfhaufwvp","code":"() => {\r\n            wrapper.find(Components_1.Touchable).props().disabled.should.be.eql(true);\r\n        }","duration":0},{"title":"should show no network error","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-36ibla8o91","code":"() => {\r\n            const networkErrorText = wrapper.find({ testID: Authentication_1.UnconnectedLoginScreenTestIDs.networkErrorMessage });\r\n            networkErrorText.should.be.length(0);\r\n        }","duration":0}],"title":"When LoginScreen displayed","statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":5,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","step":{"title":"should show no network error","status":"pass","exception":{},"id":"15m1gbgr6xs-15vnp7qdv19-36ibla8o91","code":"() => {\r\n            const networkErrorText = wrapper.find({ testID: Authentication_1.UnconnectedLoginScreenTestIDs.networkErrorMessage });\r\n            networkErrorText.should.be.length(0);\r\n        }","duration":0},"id":"15m1gbgr6xs-15vnp7qdv19"},{"type":"context","children":[],"tests":[{"title":"should have a disabled signin button","status":"pass","exception":{},"id":"15m1gbgr6xs-a2quy2snaj-mlfhaufwvp","code":"() => {\r\n            wrapper.find(Components_1.Touchable).props().disabled.should.be.eql(true);\r\n        }","duration":0},{"title":"should show a network error message","status":"pass","exception":{},"id":"15m1gbgr6xs-a2quy2snaj-o5vn2gou3n","code":"() => {\r\n            const networkErrorText = wrapper.find({ testID: Authentication_1.UnconnectedLoginScreenTestIDs.networkErrorMessage });\r\n            networkErrorText.should.be.length(1);\r\n        }","duration":1}],"title":"When Network error happens","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","step":{"title":"should show a network error message","status":"pass","exception":{},"id":"15m1gbgr6xs-a2quy2snaj-o5vn2gou3n","code":"() => {\r\n            const networkErrorText = wrapper.find({ testID: Authentication_1.UnconnectedLoginScreenTestIDs.networkErrorMessage });\r\n            networkErrorText.should.be.length(1);\r\n        }","duration":1},"id":"15m1gbgr6xs-a2quy2snaj"},{"type":"context","children":[],"tests":[{"title":"should have the signin button enabled.","status":"pass","exception":{},"id":"15m1gbgr6xs-jkj97znn5s-mwl8v98sgw","code":"() => {\r\n            wrapper.find(Components_1.Touchable).props().disabled.should.be.eql(false);\r\n        }","duration":0}],"title":"When email is valid","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","step":{"title":"should have the signin button enabled.","status":"pass","exception":{},"id":"15m1gbgr6xs-jkj97znn5s-mwl8v98sgw","code":"() => {\r\n            wrapper.find(Components_1.Touchable).props().disabled.should.be.eql(false);\r\n        }","duration":0},"id":"15m1gbgr6xs-jkj97znn5s"},{"type":"context","children":[],"tests":[{"title":"should have the signin button enabled","status":"pass","exception":{},"id":"15m1gbgr6xs-a53n9fj9a8-15vnikgknk3","code":"() => {\r\n            wrapper.find(Components_1.Touchable).props().disabled.should.be.eql(false);\r\n        }","duration":0},{"title":"should set the state to the currently entered email address","status":"pass","exception":{},"id":"15m1gbgr6xs-a53n9fj9a8-37ebhvtnzf","code":"() => {\r\n            // Check that the state updated email value\r\n            wrapper.state().emailAddress.should.be.eql(emailValue);\r\n        }","duration":1}],"title":"When user enters email address","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","step":{"title":"should set the state to the currently entered email address","status":"pass","exception":{},"id":"15m1gbgr6xs-a53n9fj9a8-37ebhvtnzf","code":"() => {\r\n            // Check that the state updated email value\r\n            wrapper.state().emailAddress.should.be.eql(emailValue);\r\n        }","duration":1},"id":"15m1gbgr6xs-a53n9fj9a8"},{"type":"context","children":[],"tests":[{"title":"should call the logUserInAsync method","status":"pass","exception":{},"id":"15m1gbgr6xs-17esmy45nhx-jkkn9yih9c","code":"() => {\r\n            spy.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When user clicks on signin button","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","step":{"title":"should call the logUserInAsync method","status":"pass","exception":{},"id":"15m1gbgr6xs-17esmy45nhx-jkkn9yih9c","code":"() => {\r\n            spy.calledOnce.should.be.eql(true);\r\n        }","duration":0},"id":"15m1gbgr6xs-17esmy45nhx"}],"tests":[],"title":"<LoginScreen />","statistics":{"passCount":13,"failedCount":0,"pendingCount":0,"totalCount":13,"totalRuleViolations":0,"duration":7,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/LoginScreen.Spec.js","id":"15m1gbgr6xs","path":"Components/Authentication"},{"type":"describe","children":[],"tests":[{"title":"should be empty","status":"pass","exception":{},"id":"k99e5bdks3-ph6y7f02f4","code":"() => {\r\n        const wrapper = enzyme_1.shallow(React.createElement(SignUpSection_ios_1.SignUpSection, null));\r\n        chai_1.expect(wrapper.type()).to.have.eql(null);\r\n    }","duration":1}],"title":"<SignUpSection /> iOS","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/SignUpSection.ios.Spec.js","step":{"title":"should be empty","status":"pass","exception":{},"id":"k99e5bdks3-ph6y7f02f4","code":"() => {\r\n        const wrapper = enzyme_1.shallow(React.createElement(SignUpSection_ios_1.SignUpSection, null));\r\n        chai_1.expect(wrapper.type()).to.have.eql(null);\r\n    }","duration":1},"id":"k99e5bdks3","path":"Components/Authentication"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should navigate to sign up link","status":"pass","exception":{},"id":"15m957cem5c-4sbxqjw37n-z9i1kg1r4w","code":"() => {\r\n            // check if Linking.openURL was called\r\n            methodStub.calledOnce.should.be.equal(true);\r\n        }","duration":0},{"title":"should be called with correct signup link value","status":"pass","exception":{},"id":"15m957cem5c-4sbxqjw37n-lqyukrphq8","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.SignUpProd).should.be.eql(true);\r\n        }","duration":1}],"title":"When clicking on signup link","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/SignUpSection.Spec.js","step":{"title":"should be called with correct signup link value","status":"pass","exception":{},"id":"15m957cem5c-4sbxqjw37n-lqyukrphq8","code":"() => {\r\n            methodStub.calledWith(Config_1.Constants.webLinks.SignUpProd).should.be.eql(true);\r\n        }","duration":1},"id":"15m957cem5c-4sbxqjw37n"}],"tests":[],"title":"<SignUpSection />","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Components/Authentication/SignUpSection.Spec.js","id":"15m957cem5c","path":"Components/Authentication"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should set the endpoint url on config","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-vsc33vcgal","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.endpointUrl.should.be.eql(appInsightsConfig.url);\r\n        }","duration":0},{"title":"should set the instrumentation key on config","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-fc738rd3yl","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.instrumentationKey.should.be.eql(appInsightsConfig.instrumentationKey);\r\n        }","duration":1},{"title":"should set disable ajax tracking","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-q624km2br4","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.disableAjaxTracking.should.be.eql(true);\r\n        }","duration":0},{"title":"should set the enable exception tracking","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-88run9yfzh","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.disableExceptionTracking.should.be.eql(false);\r\n        }","duration":0},{"title":"should set emit line delimited JSON","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-npu08ydofn","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.emitLineDelimitedJson.should.be.eql(true);\r\n        }","duration":1},{"title":"should set device type to the device type on the config","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-q61w4qy4nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.type.should.be.eql(appInsightsConfig.deviceType);\r\n        }","duration":0},{"title":"should set the device locale on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-505pompikl","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.locale.should.be.eql(deviceInfo.deviceLocale);\r\n        }","duration":0},{"title":"should set the os on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-qaf7e07n8r","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.os.should.be.eql(deviceInfo.systemName);\r\n        }","duration":0},{"title":"should set the os version on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-cna4yfl6z4","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.osversion.should.be.eql(deviceInfo.systemVersion);\r\n        }","duration":0},{"title":"should set the device model on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-38apksfowz","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.model.should.be.eql(deviceInfo.model);\r\n        }","duration":0},{"title":"should set the device oem name on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-cn3sj05j34","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.device.oemName.should.be.eql(deviceInfo.manufacturer);\r\n        }","duration":0},{"title":"should set session id on context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-tu4ratkyub","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.session.id.should.be.eql(appInsightsConfig.sessionId);\r\n        }","duration":0},{"title":"should set application version on context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-cn3s059bfk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.application.ver.should.be.eql(appInsightsConfig.applicationVersion);\r\n        }","duration":0}],"title":"When initializing","statistics":{"passCount":13,"failedCount":0,"pendingCount":0,"totalCount":13,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should set application version on context","status":"pass","exception":{},"id":"c1s7nxk4yr-fc6wbtluqr-cn3s059bfk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.application.ver.should.be.eql(appInsightsConfig.applicationVersion);\r\n        }","duration":0},"id":"c1s7nxk4yr-fc6wbtluqr"},{"type":"context","children":[],"tests":[{"title":"should not send debug logging to application insights","status":"pass","exception":{},"id":"c1s7nxk4yr-q63rfnakw0-669i2q4am5","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(false);\r\n        }","duration":0}],"title":"When calling logDebug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should not send debug logging to application insights","status":"pass","exception":{},"id":"c1s7nxk4yr-q63rfnakw0-669i2q4am5","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(false);\r\n        }","duration":0},"id":"c1s7nxk4yr-q63rfnakw0"},{"type":"context","children":[],"tests":[{"title":"should call trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-mqpr1wh78t-l2qpn51idh","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should pass event name to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-mqpr1wh78t-180z9f9hfnf","code":"() => {\r\n            trackEventName.should.be.eql(eventName);\r\n        }","duration":0},{"title":"should pass event data to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-mqpr1wh78t-cn8e6feyf4","code":"() => {\r\n            trackEventData.should.be.eql(data);\r\n        }","duration":0},{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-mqpr1wh78t-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":1}],"title":"When calling logTelemetryEvent","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-mqpr1wh78t-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":1},"id":"c1s7nxk4yr-mqpr1wh78t"},{"type":"context","children":[],"tests":[{"title":"should call trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-q5vyijzy4g-l2qpn51idh","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass event name to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-q5vyijzy4g-180z9f9hfnf","code":"() => {\r\n            trackEventName.should.be.eql(eventName);\r\n        }","duration":0},{"title":"should pass event data to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-q5vyijzy4g-cn8e6feyf4","code":"() => {\r\n            trackEventData.should.be.eql(data);\r\n        }","duration":0},{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-q5vyijzy4g-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":0}],"title":"When calling logWarning","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-q5vyijzy4g-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":0},"id":"c1s7nxk4yr-q5vyijzy4g"},{"type":"context","children":[],"tests":[{"title":"should call trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-e4sq7rhar9-l2qpn51idh","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass event name to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-e4sq7rhar9-180z9f9hfnf","code":"() => {\r\n            trackEventName.should.be.eql(eventName);\r\n        }","duration":0},{"title":"should pass event data to trackEvent","status":"pass","exception":{},"id":"c1s7nxk4yr-e4sq7rhar9-cn8e6feyf4","code":"() => {\r\n            trackEventData.should.be.eql(data);\r\n        }","duration":0},{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-e4sq7rhar9-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":0}],"title":"When calling logError","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should have set operation name on context","status":"pass","exception":{},"id":"c1s7nxk4yr-e4sq7rhar9-cn87kkj0nk","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.operation.name.should.be.eql(operationName);\r\n        }","duration":0},"id":"c1s7nxk4yr-e4sq7rhar9"},{"type":"context","children":[],"tests":[{"title":"should set debug on config","status":"pass","exception":{},"id":"c1s7nxk4yr-vawa1qp1p1-q61pvbpy34","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.enableDebug.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling setDebug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should set debug on config","status":"pass","exception":{},"id":"c1s7nxk4yr-vawa1qp1p1-q61pvbpy34","code":"() => {\r\n            appInsightsLogger.appInsightsClient.config.enableDebug.should.be.eql(true);\r\n        }","duration":0},"id":"c1s7nxk4yr-vawa1qp1p1"},{"type":"context","children":[],"tests":[{"title":"should set session id on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-jkjq70n940-abpxgktc3f","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.session.id.should.be.eql(sessionId);\r\n        }","duration":0}],"title":"When calling updateSessionId","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should set session id on the context","status":"pass","exception":{},"id":"c1s7nxk4yr-jkjq70n940-abpxgktc3f","code":"() => {\r\n            appInsightsLogger.appInsightsClient.context.session.id.should.be.eql(sessionId);\r\n        }","duration":0},"id":"c1s7nxk4yr-jkjq70n940"},{"type":"context","children":[],"tests":[{"title":"should call trackMetric","status":"pass","exception":{},"id":"c1s7nxk4yr-hf6p20bcxs-9xh2or7rmz","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass metric name to trackMetric","status":"pass","exception":{},"id":"c1s7nxk4yr-hf6p20bcxs-hf5qfflv1c","code":"() => {\r\n            trackMetricName.should.be.equal(metricName);\r\n        }","duration":0},{"title":"should pass metric value to trackMetric","status":"pass","exception":{},"id":"c1s7nxk4yr-hf6p20bcxs-52m5tvwc97","code":"() => {\r\n            trackMetricValue.should.be.equal(metricValue);\r\n        }","duration":0}],"title":"When calling logMetric","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should pass metric value to trackMetric","status":"pass","exception":{},"id":"c1s7nxk4yr-hf6p20bcxs-52m5tvwc97","code":"() => {\r\n            trackMetricValue.should.be.equal(metricValue);\r\n        }","duration":0},"id":"c1s7nxk4yr-hf6p20bcxs"},{"type":"context","children":[],"tests":[{"title":"should call trackException","status":"pass","exception":{},"id":"c1s7nxk4yr-1b5tswhtyl-mlfabbbytn","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass exception data to trackException","status":"pass","exception":{},"id":"c1s7nxk4yr-1b5tswhtyl-ktkias9nj7","code":"() => {\r\n            trackExceptionValue.should.be.eql(exception);\r\n        }","duration":0}],"title":"When calling logException","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should pass exception data to trackException","status":"pass","exception":{},"id":"c1s7nxk4yr-1b5tswhtyl-ktkias9nj7","code":"() => {\r\n            trackExceptionValue.should.be.eql(exception);\r\n        }","duration":0},"id":"c1s7nxk4yr-1b5tswhtyl"},{"type":"context","children":[],"tests":[{"title":"should call flush","status":"pass","exception":{},"id":"c1s7nxk4yr-x3k5wj7yk5-rrzr2zqx3x","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling flush","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","step":{"title":"should call flush","status":"pass","exception":{},"id":"c1s7nxk4yr-x3k5wj7yk5-rrzr2zqx3x","code":"() => {\r\n            trackStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},"id":"c1s7nxk4yr-x3k5wj7yk5"}],"tests":[],"title":"AppInsightsLogger","statistics":{"passCount":34,"failedCount":0,"pendingCount":0,"totalCount":34,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/AppInsightsLogger.Spec.js","id":"c1s7nxk4yr","path":"Infrastructure/Logging"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should log to console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-q63rfnakw0-lr4o41icyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s]: %s\", eventName, message).should.be.eql(true);\r\n        }","duration":0}],"title":"When calling logDebug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log to console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-q63rfnakw0-lr4o41icyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s]: %s\", eventName, message).should.be.eql(true);\r\n        }","duration":0},"id":"flhsslf5u3-q63rfnakw0"},{"type":"context","children":[],"tests":[{"title":"should log an info message to console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-mqpr1wh78t-lr4o6vc6e8","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0}],"title":"When calling logTelemetryEvent","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log an info message to console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-mqpr1wh78t-lr4o6vc6e8","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0},"id":"flhsslf5u3-mqpr1wh78t"},{"type":"context","children":[],"tests":[{"title":"should log a warning message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-q5vyijzy4g-lqvzv6nfeo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0}],"title":"When calling logWarning","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log a warning message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-q5vyijzy4g-lqvzv6nfeo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0},"id":"flhsslf5u3-q5vyijzy4g"},{"type":"context","children":[],"tests":[{"title":"should log an error message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-e4sq7rhar9-lqzcwjcbg0","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0}],"title":"When calling logError","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log an error message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-e4sq7rhar9-lqzcwjcbg0","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[%s - %s]: %s\", eventName, operationName, JSON.stringify(data));\r\n        }","duration":0},"id":"flhsslf5u3-e4sq7rhar9"},{"type":"context","children":[],"tests":[{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-vawa1qp1p1-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Setting debug: %s\", debugOn);\r\n        }","duration":0}],"title":"When calling setDebug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-vawa1qp1p1-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Setting debug: %s\", debugOn);\r\n        }","duration":0},"id":"flhsslf5u3-vawa1qp1p1"},{"type":"context","children":[],"tests":[{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-jkjq70n940-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Session id is: %s\", sessionId);\r\n        }","duration":0}],"title":"When calling updateSessionId","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-jkjq70n940-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Session id is: %s\", sessionId);\r\n        }","duration":0},"id":"flhsslf5u3-jkjq70n940"},{"type":"context","children":[],"tests":[{"title":"should log an info message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-hf6p20bcxs-uz2ctisr91","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[Metric - %s] %d\", metricName, metricValue);\r\n        }","duration":0}],"title":"When calling logMetric","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log an info message to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-hf6p20bcxs-uz2ctisr91","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[Metric - %s] %d\", metricName, metricValue);\r\n        }","duration":0},"id":"flhsslf5u3-hf6p20bcxs"},{"type":"context","children":[],"tests":[{"title":"should log an error to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-1b5tswhtyl-144l3mxesp9","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[Exception]: %s\", exception);\r\n        }","duration":1}],"title":"When calling logException","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log an error to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-1b5tswhtyl-144l3mxesp9","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"[Exception]: %s\", exception);\r\n        }","duration":1},"id":"flhsslf5u3-1b5tswhtyl"},{"type":"context","children":[],"tests":[{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-x3k5wj7yk5-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Flushing logs\");\r\n        }","duration":0}],"title":"When calling flush","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","step":{"title":"should log to the console with the expected message","status":"pass","exception":{},"id":"flhsslf5u3-x3k5wj7yk5-lqyal09qyo","code":"() => {\r\n            consoleSpy.firstCall.calledWith(\"Flushing logs\");\r\n        }","duration":0},"id":"flhsslf5u3-x3k5wj7yk5"}],"tests":[],"title":"ConsoleLogger","statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/ConsoleLogger.Spec.js","id":"flhsslf5u3","path":"Infrastructure/Logging"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should call logDebug on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q63rfnakw0-6r41i64zj1","code":"() => {\r\n            firstLogger.debugMessages.length.should.be.eql(1);\r\n            secondLogger.debugMessages.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass debug data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q63rfnakw0-febakyu9ql","code":"() => {\r\n            should.exist(firstLogger.debugMessages[0]);\r\n            firstLogger.debugMessages[0].eventName.should.be.eql(eventName);\r\n            firstLogger.debugMessages[0].message.should.be.eql(message);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.debugMessages[0]);\r\n        }","duration":1}],"title":"When calling logDebug","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass debug data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q63rfnakw0-febakyu9ql","code":"() => {\r\n            should.exist(firstLogger.debugMessages[0]);\r\n            firstLogger.debugMessages[0].eventName.should.be.eql(eventName);\r\n            firstLogger.debugMessages[0].message.should.be.eql(message);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.debugMessages[0]);\r\n        }","duration":1},"id":"a9xcwe5s0r-q63rfnakw0"},{"type":"context","children":[],"tests":[{"title":"should call logTelemetryEvent on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-mqpr1wh78t-a52qww56ps","code":"() => {\r\n            firstLogger.telemetryEvents.length.should.be.eql(1);\r\n            secondLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass telemetry data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-mqpr1wh78t-12oidrgc1w3","code":"() => {\r\n            let telemetryEvent = firstLogger.telemetryEvents[0];\r\n            should.exist(telemetryEvent);\r\n            telemetryEvent.eventName.should.be.eql(eventName);\r\n            telemetryEvent.operationName.should.be.eql(operationName);\r\n            should.exist(telemetryEvent.data);\r\n            telemetryEvent.data.property1.should.be.eql(data.property1);\r\n            telemetryEvent.data.property2.should.be.eql(data.property2);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.telemetryEvents[0]);\r\n        }","duration":0}],"title":"When calling logTelemetryEvent","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass telemetry data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-mqpr1wh78t-12oidrgc1w3","code":"() => {\r\n            let telemetryEvent = firstLogger.telemetryEvents[0];\r\n            should.exist(telemetryEvent);\r\n            telemetryEvent.eventName.should.be.eql(eventName);\r\n            telemetryEvent.operationName.should.be.eql(operationName);\r\n            should.exist(telemetryEvent.data);\r\n            telemetryEvent.data.property1.should.be.eql(data.property1);\r\n            telemetryEvent.data.property2.should.be.eql(data.property2);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.telemetryEvents[0]);\r\n        }","duration":0},"id":"a9xcwe5s0r-mqpr1wh78t"},{"type":"context","children":[],"tests":[{"title":"should call logWarning on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q5vyijzy4g-aathhs35oz","code":"() => {\r\n            firstLogger.warnings.length.should.be.eql(1);\r\n            secondLogger.warnings.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass warning data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q5vyijzy4g-jasndjstvf","code":"() => {\r\n            let warningEvent = firstLogger.warnings[0];\r\n            should.exist(warningEvent);\r\n            warningEvent.eventName.should.be.eql(eventName);\r\n            warningEvent.operationName.should.be.eql(operationName);\r\n            should.exist(warningEvent.data);\r\n            warningEvent.data.should.be.eql(data);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.warnings[0]);\r\n        }","duration":0}],"title":"When calling logWarning","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass warning data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-q5vyijzy4g-jasndjstvf","code":"() => {\r\n            let warningEvent = firstLogger.warnings[0];\r\n            should.exist(warningEvent);\r\n            warningEvent.eventName.should.be.eql(eventName);\r\n            warningEvent.operationName.should.be.eql(operationName);\r\n            should.exist(warningEvent.data);\r\n            warningEvent.data.should.be.eql(data);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.warnings[0]);\r\n        }","duration":0},"id":"a9xcwe5s0r-q5vyijzy4g"},{"type":"context","children":[],"tests":[{"title":"should call logError on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-e4sq7rhar9-j63q19q5r1","code":"() => {\r\n            firstLogger.errors.length.should.be.eql(1);\r\n            secondLogger.errors.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass error data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-e4sq7rhar9-a55qp44wm8","code":"() => {\r\n            let errorEvent = firstLogger.errors[0];\r\n            should.exist(errorEvent);\r\n            errorEvent.eventName.should.be.eql(eventName);\r\n            errorEvent.operationName.should.be.eql(operationName);\r\n            should.exist(errorEvent.data);\r\n            errorEvent.data.should.be.eql(data);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.errors[0]);\r\n        }","duration":0}],"title":"When calling logError","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass error data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-e4sq7rhar9-a55qp44wm8","code":"() => {\r\n            let errorEvent = firstLogger.errors[0];\r\n            should.exist(errorEvent);\r\n            errorEvent.eventName.should.be.eql(eventName);\r\n            errorEvent.operationName.should.be.eql(operationName);\r\n            should.exist(errorEvent.data);\r\n            errorEvent.data.should.be.eql(data);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.errors[0]);\r\n        }","duration":0},"id":"a9xcwe5s0r-e4sq7rhar9"},{"type":"context","children":[],"tests":[{"title":"should call setDebug on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-vawa1qp1p1-a56b2q5m3k","code":"() => {\r\n            firstLogger.debugOn.should.be.eql(true);\r\n            secondLogger.debugOn.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling setDebug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should call setDebug on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-vawa1qp1p1-a56b2q5m3k","code":"() => {\r\n            firstLogger.debugOn.should.be.eql(true);\r\n            secondLogger.debugOn.should.be.eql(true);\r\n        }","duration":0},"id":"a9xcwe5s0r-vawa1qp1p1"},{"type":"context","children":[],"tests":[{"title":"should call updateSessionId on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-jkjq70n940-s1dpzy1919","code":"() => {\r\n            firstLogger.sessionId.should.be.eql(sessionId);\r\n            secondLogger.sessionId.should.be.eql(sessionId);\r\n        }","duration":0}],"title":"When calling updateSessionId","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should call updateSessionId on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-jkjq70n940-s1dpzy1919","code":"() => {\r\n            firstLogger.sessionId.should.be.eql(sessionId);\r\n            secondLogger.sessionId.should.be.eql(sessionId);\r\n        }","duration":0},"id":"a9xcwe5s0r-jkjq70n940"},{"type":"context","children":[],"tests":[{"title":"should call logMetric on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-hf6p20bcxs-a59bgmw7y8","code":"() => {\r\n            firstLogger.metrics.length.should.be.eql(1);\r\n            secondLogger.metrics.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass metric data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-hf6p20bcxs-a5aikq2g8w","code":"() => {\r\n            let metricEvent = firstLogger.metrics[0];\r\n            should.exist(metricEvent);\r\n            metricEvent.metricName.should.be.eql(metricName);\r\n            metricEvent.value.should.be.eql(metricValue);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.metrics[0]);\r\n        }","duration":0}],"title":"When calling logMetric","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass metric data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-hf6p20bcxs-a5aikq2g8w","code":"() => {\r\n            let metricEvent = firstLogger.metrics[0];\r\n            should.exist(metricEvent);\r\n            metricEvent.metricName.should.be.eql(metricName);\r\n            metricEvent.value.should.be.eql(metricValue);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.metrics[0]);\r\n        }","duration":0},"id":"a9xcwe5s0r-hf6p20bcxs"},{"type":"context","children":[],"tests":[{"title":"should call logException on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-1b5tswhtyl-1x0csxlv2j","code":"() => {\r\n            firstLogger.exceptions.length.should.be.eql(1);\r\n            secondLogger.exceptions.length.should.be.eql(1);\r\n        }","duration":1},{"title":"should pass error data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-1b5tswhtyl-a55qp44wm8","code":"() => {\r\n            let exceptionEvent = firstLogger.exceptions[0];\r\n            should.exist(exceptionEvent);\r\n            exceptionEvent.should.be.eql(exception);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.exceptions[0]);\r\n        }","duration":1}],"title":"When calling logException","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should pass error data to the registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-1b5tswhtyl-a55qp44wm8","code":"() => {\r\n            let exceptionEvent = firstLogger.exceptions[0];\r\n            should.exist(exceptionEvent);\r\n            exceptionEvent.should.be.eql(exception);\r\n            // Because we use the same mock logger for the second logger, there is no real need to verify that the event data is correct\r\n            // We just verify that it exists\r\n            should.exist(secondLogger.exceptions[0]);\r\n        }","duration":1},"id":"a9xcwe5s0r-1b5tswhtyl"},{"type":"context","children":[],"tests":[{"title":"should call flush on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-x3k5wj7yk5-15ndm6nkz39","code":"() => {\r\n            firstLogger.flushCalled.should.be.eql(true);\r\n            secondLogger.flushCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling flush","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","step":{"title":"should call flush on all registered loggers","status":"pass","exception":{},"id":"a9xcwe5s0r-x3k5wj7yk5-15ndm6nkz39","code":"() => {\r\n            firstLogger.flushCalled.should.be.eql(true);\r\n            secondLogger.flushCalled.should.be.eql(true);\r\n        }","duration":0},"id":"a9xcwe5s0r-x3k5wj7yk5"}],"tests":[],"title":"Logger","statistics":{"passCount":15,"failedCount":0,"pendingCount":0,"totalCount":15,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/Logger.Spec.js","id":"a9xcwe5s0r","path":"Infrastructure/Logging"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should track the metric","status":"pass","exception":{},"id":"17mqkd4d6kl-7xoi9od5ur-wzlkvrg8cz","code":"() => {\r\n            trackMetricStub.trackMetricStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"17mqkd4d6kl-7xoi9od5ur-15wfqs2ibsr","code":"() => {\r\n            trackMetricFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"17mqkd4d6kl-7xoi9od5ur-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0}],"title":"When tracking a non async function","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackMetric.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"17mqkd4d6kl-7xoi9od5ur-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0},"id":"17mqkd4d6kl-7xoi9od5ur"},{"type":"context","children":[],"tests":[{"title":"should track the metric","status":"pass","exception":{},"id":"17mqkd4d6kl-16b8gstqwow-wzlkvrg8cz","code":"() => {\r\n            trackMetricStub.trackMetricStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"17mqkd4d6kl-16b8gstqwow-15wfqs2ibsr","code":"() => {\r\n            trackMetricFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should throw an error","status":"pass","exception":{},"id":"17mqkd4d6kl-16b8gstqwow-muf1q5nnnn","code":"() => {\r\n            exceptionThrown.should.be.eql(\"Oops\");\r\n        }","duration":1},{"title":"should not return any value","status":"pass","exception":{},"id":"17mqkd4d6kl-16b8gstqwow-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0}],"title":"When tracking a non async function that throws an exception","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackMetric.Spec.js","step":{"title":"should not return any value","status":"pass","exception":{},"id":"17mqkd4d6kl-16b8gstqwow-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0},"id":"17mqkd4d6kl-16b8gstqwow"},{"type":"context","children":[],"tests":[{"title":"should track the metric","status":"pass","exception":{},"id":"17mqkd4d6kl-6mq1827ipf-wzlkvrg8cz","code":"() => {\r\n            trackMetricStub.trackMetricStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"17mqkd4d6kl-6mq1827ipf-15wfqs2ibsr","code":"() => {\r\n            trackMetricAsyncFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"17mqkd4d6kl-6mq1827ipf-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0}],"title":"When tracking an async function","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackMetric.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"17mqkd4d6kl-6mq1827ipf-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0},"id":"17mqkd4d6kl-6mq1827ipf"},{"type":"context","children":[],"tests":[{"title":"should track the metric","status":"pass","exception":{},"id":"17mqkd4d6kl-h9uwc6mbnn-wzlkvrg8cz","code":"() => {\r\n            trackMetricStub.trackMetricStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"17mqkd4d6kl-h9uwc6mbnn-15wfqs2ibsr","code":"() => {\r\n            trackMetricAsyncFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should throw an error","status":"pass","exception":{},"id":"17mqkd4d6kl-h9uwc6mbnn-muf1q5nnnn","code":"() => {\r\n            exceptionThrown.should.be.eql(\"Oops\");\r\n        }","duration":0},{"title":"should not return any value","status":"pass","exception":{},"id":"17mqkd4d6kl-h9uwc6mbnn-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0}],"title":"When tracking an async function that throws an exception","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackMetric.Spec.js","step":{"title":"should not return any value","status":"pass","exception":{},"id":"17mqkd4d6kl-h9uwc6mbnn-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0},"id":"17mqkd4d6kl-h9uwc6mbnn"}],"tests":[],"title":"trackMetric","statistics":{"passCount":14,"failedCount":0,"pendingCount":0,"totalCount":14,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackMetric.Spec.js","id":"17mqkd4d6kl","path":"Infrastructure/Logging"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"should not fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-cwr163wkg","code":"() => {\r\n            trackScenarioStub.failScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-y6ty9fxiwl","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-cq37k46lc","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-15wfqs2ibsr","code":"() => {\r\n            trackScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-z0f4sp5s31","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledAfter(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0}],"title":"When tracking an async scenario","statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-10t4qmamdnv-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":0},"id":"ctrn3buf4-10t4qmamdnv"},{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"should not fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-cwr163wkg","code":"() => {\r\n            trackScenarioStub.failScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-y6ty9fxiwl","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should end the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-cq37k46lc","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":1},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-15wfqs2ibsr","code":"() => {\r\n            track1ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n            track2ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n            track3ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(track1ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.startScenarioStub.calledBefore(track2ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.startScenarioStub.calledBefore(track3ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-z0f4sp5s31","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledAfter(track1ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.calledAfter(track2ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.calledAfter(track3ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(5);\r\n        }","duration":1}],"title":"When tracking an async scenario with a promise chain","statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-16b6tbe8ydc-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(5);\r\n        }","duration":1},"id":"ctrn3buf4-16b6tbe8ydc"},{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"should not fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-cwr163wkg","code":"() => {\r\n            trackScenarioStub.failScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":1},{"title":"should end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-y6ty9fxiwl","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-cq37k46lc","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-15wfqs2ibsr","code":"() => {\r\n            track1ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n            track2ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n            track3ComplicatedScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(track1ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.startScenarioStub.calledBefore(track2ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.startScenarioStub.calledBefore(track3ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-z0f4sp5s31","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledAfter(track1ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.calledAfter(track2ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n            trackScenarioStub.endScenarioStub.calledAfter(track3ComplicatedScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(5);\r\n        }","duration":0}],"title":"When tracking an async scenario with many awaits","statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-a57jlqff34-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(5);\r\n        }","duration":0},"id":"ctrn3buf4-a57jlqff34"},{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":1},{"title":"should not end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-cuhl2vkb4","code":"() => {\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-a7anvhkv83","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should fail the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-164pdgdl3e5","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-15wfqs2ibsr","code":"() => {\r\n            trackScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":1},{"title":"should fail the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-oda9tzxuit","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledAfter(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should throw an error","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-muf1q5nnnn","code":"() => {\r\n            exceptionThrown.should.be.eql(\"Oops\");\r\n        }","duration":0},{"title":"should not return any value","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0}],"title":"When tracking an async scenario that throws an error","statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should not return any value","status":"pass","exception":{},"id":"ctrn3buf4-z3woxkybxf-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":0},"id":"ctrn3buf4-z3woxkybxf"},{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"should not fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-cwr163wkg","code":"() => {\r\n            trackScenarioStub.failScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-y6ty9fxiwl","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should end the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-cq37k46lc","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-15wfqs2ibsr","code":"() => {\r\n            trackScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should end the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-z0f4sp5s31","code":"() => {\r\n            trackScenarioStub.endScenarioStub.calledAfter(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":1}],"title":"When tracking a scenario","statistics":{"passCount":9,"failedCount":0,"pendingCount":0,"totalCount":9,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should return the value from the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-af5xtsdjmz-13ib9meq6gt","code":"() => {\r\n            result.should.be.eql(2);\r\n        }","duration":1},"id":"ctrn3buf4-af5xtsdjmz"},{"type":"context","children":[],"tests":[{"title":"should start the scenario","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-7e75fjgpf9","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the specified scenario","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-902wszhh65","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledWith(Core.Telemetry.ScenarioName.OpenApp).should.be.eql(true);\r\n        }","duration":0},{"title":"should not end the scenario","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-cuhl2vkb4","code":"() => {\r\n            trackScenarioStub.endScenarioStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should fail the scenario","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-a7anvhkv83","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should fail the correct scenario","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-164pdgdl3e5","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledWith(scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call the decorated function once","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-15wfqs2ibsr","code":"() => {\r\n            trackScenarioFunctionCalledSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should start the scenario before calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-jacvsgi131","code":"() => {\r\n            trackScenarioStub.startScenarioStub.calledBefore(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":1},{"title":"should fail the scenario after calling the decorated function","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-oda9tzxuit","code":"() => {\r\n            trackScenarioStub.failScenarioStub.calledAfter(trackScenarioFunctionCalledSpy).should.be.eql(true);\r\n        }","duration":0},{"title":"should throw an error","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-muf1q5nnnn","code":"() => {\r\n            exceptionThrown.should.be.eql(\"Oops\");\r\n        }","duration":1},{"title":"should not return any value","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":1}],"title":"When tracking a scenario that throws an error","statistics":{"passCount":10,"failedCount":0,"pendingCount":0,"totalCount":10,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","step":{"title":"should not return any value","status":"pass","exception":{},"id":"ctrn3buf4-7nwmrp5u74-uddnk9t6vh","code":"() => {\r\n            should.not.exist(result);\r\n        }","duration":1},"id":"ctrn3buf4-7nwmrp5u74"}],"tests":[],"title":"trackScenario","statistics":{"passCount":56,"failedCount":0,"pendingCount":0,"totalCount":56,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/Logging/TrackScenario.Spec.js","id":"ctrn3buf4","path":"Infrastructure/Logging"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should call the next method","status":"pass","exception":{},"id":"a9xcwe5s0r-z9ghbxv4bk-jknfs1idsw","code":"() => {\r\n            nextCallCount.should.be.equal(1);\r\n        }","duration":0},{"title":"should call logDebug on registered logger","status":"pass","exception":{},"id":"a9xcwe5s0r-z9ghbxv4bk-vk77uu8t7h","code":"() => {\r\n            mockLogger.debugMessages.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should set the type of the message to inbound","status":"pass","exception":{},"id":"a9xcwe5s0r-z9ghbxv4bk-jkktjbn8jk","code":"() => {\r\n            mockLogger.debugMessages[0].eventName.should.be.eql(Logging_1.EventNames.InBoundMessageEvent);\r\n        }","duration":0},{"title":"should set the message contents","status":"pass","exception":{},"id":"a9xcwe5s0r-z9ghbxv4bk-a58wy8s6kg","code":"() => {\r\n            let debugMessage = JSON.parse(mockLogger.debugMessages[0].message);\r\n            debugMessage.message.should.be.eql(message.message);\r\n        }","duration":0}],"title":"When using an inbound LogMessagingTask","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/MessageTasks/LogMessagingTask.Spec.js","step":{"title":"should set the message contents","status":"pass","exception":{},"id":"a9xcwe5s0r-z9ghbxv4bk-a58wy8s6kg","code":"() => {\r\n            let debugMessage = JSON.parse(mockLogger.debugMessages[0].message);\r\n            debugMessage.message.should.be.eql(message.message);\r\n        }","duration":0},"id":"a9xcwe5s0r-z9ghbxv4bk"},{"type":"context","children":[],"tests":[{"title":"should call the next method","status":"pass","exception":{},"id":"a9xcwe5s0r-z9a4m50hcw-jknfs1idsw","code":"() => {\r\n            nextCallCount.should.be.equal(1);\r\n        }","duration":0},{"title":"should call logDebug on registered logger","status":"pass","exception":{},"id":"a9xcwe5s0r-z9a4m50hcw-vk77uu8t7h","code":"() => {\r\n            mockLogger.debugMessages.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should set the type of the message to outbound","status":"pass","exception":{},"id":"a9xcwe5s0r-z9a4m50hcw-2utysphk2t","code":"() => {\r\n            mockLogger.debugMessages[0].eventName.should.be.eql(Logging_1.EventNames.OutBoundMessageEvent);\r\n        }","duration":0},{"title":"should set the message contents","status":"pass","exception":{},"id":"a9xcwe5s0r-z9a4m50hcw-a58wy8s6kg","code":"() => {\r\n            let debugMessage = JSON.parse(mockLogger.debugMessages[0].message);\r\n            debugMessage.message.should.be.eql(message.message);\r\n        }","duration":0}],"title":"When using an outbound LogMessagingTask","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/MessageTasks/LogMessagingTask.Spec.js","step":{"title":"should set the message contents","status":"pass","exception":{},"id":"a9xcwe5s0r-z9a4m50hcw-a58wy8s6kg","code":"() => {\r\n            let debugMessage = JSON.parse(mockLogger.debugMessages[0].message);\r\n            debugMessage.message.should.be.eql(message.message);\r\n        }","duration":0},"id":"a9xcwe5s0r-z9a4m50hcw"}],"tests":[],"title":"Logger","statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Infrastructure/MessageTasks/LogMessagingTask.Spec.js","id":"a9xcwe5s0r","path":"Infrastructure/MessageTasks"},{"type":"describe","children":[],"tests":[{"title":"initialState should have isLoading false","status":"pass","exception":{},"id":"jkodo7p840-13rckkclrh","code":"() => {\r\n        initialState.isLoading.should.be.eql(false);\r\n    }","duration":0},{"title":"initialState should have appList empty","status":"pass","exception":{},"id":"jkodo7p840-ph0jhy7wm8","code":"() => {\r\n        initialState.appList.should.be.eql([]);\r\n    }","duration":0},{"title":"initialState should have appType be 'My'","status":"pass","exception":{},"id":"jkodo7p840-917ilw35yd","code":"() => {\r\n        initialState.appType.should.be.eql(Shared_1.AppType.My);\r\n    }","duration":0},{"title":"initialState should have initialAppListLoadOccurred be false","status":"pass","exception":{},"id":"jkodo7p840-h2gmlak3nh","code":"() => {\r\n        initialState.initialAppListLoadOccurred.should.be.eql(false);\r\n    }","duration":1},{"title":"it should update isLoading to true when the right action is fire","status":"pass","exception":{},"id":"jkodo7p840-r2kyt2a7m3","code":"() => {\r\n        const action = { type: Utilities_1.pending(Actions.fetchAppListAsync), payload: null };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialState, action);\r\n        stateAfter.isLoading.should.be.eql(true);\r\n    }","duration":0},{"title":"it should update the appList when the right action is fired","status":"pass","exception":{},"id":"jkodo7p840-4mos6qpw71","code":"() => {\r\n        const firstAppInfo = new Shared_1.AppInfo();\r\n        firstAppInfo.appId = \"appId\";\r\n        firstAppInfo.appName = \"name\";\r\n        const payload = {\r\n            appType: Shared_1.AppType.My,\r\n            appList: [firstAppInfo]\r\n        };\r\n        const action = { type: Utilities_1.fulfilled(Actions.fetchAppListAsync), payload };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialState, action);\r\n        const appListAfterUpdate = stateAfter.appList;\r\n        appListAfterUpdate.should.be.eql(payload.appList);\r\n        appListAfterUpdate.length.should.be.eql(1);\r\n        appListAfterUpdate[0].appId.should.be.eql(firstAppInfo.appId);\r\n    }","duration":1},{"title":"it should not update the appList when the fetched appType does not match the state appType","status":"pass","exception":{},"id":"jkodo7p840-lr1o9xm6v4","code":"() => {\r\n        const firstAppInfo = new Shared_1.AppInfo();\r\n        firstAppInfo.appId = \"appId\";\r\n        firstAppInfo.appName = \"name\";\r\n        const payload = {\r\n            appType: Shared_1.AppType.Featured,\r\n            appList: [firstAppInfo]\r\n        };\r\n        const existingApp = new Shared_1.AppInfo();\r\n        existingApp.appId = \"existing\";\r\n        const scenarioInitialState = Object.assign({}, initialState, { appType: Shared_1.AppType.All, appList: [existingApp] });\r\n        const action = { type: Utilities_1.fulfilled(Actions.fetchAppListAsync), payload };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(scenarioInitialState, action);\r\n        const appListAfterUpdate = stateAfter.appList;\r\n        appListAfterUpdate.should.be.eql(scenarioInitialState.appList);\r\n        appListAfterUpdate.length.should.be.eql(1);\r\n        appListAfterUpdate[0].appId.should.be.eql(existingApp.appId);\r\n    }","duration":0},{"title":"it should update appType to the corresponding type when the right action is fired","status":"pass","exception":{},"id":"jkodo7p840-jkl7yex25c","code":"() => {\r\n        const action = { type: `${Actions.switchAppType}`, payload: Shared_1.AppType.All };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialState, action);\r\n        stateAfter.appType.should.be.eql(Shared_1.AppType.All);\r\n    }","duration":0},{"title":"it should reset the loading state when the payload appType does not match the state appType, the loading state is in progress and the right action is fired","status":"pass","exception":{},"id":"jkodo7p840-jkoa6bwhe8","code":"() => {\r\n        const action = { type: `${Actions.switchAppType}`, payload: Shared_1.AppType.All };\r\n        const scenarioInitialState = Object.assign({}, initialState, { appType: Shared_1.AppType.My, isLoading: true });\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(scenarioInitialState, action);\r\n        stateAfter.appType.should.be.eql(Shared_1.AppType.All);\r\n        // tslint:disable-next-line:no-unused-expression\r\n        stateAfter.isLoading.should.be.false;\r\n    }","duration":0},{"title":"it should update the featuredApp when the right action is fired","status":"pass","exception":{},"id":"jkodo7p840-12by1vv1z9p","code":"() => {\r\n        const firstAppInfo = new Shared_1.AppInfo();\r\n        firstAppInfo.appId = \"appId\";\r\n        firstAppInfo.appName = \"name\";\r\n        firstAppInfo.isHeroApp = true;\r\n        const payload = {\r\n            appType: Shared_1.AppType.My,\r\n            appList: [firstAppInfo]\r\n        };\r\n        const action = { type: Utilities_1.fulfilled(Actions.fetchAppListAsync), payload };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialState, action);\r\n        stateAfter.featuredApp.should.eql(firstAppInfo);\r\n    }","duration":1},{"title":"it should toggle an app favorite when the right action is fired","status":"pass","exception":{},"id":"jkodo7p840-143sv8hd8hx","code":"() => {\r\n        const firstAppInfo = new Shared_1.AppInfo();\r\n        firstAppInfo.appId = \"appId\";\r\n        firstAppInfo.appName = \"name\";\r\n        firstAppInfo.isFavorite = true;\r\n        firstAppInfo.isHeroApp = true;\r\n        const initialStateModified = Object.assign({}, initialState);\r\n        initialStateModified.featuredApp = firstAppInfo;\r\n        initialStateModified.appDetails = firstAppInfo;\r\n        initialStateModified.appList = [firstAppInfo];\r\n        const modifiedAppInfo = Object.assign({}, firstAppInfo);\r\n        const action = { type: Utilities_1.fulfilled(Actions.toggleAppFavoriteAsync), payload: modifiedAppInfo };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialStateModified, action);\r\n        stateAfter.featuredApp.should.eql(modifiedAppInfo);\r\n        stateAfter.appDetails.should.eql(modifiedAppInfo);\r\n        stateAfter.appList[0].should.eql(modifiedAppInfo);\r\n    }","duration":0},{"title":"it should toggle search active when that action is fired","status":"pass","exception":{},"id":"jkodo7p840-jkngawfo1c","code":"() => {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        initialState.searchActive.should.be.false;\r\n        const initialStateModified = Object.assign({}, initialState, { searchString: \"test\" });\r\n        const action = { type: `${Actions.setSearchActive}`, payload: true };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialStateModified, action);\r\n        // tslint:disable-next-line:no-unused-expression\r\n        stateAfter.searchActive.should.be.true;\r\n        stateAfter.searchString.should.be.eql(\"\");\r\n    }","duration":1}],"title":"AppCatalogReducers update the state as expected","statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":4,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Reducers/AppCatalogReducers.Spec.js","step":{"title":"it should toggle search active when that action is fired","status":"pass","exception":{},"id":"jkodo7p840-jkngawfo1c","code":"() => {\r\n        // tslint:disable-next-line:no-unused-expression\r\n        initialState.searchActive.should.be.false;\r\n        const initialStateModified = Object.assign({}, initialState, { searchString: \"test\" });\r\n        const action = { type: `${Actions.setSearchActive}`, payload: true };\r\n        const stateAfter = AppCatalogReducers_1.AppCatalogReducers(initialStateModified, action);\r\n        // tslint:disable-next-line:no-unused-expression\r\n        stateAfter.searchActive.should.be.true;\r\n        stateAfter.searchString.should.be.eql(\"\");\r\n    }","duration":1},"id":"jkodo7p840","path":"Reducers"},{"type":"describe","children":[],"tests":[{"title":"initialState should have an empty toasts list","status":"pass","exception":{},"id":"jkku5ybx5s-ilcdy7vdvh","code":"() => {\r\n        const array = Array.from(initialState.toasts.entries());\r\n        array.length.should.be.eql(0);\r\n    }","duration":1},{"title":"it should update the toasts correctly when right action is fired","status":"pass","exception":{},"id":"jkku5ybx5s-jkl40i1phs","code":"() => {\r\n        const toastInfo = {\r\n            id: 1,\r\n            message: \"message\",\r\n            toastType: \"info\",\r\n            preventDuplicates: true,\r\n            timeout: 0\r\n        };\r\n        const action = Actions.addToastMessage(toastInfo);\r\n        currentState = ToastsReducers_1.ToastsReducers(initialState, action);\r\n        const array = Array.from(currentState.toasts.entries());\r\n        array.length.should.be.eql(1);\r\n        array[0][1].should.be.eql(toastInfo);\r\n    }","duration":0},{"title":"it should not update the state when a duplicate action is fired","status":"pass","exception":{},"id":"jkku5ybx5s-qpqefm5fr1","code":"() => {\r\n        const newDuplicateToast = {\r\n            id: 2,\r\n            message: \"message\",\r\n            toastType: \"info\",\r\n            preventDuplicates: true,\r\n            timeout: 0\r\n        };\r\n        const action = Actions.addToastMessage(newDuplicateToast);\r\n        currentState = ToastsReducers_1.ToastsReducers(currentState, action);\r\n        const array = Array.from(currentState.toasts.entries());\r\n        array.length.should.be.eql(1);\r\n        array[0][1].should.not.be.eql(newDuplicateToast);\r\n    }","duration":1}],"title":"ToastsReducers update the state as expected","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Reducers/ToastsReducers.Spec.js","step":{"title":"it should not update the state when a duplicate action is fired","status":"pass","exception":{},"id":"jkku5ybx5s-qpqefm5fr1","code":"() => {\r\n        const newDuplicateToast = {\r\n            id: 2,\r\n            message: \"message\",\r\n            toastType: \"info\",\r\n            preventDuplicates: true,\r\n            timeout: 0\r\n        };\r\n        const action = Actions.addToastMessage(newDuplicateToast);\r\n        currentState = ToastsReducers_1.ToastsReducers(currentState, action);\r\n        const array = Array.from(currentState.toasts.entries());\r\n        array.length.should.be.eql(1);\r\n        array[0][1].should.not.be.eql(newDuplicateToast);\r\n    }","duration":1},"id":"jkku5ybx5s","path":"Reducers"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should set that it is a react native player","status":"pass","exception":{},"id":"7o0kg3bbts-cn9nhhkt5s-7o1yx5c1s0","code":"() => {\r\n            Core.Environment.isReactNativePlayer().should.be.eql(true);\r\n        }","duration":0}],"title":"When initializing the core environment","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/EnvironmentAdapter.Spec.js","step":{"title":"should set that it is a react native player","status":"pass","exception":{},"id":"7o0kg3bbts-cn9nhhkt5s-7o1yx5c1s0","code":"() => {\r\n            Core.Environment.isReactNativePlayer().should.be.eql(true);\r\n        }","duration":0},"id":"7o0kg3bbts-cn9nhhkt5s"}],"tests":[],"title":"EnvironmentAdapter","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/EnvironmentAdapter.Spec.js","id":"7o0kg3bbts","path":"Services/Adapters"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should set the telemetry provider instance","status":"pass","exception":{},"id":"dtmz6jnckr-q6108pn2dc-lqwgg2k3cw","code":"() => {\r\n            should.exist(Core.Telemetry.Provider.instance);\r\n        }","duration":0},{"title":"should attach the log writer","status":"pass","exception":{},"id":"dtmz6jnckr-q6108pn2dc-7o060j13vk","code":"() => {\r\n            logWriterStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When initializing logging","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LoggingAdapter.Spec.js","step":{"title":"should attach the log writer","status":"pass","exception":{},"id":"dtmz6jnckr-q6108pn2dc-7o060j13vk","code":"() => {\r\n            logWriterStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},"id":"dtmz6jnckr-q6108pn2dc"},{"type":"context","children":[],"tests":[{"title":"should return the instantiated telemetry provider","status":"pass","exception":{},"id":"dtmz6jnckr-hdcmu7awez-1119hta94dn","code":"() => {\r\n            Adapters_1.LoggingAdapter.telemetryProvider.should.be.eql(telemetryProvider);\r\n        }","duration":0}],"title":"When getting the telemetry provider","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LoggingAdapter.Spec.js","step":{"title":"should return the instantiated telemetry provider","status":"pass","exception":{},"id":"dtmz6jnckr-hdcmu7awez-1119hta94dn","code":"() => {\r\n            Adapters_1.LoggingAdapter.telemetryProvider.should.be.eql(telemetryProvider);\r\n        }","duration":0},"id":"dtmz6jnckr-hdcmu7awez"}],"tests":[],"title":"LoggingAdapter","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LoggingAdapter.Spec.js","id":"dtmz6jnckr","path":"Services/Adapters"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should forward to the registered logger","status":"pass","exception":{},"id":"7o06budnwg-lqwrhzr0g0-txuae8f2nx","code":"() => {\r\n                mockLogger.debugMessages.length.should.be.eql(1);\r\n            }","duration":0},{"title":"should log with the verbose event name","status":"pass","exception":{},"id":"7o06budnwg-lqwrhzr0g0-12cq3xvo2rv","code":"() => {\r\n                mockLogger.debugMessages[0].eventName.should.be.eql(Infrastructure_1.EventNames.CoreLogVerbose);\r\n            }","duration":0},{"title":"should log the formatted message","status":"pass","exception":{},"id":"7o06budnwg-lqwrhzr0g0-kbxi3jks2z","code":"() => {\r\n                // We can't check the exact message because there are times in the message\r\n                let indexOfVerboseMessage = mockLogger.debugMessages[0].message.indexOf(verboseMessage);\r\n                let verboseMessageExists = (indexOfVerboseMessage > 0);\r\n                verboseMessageExists.should.be.eql(true);\r\n            }","duration":0}],"title":"When calling Core.Log.verbose","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LogWriter.Spec.js","step":{"title":"should log the formatted message","status":"pass","exception":{},"id":"7o06budnwg-lqwrhzr0g0-kbxi3jks2z","code":"() => {\r\n                // We can't check the exact message because there are times in the message\r\n                let indexOfVerboseMessage = mockLogger.debugMessages[0].message.indexOf(verboseMessage);\r\n                let verboseMessageExists = (indexOfVerboseMessage > 0);\r\n                verboseMessageExists.should.be.eql(true);\r\n            }","duration":0},"id":"7o06budnwg-lqwrhzr0g0"},{"type":"context","children":[],"tests":[{"title":"should forward to the registered logger","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-txuae8f2nx","code":"() => {\r\n            mockLogger.debugMessages.length.should.be.eql(1);\r\n        }","duration":1},{"title":"should log with the warning event name","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-x15u2fr81x","code":"() => {\r\n            mockLogger.debugMessages[0].eventName.should.be.eql(Infrastructure_1.EventNames.CoreLogWarning);\r\n        }","duration":0},{"title":"should log the formatted message","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-kbxi3jks2z","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfWarningMessage = mockLogger.debugMessages[0].message.indexOf(warningMessage);\r\n            let warningMessageExists = (indexOfWarningMessage > 0);\r\n            warningMessageExists.should.be.eql(true);\r\n        }","duration":0},{"title":"should log the operation name","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-lqzf4orakw","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfOperationName = mockLogger.debugMessages[0].message.indexOf(operationName);\r\n            let operationNameExists = (indexOfOperationName > 0);\r\n            operationNameExists.should.be.eql(true);\r\n        }","duration":1},{"title":"should log the error","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-dtn6c7emdp","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfError = mockLogger.debugMessages[0].message.indexOf(error);\r\n            let errorExists = (indexOfError > 0);\r\n            errorExists.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling Core.Log.warning","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LogWriter.Spec.js","step":{"title":"should log the error","status":"pass","exception":{},"id":"7o06budnwg-q657l1ujxc-dtn6c7emdp","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfError = mockLogger.debugMessages[0].message.indexOf(error);\r\n            let errorExists = (indexOfError > 0);\r\n            errorExists.should.be.eql(true);\r\n        }","duration":0},"id":"7o06budnwg-q657l1ujxc"},{"type":"context","children":[],"tests":[{"title":"should forward to the registered logger","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-txuae8f2nx","code":"() => {\r\n            mockLogger.debugMessages.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should log with the warning event name","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-x15u2fr81x","code":"() => {\r\n            mockLogger.debugMessages[0].eventName.should.be.eql(Infrastructure_1.EventNames.CoreLogError);\r\n        }","duration":0},{"title":"should log the formatted message","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-kbxi3jks2z","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfErrorMessage = mockLogger.debugMessages[0].message.indexOf(errorMessage);\r\n            let errorMessageExists = (indexOfErrorMessage > 0);\r\n            errorMessageExists.should.be.eql(true);\r\n        }","duration":0},{"title":"should log the operation name","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-lqzf4orakw","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfOperationName = mockLogger.debugMessages[0].message.indexOf(operationName);\r\n            let operationNameExists = (indexOfOperationName > 0);\r\n            operationNameExists.should.be.eql(true);\r\n        }","duration":0},{"title":"should log the error","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-dtn6c7emdp","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfError = mockLogger.debugMessages[0].message.indexOf(error);\r\n            let errorExists = (indexOfError > 0);\r\n            errorExists.should.be.eql(true);\r\n        }","duration":0}],"title":"When calling Core.Log.error","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LogWriter.Spec.js","step":{"title":"should log the error","status":"pass","exception":{},"id":"7o06budnwg-7nvv149crk-dtn6c7emdp","code":"() => {\r\n            // We can't check the exact message because there are times in the message\r\n            let indexOfError = mockLogger.debugMessages[0].message.indexOf(error);\r\n            let errorExists = (indexOfError > 0);\r\n            errorExists.should.be.eql(true);\r\n        }","duration":0},"id":"7o06budnwg-7nvv149crk"}],"tests":[],"title":"LogWriter","statistics":{"passCount":13,"failedCount":0,"pendingCount":0,"totalCount":13,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/LogWriter.Spec.js","id":"7o06budnwg","path":"Services/Adapters"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should call acquire token async","status":"pass","exception":{},"id":"53ifriekp9-16b3e1w78cw-mcgqs6g6zf","code":"() => {\r\n            acquireTokenAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the correct parameters to acquire the token","status":"pass","exception":{},"id":"53ifriekp9-16b3e1w78cw-8ekv40exqb","code":"() => {\r\n            acquireTokenAsyncStub.calledWith(resourceUrl, clientId, redirectId, userId, extraQueryParameters).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the authentication result","status":"pass","exception":{},"id":"53ifriekp9-16b3e1w78cw-fnacr7k5rn","code":"() => {\r\n            acquireTokenResult.should.be.eql(expectedAcquireTokenResult);\r\n        }","duration":0}],"title":"When acquiring the token","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NativeAADAuthenticationPlugin.Spec.js","step":{"title":"should return the authentication result","status":"pass","exception":{},"id":"53ifriekp9-16b3e1w78cw-fnacr7k5rn","code":"() => {\r\n            acquireTokenResult.should.be.eql(expectedAcquireTokenResult);\r\n        }","duration":0},"id":"53ifriekp9-16b3e1w78cw"},{"type":"context","children":[],"tests":[{"title":"should call acquire token async","status":"pass","exception":{},"id":"53ifriekp9-a59vsd0h8g-mcgqs6g6zf","code":"() => {\r\n            acquireTokenAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should pass the correct parameters to acquire the token","status":"pass","exception":{},"id":"53ifriekp9-a59vsd0h8g-8ekv40exqb","code":"() => {\r\n            acquireTokenAsyncStub.calledWith(resourceUrl, clientId, redirectId, userId, extraQueryParameters).should.be.eql(true);\r\n        }","duration":0},{"title":"should return an error","status":"pass","exception":{},"id":"53ifriekp9-a59vsd0h8g-167bve7rcwr","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":0}],"title":"When acquiring the token fails","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NativeAADAuthenticationPlugin.Spec.js","step":{"title":"should return an error","status":"pass","exception":{},"id":"53ifriekp9-a59vsd0h8g-167bve7rcwr","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":0},"id":"53ifriekp9-a59vsd0h8g"},{"type":"context","children":[],"tests":[{"title":"should call acquire token silently async","status":"pass","exception":{},"id":"53ifriekp9-3cwzr909ln-hf6cja1udc","code":"() => {\r\n            acquireTokenSilentAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should pass the correct parameters to acquire the token silently","status":"pass","exception":{},"id":"53ifriekp9-3cwzr909ln-6wcviqci3f","code":"() => {\r\n            acquireTokenSilentAsyncStub.calledWith(resourceUrl, clientId).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the authentication result","status":"pass","exception":{},"id":"53ifriekp9-3cwzr909ln-fnacr7k5rn","code":"() => {\r\n            acquireTokenResult.should.be.eql(expectedAcquireTokenResult);\r\n        }","duration":0}],"title":"When acquiring the token silently","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NativeAADAuthenticationPlugin.Spec.js","step":{"title":"should return the authentication result","status":"pass","exception":{},"id":"53ifriekp9-3cwzr909ln-fnacr7k5rn","code":"() => {\r\n            acquireTokenResult.should.be.eql(expectedAcquireTokenResult);\r\n        }","duration":0},"id":"53ifriekp9-3cwzr909ln"},{"type":"context","children":[],"tests":[{"title":"should call acquire token silently async","status":"pass","exception":{},"id":"53ifriekp9-a54h3g2b28-hf6cja1udc","code":"() => {\r\n            acquireTokenSilentAsyncStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the correct parameters to acquire the token silently","status":"pass","exception":{},"id":"53ifriekp9-a54h3g2b28-6wcviqci3f","code":"() => {\r\n            acquireTokenSilentAsyncStub.calledWith(resourceUrl, clientId).should.be.eql(true);\r\n        }","duration":0},{"title":"should return an error","status":"pass","exception":{},"id":"53ifriekp9-a54h3g2b28-167bve7rcwr","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":1}],"title":"When acquiring the token silently fails","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NativeAADAuthenticationPlugin.Spec.js","step":{"title":"should return an error","status":"pass","exception":{},"id":"53ifriekp9-a54h3g2b28-167bve7rcwr","code":"() => {\r\n            actualError.should.be.eql(expectedError);\r\n        }","duration":1},"id":"53ifriekp9-a54h3g2b28"}],"tests":[],"title":"NativeAADAuthenticationPlugin","statistics":{"passCount":12,"failedCount":0,"pendingCount":0,"totalCount":12,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/NativeAADAuthenticationPlugin.Spec.js","id":"53ifriekp9","path":"Services/Adapters"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should return ReactNativeTelemetryProvider","status":"pass","exception":{},"id":"167bv8k30kz-iubfitqez9-1enbwgzf9f","code":"() => {\r\n            telemetryProvider.getProviderName().should.be.eql(\"ReactNativeTelemetryProvider\");\r\n        }","duration":0}],"title":"When getting the provider name","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should return ReactNativeTelemetryProvider","status":"pass","exception":{},"id":"167bv8k30kz-iubfitqez9-1enbwgzf9f","code":"() => {\r\n            telemetryProvider.getProviderName().should.be.eql(\"ReactNativeTelemetryProvider\");\r\n        }","duration":0},"id":"167bv8k30kz-iubfitqez9"},{"type":"context","children":[],"tests":[{"title":"should call enable debug on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-q63pogxidc-12nmg3tv8w5","code":"() => {\r\n            mockLogger.debugOn.should.be.eql(true);\r\n        }","duration":1}],"title":"When enabling debug","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should call enable debug on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-q63pogxidc-12nmg3tv8w5","code":"() => {\r\n            mockLogger.debugOn.should.be.eql(true);\r\n        }","duration":1},"id":"167bv8k30kz-q63pogxidc"},{"type":"context","children":[],"tests":[{"title":"should set the session id on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-17s060yuh2b-7nxq403yi0","code":"() => {\r\n            mockLogger.sessionId.should.be.eql(sessionId);\r\n        }","duration":0}],"title":"When setting initial properties","statistics":{"passCount":1,"failedCount":0,"pendingCount":0,"totalCount":1,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should set the session id on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-17s060yuh2b-7nxq403yi0","code":"() => {\r\n            mockLogger.sessionId.should.be.eql(sessionId);\r\n        }","duration":0},"id":"167bv8k30kz-17s060yuh2b"},{"type":"context","children":[],"tests":[{"title":"should call log telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-8i2jw15a57","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass the event name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-167c14py0il","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(eventName);\r\n        }","duration":0},{"title":"should pass the operation name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-7nsuvp122o","code":"() => {\r\n            mockLogger.telemetryEvents[0].operationName.should.be.eql(operationName);\r\n        }","duration":0},{"title":"should remove operation name from logged data","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-maxq1b9epv","code":"() => {\r\n            should.not.exist(mockLogger.telemetryEvents[0].data.operationName);\r\n        }","duration":0},{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-tscg9vag0d","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(properties);\r\n        }","duration":1}],"title":"When calling track event","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-cn60ircj2o-tscg9vag0d","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(properties);\r\n        }","duration":1},"id":"167bv8k30kz-cn60ircj2o"},{"type":"context","children":[],"tests":[{"title":"should call log warning on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-flhyg9rnnx","code":"() => {\r\n            mockLogger.warnings.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass the event name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-167c14py0il","code":"() => {\r\n            mockLogger.warnings[0].eventName.should.be.eql(eventName);\r\n        }","duration":1},{"title":"should pass the operation name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-7nsuvp122o","code":"() => {\r\n            mockLogger.warnings[0].operationName.should.be.eql(operationName);\r\n        }","duration":0},{"title":"should remove operation name from logged data","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-maxq1b9epv","code":"() => {\r\n            should.not.exist(mockLogger.warnings[0].data.operationName);\r\n        }","duration":0},{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-tscg9vag0d","code":"() => {\r\n            mockLogger.warnings[0].data.should.be.eql(properties);\r\n        }","duration":0}],"title":"When calling track warning event","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-10xk5xw1iwt-tscg9vag0d","code":"() => {\r\n            mockLogger.warnings[0].data.should.be.eql(properties);\r\n        }","duration":0},"id":"167bv8k30kz-10xk5xw1iwt"},{"type":"context","children":[],"tests":[{"title":"should call log error on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-tsc987swe3","code":"() => {\r\n            mockLogger.errors.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass the event name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-167c14py0il","code":"() => {\r\n            mockLogger.errors[0].eventName.should.be.eql(eventName);\r\n        }","duration":0},{"title":"should pass the operation name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-7nsuvp122o","code":"() => {\r\n            mockLogger.errors[0].operationName.should.be.eql(operationName);\r\n        }","duration":0},{"title":"should remove operation name from logged data","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-maxq1b9epv","code":"() => {\r\n            should.not.exist(mockLogger.errors[0].data.operationName);\r\n        }","duration":1},{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-tscg9vag0d","code":"() => {\r\n            mockLogger.errors[0].data.should.be.eql(properties);\r\n        }","duration":0}],"title":"When calling track error event","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the properties to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-12petn3k06j-tscg9vag0d","code":"() => {\r\n            mockLogger.errors[0].data.should.be.eql(properties);\r\n        }","duration":0},"id":"167bv8k30kz-12petn3k06j"},{"type":"context","children":[],"tests":[{"title":"should call track metric on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-85man1pv63-17z6pxqm763","code":"() => {\r\n            mockLogger.metrics.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass the metric name to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-85man1pv63-7y12uxlubf","code":"() => {\r\n            mockLogger.metrics[0].metricName.should.be.eql(metricName);\r\n        }","duration":0},{"title":"should pass the metric value to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-85man1pv63-17z6v0o5h31","code":"() => {\r\n            mockLogger.metrics[0].value.should.be.eql(metricValue);\r\n        }","duration":0}],"title":"When calling track metric","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the metric value to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-85man1pv63-17z6v0o5h31","code":"() => {\r\n            mockLogger.metrics[0].value.should.be.eql(metricValue);\r\n        }","duration":0},"id":"167bv8k30kz-85man1pv63"},{"type":"context","children":[],"tests":[{"title":"should call track exception on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-16b0ajrvscg-7nycha11xc","code":"() => {\r\n            mockLogger.exceptions.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should pass the exception to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-16b0ajrvscg-7nwd0x8b40","code":"() => {\r\n            mockLogger.exceptions[0].should.be.eql(exception);\r\n        }","duration":0},{"title":"should update all active scenarios","status":"pass","exception":{},"id":"167bv8k30kz-16b0ajrvscg-a5aye9h5xc","code":"() => {\r\n            setAllScenarioResultsSpy.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should set all active scenarios with a result of SuccessWithErrors","status":"pass","exception":{},"id":"167bv8k30kz-16b0ajrvscg-a5a525xtfk","code":"() => {\r\n            setAllScenarioResultsSpy.calledWith(Core.Telemetry.ScenarioResult.SuccessWithErrors).should.be.eql(true);\r\n        }","duration":0}],"title":"When calling track exception","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should set all active scenarios with a result of SuccessWithErrors","status":"pass","exception":{},"id":"167bv8k30kz-16b0ajrvscg-a5a525xtfk","code":"() => {\r\n            setAllScenarioResultsSpy.calledWith(Core.Telemetry.ScenarioResult.SuccessWithErrors).should.be.eql(true);\r\n        }","duration":0},"id":"167bv8k30kz-16b0ajrvscg"},{"type":"context","children":[],"tests":[{"title":"should set the user properties in the data sent to the telemetry event","status":"pass","exception":{},"id":"167bv8k30kz-xc1w343ouz-cnc8qdjzb4","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.tenantId.should.be.eql(user.tenantId);\r\n            mockLogger.telemetryEvents[0].data.oid.should.be.eql(user.oid);\r\n            mockLogger.telemetryEvents[0].data.distinct_id.should.be.eql(user.distinct_id);\r\n        }","duration":1},{"title":"should set the user properties in the data sent to log warning","status":"pass","exception":{},"id":"167bv8k30kz-xc1w343ouz-q61yvaaf40","code":"() => {\r\n            mockLogger.warnings[0].data.tenantId.should.be.eql(user.tenantId);\r\n            mockLogger.warnings[0].data.oid.should.be.eql(user.oid);\r\n            mockLogger.warnings[0].data.distinct_id.should.be.eql(user.distinct_id);\r\n        }","duration":0},{"title":"should set the user properties in the data sent to log error","status":"pass","exception":{},"id":"167bv8k30kz-xc1w343ouz-q8mmlc1jir","code":"() => {\r\n            mockLogger.errors[0].data.tenantId.should.be.eql(user.tenantId);\r\n            mockLogger.errors[0].data.oid.should.be.eql(user.oid);\r\n            mockLogger.errors[0].data.distinct_id.should.be.eql(user.distinct_id);\r\n        }","duration":0}],"title":"When calling identify user","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should set the user properties in the data sent to log error","status":"pass","exception":{},"id":"167bv8k30kz-xc1w343ouz-q8mmlc1jir","code":"() => {\r\n            mockLogger.errors[0].data.tenantId.should.be.eql(user.tenantId);\r\n            mockLogger.errors[0].data.oid.should.be.eql(user.oid);\r\n            mockLogger.errors[0].data.distinct_id.should.be.eql(user.distinct_id);\r\n        }","duration":0},"id":"167bv8k30kz-xc1w343ouz"},{"type":"context","children":[],"tests":[{"title":"should set the default properties in the data sent to the telemetry event","status":"pass","exception":{},"id":"167bv8k30kz-y2jmgfb6uj-cn57afl0e8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.defaultProperty1.should.be.eql(defaultProperties.defaultProperty1);\r\n            mockLogger.telemetryEvents[0].data.defaultProperty2.should.be.eql(defaultProperties.defaultProperty2);\r\n        }","duration":0},{"title":"should set the default properties in the data sent to log warning","status":"pass","exception":{},"id":"167bv8k30kz-y2jmgfb6uj-a0mmdwl5id","code":"() => {\r\n            mockLogger.warnings[0].data.defaultProperty1.should.be.eql(defaultProperties.defaultProperty1);\r\n            mockLogger.warnings[0].data.defaultProperty2.should.be.eql(defaultProperties.defaultProperty2);\r\n        }","duration":0},{"title":"should set the default properties in the data sent to log error","status":"pass","exception":{},"id":"167bv8k30kz-y2jmgfb6uj-12nm926doi3","code":"() => {\r\n            mockLogger.errors[0].data.defaultProperty1.should.be.eql(defaultProperties.defaultProperty1);\r\n            mockLogger.errors[0].data.defaultProperty2.should.be.eql(defaultProperties.defaultProperty2);\r\n        }","duration":0}],"title":"When calling set default properties","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should set the default properties in the data sent to log error","status":"pass","exception":{},"id":"167bv8k30kz-y2jmgfb6uj-12nm926doi3","code":"() => {\r\n            mockLogger.errors[0].data.defaultProperty1.should.be.eql(defaultProperties.defaultProperty1);\r\n            mockLogger.errors[0].data.defaultProperty2.should.be.eql(defaultProperties.defaultProperty2);\r\n        }","duration":0},"id":"167bv8k30kz-y2jmgfb6uj"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to start the scenario","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-czn4wnb28","code":"() => {\r\n            startScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario name and custom scenario data to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-ogrttxilhf","code":"() => {\r\n            startScenarioStub.calledWith(scenarioName, customScenarioData).should.be.eql(true);\r\n        }","duration":0},{"title":"should call to log a telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-c1scuvd2r1","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":1},{"title":"should log a telemetry with a start scenario event name","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-lr0o5lzxzk","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.startScenario);\r\n        }","duration":0},{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(startScenarioData);\r\n        }","duration":1},{"title":"should return the scenario guid from the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-7nydzywgfk","code":"() => {\r\n            returnScenarioGuid.should.be.eql(startScenarioData.scenarioGuid);\r\n        }","duration":0}],"title":"When calling start scenario","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should return the scenario guid from the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-q602wbhexp-7nydzywgfk","code":"() => {\r\n            returnScenarioGuid.should.be.eql(startScenarioData.scenarioGuid);\r\n        }","duration":0},"id":"167bv8k30kz-q602wbhexp"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to end the scenario","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-cybfbxbds","code":"() => {\r\n            endScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario guid to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-hdcs6kar4t","code":"() => {\r\n            endScenarioStub.calledWith(endScenarioData.scenarioGuid).should.be.eql(true);\r\n        }","duration":1},{"title":"should call to log a telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-c1scuvd2r1","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should log a telemetry with a end scenario event name","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-lr35da9jpc","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n        }","duration":0},{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(endScenarioData);\r\n        }","duration":0}],"title":"When calling end scenario","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-17wk6c0vav9-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(endScenarioData);\r\n        }","duration":0},"id":"167bv8k30kz-17wk6c0vav9"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to pass the scenario","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-4vqac9pfvf","code":"() => {\r\n            passScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario guid to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-hdcs6kar4t","code":"() => {\r\n            passScenarioStub.calledWith(passScenarioData.scenarioGuid).should.be.eql(true);\r\n        }","duration":1},{"title":"should call to log a telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-c1scuvd2r1","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should log a telemetry with a end scenario event name","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-lr35da9jpc","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n        }","duration":0},{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(passScenarioData);\r\n        }","duration":0}],"title":"When calling pass scenario","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-crvyirhmo-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(passScenarioData);\r\n        }","duration":0},"id":"167bv8k30kz-crvyirhmo"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to pass the scenario with errors","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-xcy50tne11","code":"() => {\r\n            passScenarioWithErrorsStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario guid to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-hdcs6kar4t","code":"() => {\r\n            passScenarioWithErrorsStub.calledWith(passScenarioWithErrorsData.scenarioGuid).should.be.eql(true);\r\n        }","duration":1},{"title":"should call to log a telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-c1scuvd2r1","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should log a telemetry with a end scenario event name","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-lr35da9jpc","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n        }","duration":0},{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(passScenarioWithErrorsData);\r\n        }","duration":0}],"title":"When calling pass scenario with errors","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-vl3cs0hwhx-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(passScenarioWithErrorsData);\r\n        }","duration":0},"id":"167bv8k30kz-vl3cs0hwhx"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to fail the scenario","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-cqkyvi96o","code":"() => {\r\n            failScenarioStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario guid to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-hdcs6kar4t","code":"() => {\r\n            failScenarioStub.calledWith(failScenarioData.scenarioGuid).should.be.eql(true);\r\n        }","duration":0},{"title":"should call to log a telemetry event on the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-c1scuvd2r1","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(1);\r\n        }","duration":0},{"title":"should log a telemetry with a end scenario event name","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-lr35da9jpc","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n        }","duration":0},{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(failScenarioData);\r\n        }","duration":0}],"title":"When calling fail scenario","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should pass the scenario data from the scenario tracker to the registered logger","status":"pass","exception":{},"id":"167bv8k30kz-bz5g7syw4r-7nxai09ha8","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(failScenarioData);\r\n        }","duration":0},"id":"167bv8k30kz-bz5g7syw4r"},{"type":"context","children":[],"tests":[{"title":"should call scenario tracker to get all active scenarios","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-a56lw5vals","code":"() => {\r\n            getAllActiveScenariosStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should call end scenario for each active scenario","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-g3i44ur2m3","code":"() => {\r\n            endScenarioStub.callCount.should.be.eql(activeScenarios.length);\r\n        }","duration":1},{"title":"should log a telemetry event on the registered logger for each active scenario","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-17wjzaucrfv","code":"() => {\r\n            mockLogger.telemetryEvents.length.should.be.eql(activeScenarios.length);\r\n        }","duration":0},{"title":"should pass the scenario guid and a scenario result of TerminatedOnAppClose for each active scenario to the scenario tracker","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-xc1ueal05f","code":"() => {\r\n            endScenarioStub.firstCall.calledWith(activeScenarios[0].guid, Core.Telemetry.ScenarioResult.TerminatedOnAppClose);\r\n            endScenarioStub.secondCall.calledWith(activeScenarios[0].guid, Core.Telemetry.ScenarioResult.TerminatedOnAppClose);\r\n        }","duration":0},{"title":"should log a end scenario event on the registered logger for each active scenario","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-bz5nd88o85","code":"() => {\r\n            mockLogger.telemetryEvents[0].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n            mockLogger.telemetryEvents[1].eventName.should.be.eql(Core.Telemetry.Strings.endScenario);\r\n        }","duration":0},{"title":"should log the end scenario data on the registered logger for each active scenario","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-12kzkzxbenn","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(endScenarioData);\r\n            mockLogger.telemetryEvents[1].data.should.be.eql(endScenarioData);\r\n        }","duration":0}],"title":"When calling end all scenarios on terminate","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should log the end scenario data on the registered logger for each active scenario","status":"pass","exception":{},"id":"167bv8k30kz-lqz4jqjx8g-12kzkzxbenn","code":"() => {\r\n            mockLogger.telemetryEvents[0].data.should.be.eql(endScenarioData);\r\n            mockLogger.telemetryEvents[1].data.should.be.eql(endScenarioData);\r\n        }","duration":0},"id":"167bv8k30kz-lqz4jqjx8g"},{"type":"context","children":[],"tests":[{"title":"should set session id on all registered loggers","status":"pass","exception":{},"id":"167bv8k30kz-12yz9se5wb-a57fnckqo0","code":"() => {\r\n            mockLogger.sessionId.should.be.eql(sessionId);\r\n        }","duration":0},{"title":"should dispatch the setSessionId action","status":"pass","exception":{},"id":"167bv8k30kz-12yz9se5wb-16b6tyyx5ds","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions_1.setSessionId}`);\r\n            actions[0].payload.should.be.eql(sessionId);\r\n        }","duration":0}],"title":"When setting the session id","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","step":{"title":"should dispatch the setSessionId action","status":"pass","exception":{},"id":"167bv8k30kz-12yz9se5wb-16b6tyyx5ds","code":"() => {\r\n            const actions = store.getActions();\r\n            actions[0].type.should.be.eql(`${Actions_1.setSessionId}`);\r\n            actions[0].payload.should.be.eql(sessionId);\r\n        }","duration":0},"id":"167bv8k30kz-12yz9se5wb"}],"tests":[],"title":"TelemetryProvider","statistics":{"passCount":65,"failedCount":0,"pendingCount":0,"totalCount":65,"totalRuleViolations":0,"duration":11,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Adapters/TelemetryProvider.Spec.js","id":"167bv8k30kz","path":"Services/Adapters"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0},{"title":"should track the event","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-cn498lr6dc","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should track the event with the correct event name","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-thg8pemgbh","code":"() => {\r\n            telemetryStub.firstCall.args[0].should.be.eql(request.actionArgs[0]);\r\n        }","duration":0},{"title":"should track the event with the correct event data","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-4kdomg7gd7","code":"() => {\r\n            telemetryStub.firstCall.args[1].should.be.eql(request.actionArgs[1]);\r\n        }","duration":0}],"title":"When the action is trackEvent","statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should track the event with the correct event data","status":"pass","exception":{},"id":"ph2m5cg8z4-b7nh5twfol-4kdomg7gd7","code":"() => {\r\n            telemetryStub.firstCall.args[1].should.be.eql(request.actionArgs[1]);\r\n        }","duration":0},"id":"ph2m5cg8z4-b7nh5twfol"},{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0},{"title":"should track the metric","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-wzlkvrg8cz","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should track the metric with the correct metric name","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-r2kyol1foz","code":"() => {\r\n            telemetryStub.firstCall.args[0].should.be.eql(request.actionArgs[0]);\r\n        }","duration":0},{"title":"should track the metric with the correct metric value","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-h4zo6g2bxh","code":"() => {\r\n            telemetryStub.firstCall.args[1].should.be.eql(request.actionArgs[1]);\r\n        }","duration":0}],"title":"When the action is trackMetric","statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should track the metric with the correct metric value","status":"pass","exception":{},"id":"ph2m5cg8z4-hf0yfkvg3k-h4zo6g2bxh","code":"() => {\r\n            telemetryStub.firstCall.args[1].should.be.eql(request.actionArgs[1]);\r\n        }","duration":0},"id":"ph2m5cg8z4-hf0yfkvg3k"},{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":1},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0},{"title":"should track the exception","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-16b75u4h6n4","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n            telemetryStub.calledWith(request.actionArgs[0]).should.be.eql(true);\r\n        }","duration":0}],"title":"When the action is trackException","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should track the exception","status":"pass","exception":{},"id":"ph2m5cg8z4-17vozmk1idf-16b75u4h6n4","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n            telemetryStub.calledWith(request.actionArgs[0]).should.be.eql(true);\r\n        }","duration":0},"id":"ph2m5cg8z4-17vozmk1idf"},{"type":"context","children":[],"tests":[{"title":"should call start scenario once","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-12cqahqfaq5","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should pass the scenario name to be started","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-9y96g0codp","code":"() => {\r\n            telemetryStub.calledWith(request.actionArgs[0]);\r\n        }","duration":0},{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":1},{"title":"should send a result with one args","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-m4yr6opa6d","code":"() => {\r\n            result.message.args.length.should.be.eql(1);\r\n        }","duration":1},{"title":"should send a result with the scenario guid","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-9y96k93xth","code":"() => {\r\n            result.message.args[0].should.be.eql(scenarioGuid);\r\n        }","duration":0}],"title":"When the action is startScenario","statistics":{"passCount":8,"failedCount":0,"pendingCount":0,"totalCount":8,"totalRuleViolations":0,"duration":3,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should send a result with the scenario guid","status":"pass","exception":{},"id":"ph2m5cg8z4-q5zxj0jju3-9y96k93xth","code":"() => {\r\n            result.message.args[0].should.be.eql(scenarioGuid);\r\n        }","duration":0},"id":"ph2m5cg8z4-q5zxj0jju3"},{"type":"context","children":[],"tests":[{"title":"should call end scenario once","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-15wfraxfi6b","code":"() => {\r\n            telemetryStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the scenario guid to be ended","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-15qws0ripr4","code":"() => {\r\n            telemetryStub.calledWith(request.actionArgs[0]);\r\n        }","duration":0},{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":1},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0}],"title":"When the action is endScenario","statistics":{"passCount":7,"failedCount":0,"pendingCount":0,"totalCount":7,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-bz5op304gd-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0},"id":"ph2m5cg8z4-bz5op304gd"},{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.eql(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.eql(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.eql(request.callbackId);\r\n        }","duration":0},{"title":"should send a result with no args","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-tt8iznpkp9","code":"() => {\r\n            result.message.args.length.should.be.eql(0);\r\n        }","duration":0},{"title":"should send a workflow result command with an action of error","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-17z6pp93pu3","code":"() => {\r\n            errorCommand.message.action.should.be.eql(\"error\");\r\n        }","duration":1}],"title":"When the action is unknown","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","step":{"title":"should send a workflow result command with an action of error","status":"pass","exception":{},"id":"ph2m5cg8z4-rwzq9mz0ij-17z6pp93pu3","code":"() => {\r\n            errorCommand.message.action.should.be.eql(\"error\");\r\n        }","duration":1},"id":"ph2m5cg8z4-rwzq9mz0ij"}],"tests":[],"title":"Routing Cordova plugin messages for service: PublishedAppTelemetry","statistics":{"passCount":43,"failedCount":0,"pendingCount":0,"totalCount":43,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/PublishedAppTelemetryPluginService.Spec.js","id":"ph2m5cg8z4","path":"Services/CordovaPlugin/Plugins"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-144kwx6hqpn","code":"() => {\r\n            result.message.isPluginCall.should.be.equal(true);\r\n        }","duration":0},{"title":"should send a result with status of ok","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-z9fm7lpk1c","code":"() => {\r\n            result.message.status.should.be.equal(Modules.ApiHost.Status.Ok);\r\n        }","duration":0},{"title":"should send a result with args","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-q9iwuik719","code":"() => {\r\n            result.message.args.length.should.be.equal(1);\r\n        }","duration":0},{"title":"should send a result with args.false","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-lquubl2mlc","code":"() => {\r\n            result.message.args[0].should.be.equal(false);\r\n        }","duration":0},{"title":"should send a result with keepCallBack to false","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-x15wa47351","code":"() => {\r\n            result.message.keepCallback.should.be.equal(false);\r\n        }","duration":1},{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.equal(request.callbackId);\r\n        }","duration":0}],"title":"And the action is init","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/StatusBarPluginService.Spec.js","step":{"title":"should send a result with the callbackId of the request","status":"pass","exception":{},"id":"r3o6lkhnbn-cn6ppvgerk-cn5wqz4crk","code":"() => {\r\n            result.message.callbackId.should.be.equal(request.callbackId);\r\n        }","duration":0},"id":"r3o6lkhnbn-cn6ppvgerk"}],"tests":[],"title":"Routing Cordova plugin messages for service: StatusBar","statistics":{"passCount":6,"failedCount":0,"pendingCount":0,"totalCount":6,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/StatusBarPluginService.Spec.js","id":"r3o6lkhnbn","path":"Services/CordovaPlugin/Plugins"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should send a result with isPluginCall to true","status":"pending","exception":{},"code":"","duration":0},{"title":"should send a result with status of ok","status":"pending","exception":{},"code":"","duration":0},{"title":"should send a result with args","status":"pending","exception":{},"code":"","duration":0},{"title":"should send a result with keepCallBack to false","status":"pending","exception":{},"code":"","duration":0},{"title":"should send a result with the callbackId of the request","status":"pending","exception":{},"code":"","duration":0}],"title":"And the action is [requires investigation]","statistics":{"passCount":0,"failedCount":0,"pendingCount":5,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/UniversalLinksPluginService.Spec.js","step":{"title":"should send a result with the callbackId of the request","status":"pending","exception":{},"code":"","duration":0},"id":"a55inmpa5c-4y2q2rvrwg"}],"tests":[],"title":"Routing Cordova plugin messages for service: UniversalLinks","statistics":{"passCount":0,"failedCount":0,"pendingCount":5,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":0,"failedPercent":0,"pendingPercent":1},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/CordovaPlugin/Plugins/UniversalLinksPluginService.Spec.js","id":"a55inmpa5c","path":"Services/CordovaPlugin/Plugins"},{"type":"describe","children":[{"type":"context","children":[],"tests":[{"title":"should try to check if the index file exists","status":"pass","exception":{},"id":"ph4xyrsfj4-iwpqlp06p9-a5bp5ycgw0","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name installedAppsIndex.json exists","status":"pass","exception":{},"id":"ph4xyrsfj4-iwpqlp06p9-xcxzh4igjf","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file","status":"pass","exception":{},"id":"ph4xyrsfj4-iwpqlp06p9-x15pbeshb7","code":"() => {\r\n            createFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file called installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-iwpqlp06p9-oda4lvpa0j","code":"() => {\r\n            createFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the install app repository on first client launch","statistics":{"passCount":4,"failedCount":0,"pendingCount":0,"totalCount":4,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should create an index file called installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-iwpqlp06p9-oda4lvpa0j","code":"() => {\r\n            createFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},"id":"ph4xyrsfj4-iwpqlp06p9"},{"type":"context","children":[],"tests":[{"title":"should not try to check if the index file exists","status":"pass","exception":{},"id":"ph4xyrsfj4-ka23ktn1s0-172gnagockz","code":"() => {\r\n            doesFileExistStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file","status":"pass","exception":{},"id":"ph4xyrsfj4-ka23ktn1s0-x15pbeshb7","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the install app repository twice in a row","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should create an index file","status":"pass","exception":{},"id":"ph4xyrsfj4-ka23ktn1s0-x15pbeshb7","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0},"id":"ph4xyrsfj4-ka23ktn1s0"},{"type":"context","children":[],"tests":[{"title":"should try to check if the index file exists only once","status":"pass","exception":{},"id":"ph4xyrsfj4-11lbrk7x4n4-lr4d325t34","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name installedAppsIndex.json exists","status":"pass","exception":{},"id":"ph4xyrsfj4-11lbrk7x4n4-xcxzh4igjf","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should create an index file only once","status":"pass","exception":{},"id":"ph4xyrsfj4-11lbrk7x4n4-lqyl9q95u8","code":"() => {\r\n            createFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the install app repository twice in parallel","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should create an index file only once","status":"pass","exception":{},"id":"ph4xyrsfj4-11lbrk7x4n4-lqyl9q95u8","code":"() => {\r\n            createFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},"id":"ph4xyrsfj4-11lbrk7x4n4"},{"type":"context","children":[],"tests":[{"title":"should try to check if the index file exists","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-a5bp5ycgw0","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name installedAppsIndex.json exists","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-xcxzh4igjf","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should not create an index file","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-10kvgh6qazx","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-lqxpn4f28w","code":"() => {\r\n            readTextFromFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file with name installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-16b1tubzgsg","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the install app repository with an empty index","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should read the index file with name installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-b5in7uwx6t-16b1tubzgsg","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},"id":"ph4xyrsfj4-b5in7uwx6t"},{"type":"context","children":[],"tests":[{"title":"should try to check if the index file exists","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-a5bp5ycgw0","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should try to check if the index file with name installedAppsIndex.json exists","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-xcxzh4igjf","code":"() => {\r\n            doesFileExistStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},{"title":"should not create an index file","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-10kvgh6qazx","code":"() => {\r\n            createFileStub.notCalled.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-lqxpn4f28w","code":"() => {\r\n            readTextFromFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should read the index file with name installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-16b1tubzgsg","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0}],"title":"When loading the install app repository with a populated index","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should read the index file with name installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-afeefkyie3-16b1tubzgsg","code":"() => {\r\n            readTextFromFileStub.calledWith(Services_1.InstallAppRepository.installedAppIndexFileName).should.be.eql(true);\r\n        }","duration":0},"id":"ph4xyrsfj4-afeefkyie3"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-mv6dv2v0f4-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return 0 as the first folder number","status":"pass","exception":{},"id":"ph4xyrsfj4-mv6dv2v0f4-ywmxwk03l1","code":"() => {\r\n            firstFolderNumber.should.be.eql(0);\r\n        }","duration":0},{"title":"should increment the folder number by 1","status":"pass","exception":{},"id":"ph4xyrsfj4-mv6dv2v0f4-zqgw165i6z","code":"() => {\r\n            secondFolderNumber.should.be.eql(1);\r\n        }","duration":0}],"title":"When getting the next folder number with an empty index","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should increment the folder number by 1","status":"pass","exception":{},"id":"ph4xyrsfj4-mv6dv2v0f4-zqgw165i6z","code":"() => {\r\n            secondFolderNumber.should.be.eql(1);\r\n        }","duration":0},"id":"ph4xyrsfj4-mv6dv2v0f4"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-c7970uu34z-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the next folder number available","status":"pass","exception":{},"id":"ph4xyrsfj4-c7970uu34z-lqy9dmrjmo","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":0}],"title":"When getting the next folder number with a populated index","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return the next folder number available","status":"pass","exception":{},"id":"ph4xyrsfj4-c7970uu34z-lqy9dmrjmo","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":0},"id":"ph4xyrsfj4-c7970uu34z"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-a56svxgqhs-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the next folder number available","status":"pass","exception":{},"id":"ph4xyrsfj4-a56svxgqhs-lqy9dmrjmo","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":1}],"title":"When getting the next folder number with a populated index that has gaps","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return the next folder number available","status":"pass","exception":{},"id":"ph4xyrsfj4-a56svxgqhs-lqy9dmrjmo","code":"() => {\r\n            folderNumber.should.be.eql(expectedFolderNumber);\r\n        }","duration":1},"id":"ph4xyrsfj4-a56svxgqhs"},{"type":"context","children":[],"tests":[{"title":"should get the full folder path from the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-17z6pl0cgeb-14b4ts79z9p","code":"() => {\r\n            getAppFolderFullPathStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the folder name to the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-17z6pl0cgeb-h905nqi4nf","code":"() => {\r\n            getAppFolderFullPathStub.calledWith(appFolder).should.be.eql(true);\r\n        }","duration":0},{"title":"should return the folder path from the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-17z6pl0cgeb-13xsk53g51c","code":"() => {\r\n            appFolderPath.should.be.eql(expectedAppFolderPath);\r\n        }","duration":0}],"title":"When getting the full path for the app folder","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return the folder path from the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-17z6pl0cgeb-13xsk53g51c","code":"() => {\r\n            appFolderPath.should.be.eql(expectedAppFolderPath);\r\n        }","duration":0},"id":"ph4xyrsfj4-17z6pl0cgeb"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-13vza3eqyc3-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should return no installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-13vza3eqyc3-vcnudjba23","code":"() => {\r\n            should.not.exist(installedAppInfo);\r\n        }","duration":0}],"title":"When getting the installed app info with an empty index","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return no installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-13vza3eqyc3-vcnudjba23","code":"() => {\r\n            should.not.exist(installedAppInfo);\r\n        }","duration":0},"id":"ph4xyrsfj4-13vza3eqyc3"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-505imsutpf-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return no installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-505imsutpf-vcnudjba23","code":"() => {\r\n            should.not.exist(installedAppInfo);\r\n        }","duration":0}],"title":"When getting the installed app info with a populated index and the info does not exist","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return no installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-505imsutpf-vcnudjba23","code":"() => {\r\n            should.not.exist(installedAppInfo);\r\n        }","duration":0},"id":"ph4xyrsfj4-505imsutpf"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should return the installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-mmaaopgisr","code":"() => {\r\n            installedAppInfo.should.be.eql(data.get(secondAppId));\r\n        }","duration":0}],"title":"When getting the installed app info with a populated index and the info exists","statistics":{"passCount":2,"failedCount":0,"pendingCount":0,"totalCount":2,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should return the installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-mmaaopgisr","code":"() => {\r\n            installedAppInfo.should.be.eql(data.get(secondAppId));\r\n        }","duration":0},"id":"ph4xyrsfj4-a55fu9i3og"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-6lvc796hjn","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should write to the installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-16b2ueon90w","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.InstallAppRepository.installedAppIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-13r66hihdn","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":0},{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0}],"title":"When updating the installed app index with an empty index","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-mv1lihwf1c-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0},"id":"ph4xyrsfj4-mv1lihwf1c"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-6lvc796hjn","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-16b2ueon90w","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.InstallAppRepository.installedAppIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-13r66hihdn","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":0},{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0}],"title":"When updating the installed app info with a populated index and the info does not exist","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-cn8xcffwjk-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0},"id":"ph4xyrsfj4-cn8xcffwjk"},{"type":"context","children":[],"tests":[{"title":"should initialize the index","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-mv06xo384g","code":"() => {\r\n            doesFileExistStub.calledOnce.should.be.eql(true);\r\n        }","duration":1},{"title":"should write to the file system","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-6lvc796hjn","code":"() => {\r\n            writeToTextFileStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should write to the installedAppsIndex.json","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-16b2ueon90w","code":"() => {\r\n            writeToTextFileStub.firstCall.args[0].should.be.eql(Services_1.InstallAppRepository.installedAppIndexFileName);\r\n        }","duration":0},{"title":"should write the updated index to file","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-13r66hihdn","code":"() => {\r\n            writeToTextFileStub.firstCall.args[1].should.be.eql(expectedDataString);\r\n        }","duration":1},{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0}],"title":"When getting the installed app info with a populated index and the info exists","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":2,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should be able to retrieve the updated installed app info","status":"pass","exception":{},"id":"ph4xyrsfj4-a55fu9i3og-czhs2pvq8","code":"() => {\r\n            retrievedAppInfo.should.be.eql(installedAppInfo);\r\n        }","duration":0},"id":"ph4xyrsfj4-a55fu9i3og"},{"type":"context","children":[],"tests":[{"title":"should get download and unzip package","status":"pass","exception":{},"id":"ph4xyrsfj4-lr0hm3zhds-lqy4qqavj4","code":"() => {\r\n            downloadAndUnzipPackageStub.calledOnce.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the package url to be downloaded","status":"pass","exception":{},"id":"ph4xyrsfj4-lr0hm3zhds-jko29380i8","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[0].should.be.eql(packageUrl);\r\n        }","duration":0},{"title":"should pass the folder the package should be unzipped to","status":"pass","exception":{},"id":"ph4xyrsfj4-lr0hm3zhds-haq2l15c4d","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(folderToUnzipTo);\r\n        }","duration":0}],"title":"When downloading and unzipping the app package","statistics":{"passCount":3,"failedCount":0,"pendingCount":0,"totalCount":3,"totalRuleViolations":0,"duration":0,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should pass the folder the package should be unzipped to","status":"pass","exception":{},"id":"ph4xyrsfj4-lr0hm3zhds-haq2l15c4d","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(folderToUnzipTo);\r\n        }","duration":0},"id":"ph4xyrsfj4-lr0hm3zhds"},{"type":"context","children":[],"tests":[{"title":"should get download and unzip package","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-lqy4qqavj4","code":"() => {\r\n            downloadAndUnzipPackageStub.calledTwice.should.be.eql(true);\r\n        }","duration":0},{"title":"should pass the first package url to be downloaded","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-f9tktzpq71","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[0].should.be.eql(firstPackageUrl);\r\n        }","duration":1},{"title":"should pass the first folder the package should be unzipped to","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-6nl7oe6m45","code":"() => {\r\n            downloadAndUnzipPackageStub.firstCall.args[1].should.be.eql(firstFolderToUnzipTo);\r\n        }","duration":0},{"title":"should pass the second package url to be downloaded","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-jkogu2oyg0","code":"() => {\r\n            downloadAndUnzipPackageStub.secondCall.args[0].should.be.eql(secondPackageUrl);\r\n        }","duration":0},{"title":"should pass the second folder the package should be unzipped to","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-z19zn0fde3","code":"() => {\r\n            downloadAndUnzipPackageStub.secondCall.args[1].should.be.eql(secondFolderToUnzipTo);\r\n        }","duration":0}],"title":"When downloading and unzipping the app package for different app ids at the same time","statistics":{"passCount":5,"failedCount":0,"pendingCount":0,"totalCount":5,"totalRuleViolations":0,"duration":1,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","step":{"title":"should pass the second folder the package should be unzipped to","status":"pass","exception":{},"id":"ph4xyrsfj4-me117n6x3p-z19zn0fde3","code":"() => {\r\n            downloadAndUnzipPackageStub.secondCall.args[1].should.be.eql(secondFolderToUnzipTo);\r\n        }","duration":0},"id":"ph4xyrsfj4-me117n6x3p"}],"tests":[],"title":"InstallAppRepository","statistics":{"passCount":58,"failedCount":0,"pendingCount":0,"totalCount":58,"totalRuleViolations":0,"duration":6,"passPercent":1,"failedPercent":0,"pendingPercent":0},"filename":"D:/_dev/PowerApps/src/Player/build/Player/test/Services/Install/InstallAppRepository.Spec.js","id":"ph4xyrsfj4","path":"Services/Install"}]}